[[File:Algol68.png|64px|left|alt=Language|link=http://sourceforge.net/projects/algol68]]
{{language|ALGOL 68
|parampass=both
|strength=strong
|safety=safe
|express=explicit
|compat=structural
|checking=both
|tags=algol68
|LCT=yes}}
ALGOL 68 (short for ALGOrithmic Language 1968) is an [[imperative programming|imperative]] computer programming language that was conceived as a successor to the ALGOL 60 programming language, designed with the goal of a much wider scope of application and more rigorously defined syntax and semantics.

The main aims and principles of design of ALGOL 68:
#Completeness and clarity of design,
#Orthogonal design,
#Security,
#Efficiency: 
#* Static mode checking,
#* Mode-independent parsing,
#* Independent compilation,
#* Loop optimization,
#* Representations - in minimal & larger character sets.
<br><br>
==Execute an ALGOL 68 program online==
* http://www.compileonline.com/execute_algol_online.php
* Algol 68G is available as one of the languages at https://tio.run

==Tasks not implemented in ALGOL 68==
[[Tasks not implemented in ALGOL 68]]

==Grammar==
The formal definition of Algol 68 is given by a "Two-Level" or [[wp:Van Wijngaarden grammar|"Van Wijngaarden" grammar]].
This specifies much more than "just" the syntax and includes such semantic details as the requirement of identifiers to be declared, the necessary type checking and coercions to be applied, etc. The degree of precision allowed by the grammar came at the cost of increased complexity relative to Backus Naur Form, which was used to define [[ALGOL 60]]. It is recomended that less formal material (such as the books mentioned under "Resources" below) be consulted before delving into the Revised Report. 
<br>
<br>
A syntax chart is available [http://www.softwarepreservation.org/projects/ALGOL/book/Lindsey_van_der_Meulen-IItA68-Revised-SyntaxOnly.pdf/view here]

==Resources==
* [http://archive.computerhistory.org/resources/text/algol/algol_bulletin ALGOL BULLETIN] - March 1959 to August 1988, in 52 issues
* [https://lists.sourceforge.net/lists/listinfo/algol68-user Algol68 mailinglist] - December 2008 - algol68-user AT lists.sourceforge.net
* [http://www.linkedin.com/groups/Algol68-2333923 Algol68 group at linkedin] - includes various famous compiler composers.
<br>
'''Books available online''':
* [http://jmvdveer.home.xs4all.nl/en.algol-68-genie.html Algol 68G Manual - By Marcel van der Veer] Includes the Revised Report
* [http://www.softwarepreservation.org/projects/ALGOL/book/pame.2008.a4.pdf/view Programming Algol 68 Made Easy -  by Sian Mountbatten (on softwarepreservation.org)]
* [http://www.softwarepreservation.org/projects/ALGOL/book/Lindsey_van_der_Meulen-IItA68-Revised.pdf/view Informal Introduction to Algol 68 - by C. H. Lindsey & S. V. Van der Meulen (on softwarepreservation.org)] - if you prefer (and find) a hardcopy, be sure to get the 1977 edition. Highly recomended!

<br>
'''Editor modes''':
* [http://www.jemarch.net/a68-mode.el Emacs mode] for Algol 68  supporting syntax highlighting and context-sensitive indentation.
* [http://www.vim.org/scripts/script.php?script_id=1927 Vim script] providing support for syntax highlighting.
* [http://qbnz.com/highlighter/demo.php GeSHi syntax highlighting]
* [https://marketplace.visualstudio.com/items?itemName=jlguenego.algol68 VS-Code Algol 68 syntax highlighting]

==Status==
* 20th December 1968 - '''ALGOL 68's''' Final Report was ratified by [http://en.wikipedia.org/wiki/UNESCO UNESCO's] [http://en.wikipedia.org/wiki/IFIP IFIP] working group 2.1 in Munich.
* 20th December 2008 - [[Zig_Zag#ALGOL 68|Zig Zag]] - the 100th '''ALGOL 68''' code contribution on rosettacode.org! 
** Happy 40th Birthday '''ALGOL 68''', 
** AND 50th Birthday '''ALGOL 58'''.
* 23rd August 2009 - [http://sourceforge.net/projects/algol68/files/ algol68g-1.18.0-9h] released
* 20th December 2009 - Happy 51st/41st Birthdays with [[Hamming_numbers#ALGOL_68|Hamming numbers]] - the 200th '''ALGOL 68''' code contribution on rosettacode.org!  
** This time code was by [[User:Algol68g|Marcel van der Veer]], author of [http://www.xs4all.nl/~jmvdveer/algol.html Algol 68 Genie]
* 25th October 2011 - [[User:Jejones3141|Jejones3141]] added [[Soundex#ALGOL_68|Soundex]] - the 300th '''ALGOL 68''' code specimen.

== Revisions ==
*Mar. 1968: Draft Report on the Algorithmic Language ALGOL 68 - Edited by: A. van Wijngaarden, B.J. Mailloux, J.E.L. Peck and C.H.A. Koster.  
*Oct. 1968: Penultimate Draft Report on the Algorithmic Language ALGOL 68 - Chapters 1-9 - Edited by: A. van Wijngaarden, B.J. Mailloux, J.E.L. Peck and C.H.A. Koster.
*Dec. 1968: Report on the Algorithmic Language ALGOL 68 - Offprint from Numerische Mathematik, 14, 79-218 (1969); Springer-Verlag. - Edited by: A. van Wijngaarden, B.J. Mailloux, J.E.L. Peck and C.H.A. Koster.  
*Sep 1973: Revised Report on the Algorithmic Language Algol 68 - Springer-Verlag 1976 - Edited by: A. van Wijngaarden, B.J. Mailloux, J.E.L. Peck, C.H.A. Koster, M. Sintzoff, C.H. Lindsey, L.G.L.T. Meertens and R.G. Fisker.
==Coding style of samples==
Click "Expand" for more details.
<div class="mw-collapsible mw-collapsed" style="width:880px; overflow:auto; background-color:parent;">
<div class="mw-collapsible-content" style="padding-left:2em;">

Many of the code samples provided here have a leading <code>main:(</code> and a matching <code>)</code> at the end. These are not actually required in the language, but are included so as to highlight the main routine.

On some compilers, it may be necessary to include appropriate "job cards" 
or preludes in order for the programs to compile successfully. Hopefully 
not too much else is required. Examples:
{|border="1" style="border-collapse: collapse; border: 5px double grey;"  align="center" 
|| Brief Algol68
|| Algol68 as in rosettacode
|| Actual ELLA Algol 68RS code
|-
||
 print(("Hello, world!",new line))
||
 main:(
   print(("Hello, world!",new line))
 )
||
 PROGRAM helloworld CONTEXT VOID
 USE standard
 BEGIN
   print(("Hello, world!", new line))
 END
 FINISH
|}
<br><br>'''Examples of different program representations'''
<br><br>
At the time when ALGOL 68 was defined some predominant computers had 
24 or 36 bit words, with 6 bit character sets.  Hence it was desirable that
ALGOL 68 should be able to run on machines with only uppercase.   
The official spec provided for different representations of the same 
program. Quote stropping (enclosing the bold words in single quotes)
and Point stropping (preceeding the bold words with a dot)
were used.  A variant of Point stropping called RES stropping was also defined.
In RES stropping some language-defined bold words are not preceded by a dot.   
A pragmatic comment may have been required to indicate which
stropping convention was to be used, as in some of the examples below.
Upper stropping (representing the bold words by upper case and
non-bold words in lower case) was introduced by Algol 68R. Upper stropping
is used by Algol 68RS and is one of the options for Algol 68G.
Rutgers ALGOL 68 uses quote stropping. Most of the samples
on Rosetta Code use Upper stropping.
Examples (pragmatic comments to set the stropping regime not shown):
{|border="1" style="border-collapse: collapse; border: 2px double grey;"  align="left" 
|| Algol68 as typically published
 '''mode''' '''xint''' = '''int''';
 '''xint''' sum sq:=0;
 '''for''' i '''while'''
   sum sq≠70&times;70
 '''do'''
   sum sq+:=i↑2
 '''od''' 
|| QUOTE stropping (similar to wiki)
 'mode' 'xint' = 'int';
 'xint' sum sq:=0;
 'for' i 'while'
   sum sq≠70&times;70
 'do'
   sum sq+:=i↑2
 'od' 
|| POINT stropping
 .MODE .XINT = .INT;
 .XINT SUM SQ:=0;
 .FOR I .WHILE
   SUM SQ .NE 70*70
 .DO
   SUM SQ .PLUSAB I .UP 2
 .OD
|| RES stropping
 mode .xint = int;
 .xint sum sq:=0;
 for i while
   sum sq≠70&times;70
 do
   sum sq+:=i↑2
 od 
|| Upper stropping
 MODE XINT = INT;
 XINT sum sq:=0;
 FOR i WHILE
   sum sq /= 70*70
 DO
   sum sq PLUSAB i UP 2
 OD
|}

</div></div>

== Coercion (casting) ==
ALGOL 68 has a hierarchy of contexts which determine which kind of coercions are available at a particular point in the program.
<br>
Click "Expand" for more details.
<div class="mw-collapsible mw-collapsed" style="width:880px; overflow:auto; background-color:parent;">
<div class="mw-collapsible-content" style="padding-left:2em;">

These contexts are:
{|class="wikitable"
!rowspan=2| N<br>
a<br>
m<br>
e
!rowspan=2| Context location 
!colspan=5| Coercions available in this context
!rowspan=2| Coercion examples
|-
|bgcolor=aaaaff|Soft
|bgcolor=aaeeaa|Weak
|bgcolor=ffee99|Meek
|bgcolor=ffcc99|Firm
|bgcolor=ffcccc|Strong
|-
!S<br>
t<br>
r<br>
o<br>
n<br>
g 
||Right hand side of:
* Identity-declarations, as "~" in: <syntaxhighlight algol68>REAL x = ~</syntaxhighlight>
* Initialisations, as "~" in: <syntaxhighlight algol68>REAL x := ~</syntaxhighlight>
Also:
* Actual-parameters of calls, as "~" in:<syntaxhighlight algol68>PROC: sin(~)</syntaxhighlight>
* Enclosed clauses of casts, as "~" in: <syntaxhighlight algol68>REAL(~)</syntaxhighlight>
* Units of routine-texts
* Statements yielding VOID
* All parts (but one) of a balanced clause
* One side of an identity relation, as "~" in: <syntaxhighlight algol68> ~ IS ~</syntaxhighlight>
|bgcolor=aaaaff rowspan=4 width="50px"| deproc- eduring
|bgcolor=aaeeaa rowspan=3 width="50px"| all '''soft''' then weak deref- erencing
|bgcolor=ffee99 rowspan=2 width="50px"| all '''weak''' then deref- erencing
|bgcolor=ffcc99 rowspan=1 width="50px"| all '''meek''' then uniting 
|bgcolor=ffcccc width="50px"| all '''firm''' then widening, rowing and voiding
|colspan=1 bgcolor=ffcccc|
Widening occurs if there is no loss of precision. For example: An INT will be coerced to a REAL, and a REAL will be coerced to a LONG REAL.  But not vice-versa.  Examples:
<syntaxhighlight algol68>INT to LONG INT
INT to REAL
REAL to COMPL
BITS to []BOOL
BYTES to STRING</syntaxhighlight>
A variable can also be coerced (rowed) to an array of length 1.  

For example:
<syntaxhighlight algol68>INT to [1]INT
REAL to [1]REAL</syntaxhighlight> etc
|-
!F<br>
i<br>
r<br>
m
||
*Operands of formulas as "~" in:<syntaxhighlight algol68>OP: ~ * ~</syntaxhighlight>
*Parameters of transput calls
|colspan=3 bgcolor=ffcc99| Example:
<syntaxhighlight algol68>UNION(INT,REAL) var := 1</syntaxhighlight>
|-
!M<br>
e<br>
e<br>
k
||
* Trimscripts (yielding INT)
* Enquiries: e.g. as "~" in the following
<syntaxhighlight algol68>IF ~ THEN ... FI</syntaxhighlight> and 
<syntaxhighlight algol68>FROM ~ BY ~ TO ~ WHILE ~ DO ... OD etc</syntaxhighlight>
* Primaries of calls (e.g. sin in sin(x))
|colspan=4 bgcolor=ffee99|Examples:
<syntaxhighlight algol68>REF REF BOOL to BOOL
REF REF REF INT to INT</syntaxhighlight>
|-
!W<br>
e<br>
a<br>
k
||
* Primaries of slices, as in "~" in: <syntaxhighlight algol68>~[1:99]</syntaxhighlight>
* Secondaries of selections, as "~" in: <syntaxhighlight algol68>value OF ~</syntaxhighlight>
|colspan=5 bgcolor=aaeeaa|Examples:
<syntaxhighlight algol68>REF BOOL to REF BOOL
REF REF INT to REF INT
REF REF REF REAL to REF REAL
REF REF REF REF STRUCT to REF STRUCT</syntaxhighlight>
|-
!S<br>
o<br>
f<br>
t
|| The LHS of assignments, as "~" in: <syntaxhighlight algol68>~ := ...</syntaxhighlight>
|colspan=6 bgcolor=aaaaff| Example:
* deproceduring of: <syntaxhighlight algol68>PROC REAL random: e.g. random</syntaxhighlight>
|}
For more details about Primaries and Secondaries refer to [[Operator_precedence#ALGOL_68|Operator precedence]].

</div></div>

==See also==
*[[Web 68]]
*[[ALGOL 60]]
*[[ALGOL W]]
<br>
* [[Action!]]
* [[Agena]]
* [[Draco]]
* [https://en.wikipedia.org/wiki/S3_(programming_language) S3 for ICL 2900]

== Library code used in Rosetta Code samples ==
[https://rosettacode.org/wiki/Category:ALGOL_68-primes Prime related]
<br>
[https://rosettacode.org/wiki/Category:ALGOL_68-rows Row (array) related]

{{language programming paradigm|Concurrent}}
{{language programming paradigm|Imperative}}