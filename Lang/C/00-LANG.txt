<div class="messagebox">Due to technical limitations, the link [[C sharp|C#]] points to here in some articles. To correct this issue, replace <nowiki>[[C#]] with [[C sharp|C#]]</nowiki>.</div>
{{language
|exec=machine
|gc=no
|safety=unsafe
|parampass=value
|checking=static
|compat=nominative
|express=explicit
|strength=weak
|tags=c
|hopl id=577
|LCT=yes
|bnf=http://c.comsci.us/syntax/index.html
}}{{language programming paradigm|Imperative}}{{Codepad}}
'''C''' is a general-purpose, [[procedural programming|procedural]], [[imperative programming|imperative]] computer programming language developed in 1972 by Dennis Ritchie at the [[Bell Labs|Bell Telephone Laboratories]] for use with the [[UNIX]] operating system. C evolved from its predecessor, [[derived from::B]].

C has since spread to many other [[:Category:Platforms|platforms]], and is now one of the most widely used programming languages. C has also greatly influenced many other popular languages, such as [[C++]] and [[Objective-C]], which were originally designed as enhancements to C. People are so familiar with its syntax that many other languages such as [[AWK]], [[PHP]], [[Java]], [[JavaScript]], [[D]], and [[C Sharp|C#]] deliberately used its "look and feel". C is the most commonly used programming language for writing system software, though it is also widely used for writing applications. [[C]] is the ''lingua franca'' of the [[open source]] community.

==Versions==
* '''K&R C''' was the first widely-used form of C. It was originally documented in ''The C Programming Language'', published in 1978. It is named for the authors, Brian Kernighan and Dennis Ritchie (also the language's creator). Code in this style is virtually nonexistent today.
* '''C89''' (often called '''[[ANSI]] C''') is the version of C standardized by ANSI in 1989. It is the most commonly used and supported version of the language.
* '''C90''' (often called '''[[ISO]] C''') is identical to C89, republished by ISO in 1990. 
* '''C99''' is a significant improvement, adopting many features of [[C++]] and standardizing common compiler extensions. It was standardized by ISO in 1999, and by ANSI in 2000. It is primarily supported by commercial C compilers, but most of its features are available in [[Clang]] [[GCC]]. [http://gcc.gnu.org/c99status.html]
* '''C11''' is the previous standard, published in December 2011. It is the default for [[GCC]] as of version 5.1.
* '''C18''' is the current standard, published in June 2018. It is the default for [[GCC]] as of version 8.1.
* '''C2x''' is the upcoming standard, expected to be voted on in 2023 - it will then become C23. [[GCC]] 9, [[Clang]] 9 and Pelles C 11 have preliminary support for it.

==Overview==

===Curly Braces===
C uses curly braces as a separator for sections of code. All curly braces must be "balanced," i.e. every left curly brace must have a right curly brace after it. Nesting curly brace pairs inside curly braces is also acceptable as long as none of them are "lonely." Most advanced code editors will help you with curly braces by automatically typing the right brace as soon as you type the left one.

<lang C>int main()
{

// your main program goes here
// if you forgot either of these curly braces you would get an error message when you try to compile!

}</lang>

The contents of a function, if statement, etc. <b>must</b> be enclosed in curly braces for the code to count as part of that section.
<lang C>{     
//this wouldn't actually compile as none of these variables were declared in this scope. More on that later. 

if (K == 3)
{
X = Y;        //this line will be skipped if K doesn't equal 3.
}
Y = Z;        //this is not part of the if statement. It will execute even if K doesn't equal 3.

}</lang>

===Semicolons===
Any "executable" statement must end in a semicolon, such as an assignment or function call. If you get an error message from your compiler, it won't explicitly tell you "Expected semicolon at end of line X." Go to the line number it says the error is at, and look a few lines <i>above</i> that. You might have forgotten a semicolon there.

===Scope===
Unlike assembly which lets you jump anywhere or read any memory address, C imposes restrictions on labeled values. A variable defined inside a function can only be "seen" by that function, and not the ones outside it. Furthermore, you can re-use variable names inside a function and it refers to a different entity than the variable of the same name defined outside.

===Functions===
A function is made up of three parts: its return type, its name, and its arguments. 
<lang C>int main(void)       //This is the function "main," which takes no arguments and returns a 32-bit signed integer value.

int sum(int a,int b) //This is the function "sum," which takes two integer arguments and returns an integer.

void PlaySound(char songName) 
//This takes a character string as an argument and presumably sends a command to sound hardware.
//It returns no values. Functions that have a return value of "void" typically do some sort of 
//procedure whose outcome does not need to be measured or remembered later.</lang>

Note that the variable names listed as arguments when declaring a function are known as <i>formal parameters</i> and only are there to define the function. Variables with those names need not be declared or defined in your actual function, nor do they refer to any variables in your program that happen to have the same name. Essentially, formal parameters act as placeholders for the actual function parameters that you'll be using.
<lang C>int foo(int x){
return x;
} // "x" doesn't need to be a variable in your real program. If it is, that's not related in any way to the "x" here.

int main()
{

int y;
int z = 2;

y = foo(z);      //note that x was never involved. That's because the "x" earlier was the formal parameter.

}</lang>

===Assignment===
C allows you to define a variable as equal to a value, in more ways than just simple numerals.
<lang C>int a = 3; //declare the variable a of type int, define it equal to decimal 3.

int b = -1; //declare the variable b of type int, define it equal to -1 (0xFFFFFFFF in hex)

char letter = "A";
//declare the variable "letter" of type char, it equals capital A.
//C allows you to treat an ascii value as its numeric equivalent whenever you feel like it. Other languages do not.

char myString = "Hello"; //define the array "myString" containing the letters "Hello" followed by a null terminator.

int myArray[5] = {10,20,30,40,50}; 
//declare the array variable "myArray" containing integer values, with a maximum size of 5 elements.
//Then assign 10 to the beginning, 20 after it, 30 after that, and so on.

int c = sum(a,b); 
//declare the integer variable "c". 
//Define it to equal the output of the function sum using the previously defined variables "a" and "b" as arguments.
//When this line of code is executed, the computer will perform the function "sum(a,b)" and store the result in c.
//This is only valid if the return type of the function "sum" matches the type of the variable "c."</lang>

===Declaring vs. Defining===
This is a very unintuitive aspect of C that often confuses new users. Declaring a variable or function tells the compiler that a function may exist. Defining a variable or function assigns it a value or procedure, respectively. Compare the two examples below:
<lang C>int a; // The variable "a" has been declared, but not defined.
a = 2; // Now the variable has been defined.</lang>

<lang C>int a = 2; //The variable "a" has been both declared and defined.</lang>

* You cannot define a variable without declaring it first.
* Before a variable can be used, it must be defined.

===Types===
C has the following types built in by default, but you can create your own based on these using the <code>typedef</code> directive. This is not an exhaustive list. Some of these names will have different meanings depending on the hardware you're programming for.
* <code>char</code>: an 8 bit value, typically used to represent ASCII characters.
* <code>short</code>: a 16 bit value.
* <code>int</code>: a 32 bit value.
* <code>struct</code>: a collection of several other values, stored consecutively in memory. Each can be a different type.
* <code>union</code>: a variable that can hold several different types of data, but only one at a time.
* <code>float</code>: a single-precision (32-bit) floating-point decimal value.

You can also add a few modifiers in front of the variable type to be more specific:
* <code>unsigned</code> tells the compiler that this variable is always treated as positive. Computers use two's complement to represent negative numbers, meaning that if the leftmost bit of a number's binary equivalent is set, the value is considered negative. The resulting assembly code will use unsigned comparisons to check this variable against other variables.
* <code>volatile</code> tells the compiler that this variable's value can changed by the hardware. This is commonly used for hardware registers such as those that track the mouse cursor's location, a scanline counter, etc. The value will always be read from its original memory location, ensuring that its value is always up-to-date.

Examples:
<lang C>unsigned int x;
volatile int HorizontalScroll;</lang>

Functions are declared in a similar fashion to variables, except a function's "type" is the type of the value it returns.
<lang C>int foo(int bar); 
// The function foo was declared. It takes an integer as an argument and returns an integer.
// What it actually does is currently unknown but can be defined later.</lang>

==Citation==
*[[wp:C_%28programming_language%29|Wikipedia:C (programming language)]]

==Todo==
* [[Tasks not implemented in C]]


{{language programming paradigm|Imperative}}