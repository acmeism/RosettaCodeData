<!-- page extracted from wikipedia: http://en.wikipedia.org/wiki/RTL/2 -->
{{wikipedia|RTL/2}}
{{language|ALGOL 68
|parampass=both
|strength=weak
|safety=safe
|express=explicit
|compat=structural
|checking=both
|LCT=yes}}

RTL/2 was a high-level programming language developed at [[wp:Imperial Chemical Industries|Imperial Chemical Industries Ltd]] by [[wp:John Barnes (computer scientist)|J.G.P. Barnes]]. It was originally used internally within ICI but was distributed by SPL International in 1974<ref>Barnes J.G.P., The Standardisation of RTL/2, Software Practice and Experience, Volume 10 Issue 9, pp 707 - 719, Wyley, September 1980</ref>
It was designed for use in real-time computing (hence the acronym RTL = real-time language). Based on concepts from [[Algol 68]], it was intended to be a small, simple language.<ref>RTL/2 Language Specification</ref><ref>http://hopl.murdoch.edu.au/showlanguage2.prx?exp=596#_jmp0_</ref> RTL/2 was standardised in 1980 by the [[wp:British Standards Institution|British Standards Institution]]<ref>http://shop.bsigroup.com/en/ProductDetail/?pid=000000000000133906</ref>.

RTL/2 was a [[wp:Weakly-typed programming language|weakly typed language]] with separate compilation. The [[wp:compilation unit|compilation units]] contained one or more items known as "bricks", i.e.:

* procedure bricks,
* data bricks,
* stack bricks.

A procedure brick was a procedure, which may or may not return a (scalar) value, have (scalar) parameters, or have local (scalar) variables. The entry mechanism and implementation of local variables was [[wp:Reentrant_(subroutine)|re-entrant]]. Non-scalar data could only be accessed via reference (so-called REF variables were considered scalar).

A data brick was a named static collection of scalars, arrays and records. Programmers had to implement memory management themselves (there was no heap or garbage collection).

A stack brick was an area of storage reserved for running all the procedures of a single process and contained the call stack, local variables and other housekeeping items. The extent to which stack bricks were actually used varied depending upon the host environment in which RTL/2 programs actually ran.

Access to the host environment of an RTL/2 program was provided via special procedure and data bricks called SVC procedures and SVC data. These were accessible in RTL/2 but implemented in some other language in the host environment.

== Dropping into Assembler ==

RTL/2 compiles to assembly language and provides the CODE statement to permit assembly language to be inserted directly into RTL/2 programs. This is only available when compiled with a systems programming option (CN:F)

The Code statement takes two operands: the number of bytes used by the code insert and the number of bytes of stack used.

Within code statements two trip characters are used to access RTL/2 variables. These vary from operating system to operating system. 
On PDP-11 and VAX/VMS the trip characters are '*' and '/'

While the specifics varied by operating system the following is an example of a code insert on [[wp:VAX/VMS|VAX/VMS]]:

:<tt>CODE    6,0;</tt>
:<tt>JMP CODE_ENT ; This code insert can be set to a fixed length as it jumps to a new psect.</tt>
::::<tt>; this technique is especially useful on systems such as VMS where the length</tt>
::::<tt>; of instructions is variable</tt>
:<tt>.SAVE_PSECT  ; Save current program section</tt>
:<tt>.PSECT ASMB_CODE,EXE,NOWRT,LONG</tt>
:<tt>CODE_ENT:</tt>
:<tt>MOVL  *PARAM1(AP),*COUNTER/MYDATA</tt>
:<tt>JMP CODE_EX</tt>
:<tt>.RESTORE_PSECT</tt>
:<tt>CODE_EX:</tt>
:<tt>     *RTL</tt>

This code insert moves the value of a variable passed into the RTL/2 procedure into a variable called COUNTER in a data brick called MYDATA.

== Reserved Words ==
ABS
AND
ARRAY
BIN
BLOCK
BY
BYTE
CODE
DATA
DO
ELSE
ELSEIF
END
ENDBLOCK
ENDDATA
ENDPROC
ENT
EXT
FOR
FRAC
GOTO
HEX
IF
INT
LABEL
LAND
LENGTH
LET
LOR
MOD
NEV
NOT
OCT
OF
OPTION
OR
PROC
REAL
REF
REP
RETURN
RTL
SHA
SHL
SLA
SLL
SRA
SRL
STACK
SVC
SWITCH
THEN
TITLE
TO
VAL
WHILE

== References==
=== SPL Documentation ===

SPL published a range of documentation for RTL/2. Each of these documents had a reference number assigned. The following is an incomplete list.
 RTL/2 Ref 1  - Language Specification
 RTL/2 Ref 2  - Introduction to RTL/2
 RTL/2 Ref 3  - RTL/2 Training Manual
 RTL/2 Ref 4  - System Standards
 RTL/2 Ref 5  - Stream I/O
 RTL/2 Ref 18 - Hints on writing RTL/2 Programs
 RTL/2 Ref 26 - Language Reference Card
 RTL/2 Ref 39 - Run time environment on the PDP-11
 RTL/2 Ref 63 - User Manual for the PDP-11 under RSX-11M
 RTL/2 Ref 107- VAX/VMS RTL/2 User Manual
 RTL/2 REF 130- The RTL/2 32 bit run time environment on the VAX
{{Reflist}}

== Code Specimen ==
{{language programming paradigm|Imperative}}
{{stub}}