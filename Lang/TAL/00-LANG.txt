{{stub}}{{language|TAL
|site=http://www.cs.cornell.edu/talc/
}}


Typed Assembly Language (TAL) extends traditional untyped assembly languages with typing annotations, memory management primitives, and a sound set of typing rules.  These typing rules guarantee the memory safety, control flow safety, and type safety of TAL programs.  Moreover, the typing constructs are expressive enough to encode most source language programming features including records and structures, arrays, higher-order and polymorphic functions, exceptions, abstract data types, subtyping, and modules.  Just as importantly, TAL is flexible enough to admit many low-level compiler optimizations.  Consequently, TAL is an ideal target platform for type-directed compilers that want to produce verifiably safe code for use in secure mobile code applications or extensible operating system kernels.