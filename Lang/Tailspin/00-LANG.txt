{{language|Tailspin
|site=https://github.com/tobega/tailspin-v0
|tags=tailspin}}

Tailspin simplifies data transfer and the processing of data according to rules and conditions.
Thanks to its declarative data structures and corresponding condition matching syntax,
many algorithms look exactly like the specification, for example, compare the
[https://rosettacode.org/wiki/JSON#Tailspin json parser]
and the [https://www.json.org/json-en.html json specification].

Despite the grounding in business data processing, Tailspin turns out to be fun to use and has been
used for the [https://adventofcode.com/ adventofcode] events of [https://github.com/tobega/aoc2018 2018]
, [https://github.com/tobega/aoc2019 2019] and [https://github.com/tobega/aoc2020 2020]

The inspiration comes mostly from xslt, but data structures are json-like. The main idea is to let your data flow through a series of transforms so it should be easy to specify that flow. Transform steps can be specified as a set of templates with pattern-matching determining which template to apply. Output is generally specified as literals with interpolation of values.

[http://tobega.blogspot.com/2020/05/a-little-tailspin.html Quick intro]

[https://github.com/tobega/tailspin-v0/blob/master/TailspinReference.md Syntax reference]

Development page, also how to run Tailspin programs [https://github.com/tobega/tailspin-v0 on github]