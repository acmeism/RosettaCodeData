{{language}}'''Uniface''' is a development and deployment platform for enterprise applications that can run in a large range of runtime environments, including mobile, mainframe, web, [[Service-oriented architecture]] (SOA), [[Microsoft Windows|Windows]], [[Java Platform, Enterprise Edition|Java EE]] and [[Microsoft .NET|.NET]].  Uniface is a model-driven, Rapid Application Development(RAD)environment used to create mission-critical applications.

Uniface applications are database- and platform-independent. Uniface provides an integration framework that enables Uniface applications to integrate with all major DBMS products such as [[Oracle]], [[Microsoft SQL Server]], [[MySQL]] and [[IBM DB2]]. In addition, Uniface also supports file systems such as RMS (HP OpenVMS), Sequential files, operating system text files  and a wide range of other technologies, such as mainframe-based products ([[CICS]], [[IBM Information Management System|IMS]]), [[web service]]s, [[Simple Mail Transfer Protocol|SMTP]] and [[Post Office Protocol|POP]] email, [[LDAP]] directories, [[Microsoft .NET|.NET]], [[ActiveX]], [[Component Object Model]] (COM), [[C (programming language)|C(++)]] programs, and [[Java (programming language)|Java]]. Uniface operates under [[Microsoft Windows]], [[Windows Mobile]], various flavors of [[Unix]] and [[Linux]], [[OpenVMS|VMS]], IBM [[IBM System i|iSeries]], and  [[z/OS]].

Uniface can be used in complex systems that maintain critical enterprise data supporting mission-critical business processes such as point-of sale and web-based online shopping, financial transactions, salary administration, and inventory control. It is currently used by thousands of companies in more than 30 countries, with an effective installed base of millions of end-users. Uniface applications range from client/server to web, and from data entry to workflow, as well as portals that are accessed locally, via intranets and the internet.

Originally developed in the Netherlands by Inside Automation, later Uniface B.V., the product and company were acquired by Detroit-based [[Compuware]] Corp in 1994, and in 2014 was acquired by Marlin Equity Partners and is now an independent company. Uniface B.V. global headquarters are based in [[Amsterdam]]. 

== Uniface Products ==
Uniface Development Environment—an integrated collection of tools for modeling, implementing, compiling, debugging, and distributing applications.


Uniface applications, including the above, use a common runtime infrastructure, consisting of:
* Uniface Runtime Engine—a platform-specific process that interprets and executes compiled application components and libraries.
* Uniface Router—a multi-threaded process responsible for interprocess communication in Uniface applications. It starts and stops Uniface Server processes, performs load balancing, and passing messages between various Uniface processes.
* Uniface Server—a server-based process that enables Uniface clients to access remote resources or to execute remote components. It acts as an application server, a data server, and a file server.
*Uniface Repository—an [[SQL]]-capable DBMS used to store definitions and properties of development objects, process and organization models, and portal definitions.
*Web server—Uniface bundles the Apache Tomcat Server for developing and testing web applications, but any web server can be used in a production environment.
*Servlets—Java servlets that broker communication between a web server and the Uniface Server for Uniface web applications and web services.
*Database connectors—drivers that handle the connection between Uniface and a variety of databases. 
*Integration tools—drivers, components, and APIs that handle communication between Uniface and third-party applications and technologies, including Java, CICS, IMS, LDAP, SMTP, POP, operating system commands, COM, and more.  

In addition, the Uniface JTi (Java Thin Client Interface) can deliver client/server Uniface applications to any computer connected to the Internet.

Uniface has a proprietary procedural language called Proc that is used to code application behavior. Uniface automates most input/output operations through its kernel and default code, so much fundamental behavior does not need to be coded.

== Uniface Applications ==
Uniface applications are component-based, infrastructure-independent software programs that can create or use data stored in one or more databases or file-systems. They can be composite applications that include non-Uniface components created using other development tools, and they can be deployed in distributed client/server and web environments, as mobile applications or web services, and in mainframe environments.

Uniface has a variety of component types that are intended for use in different layers of a multi-tier application architecture. 

Components for the presentation tier are responsible for the user interface, and include: 
*Forms—interactive screens for displaying and updating data in a client/server environment. 
*Server Pages—interactive pages for displaying and updating data in a web environment. 
*Reports—layouts for presenting data in a printed output. 

Components for the business logic tier handle business rules and task-specific behavior and have no user interface: 
*Services—provide processing and business logic functionality when called by other components, either locally or remotely.  
*Session Services—centralize complex business rules affecting multiple data entities, such as task-specific behavior, transactions, and referential integrity. 
*Entity Services—centralize simple business rules for single data entities.

The data access tier contains physical database structures captured in the Uniface application model. Uniface ensures physical data access by encapsulating SQL in its DBMS connectors. Network and middleware access are encapsulated by the middleware drivers and the Uniface Router.

The runtime engine executes the application components. It displays presentation components using the appropriate user interface connector (either GUI or character-based), and sends and receives data via a DBMS connector.

== Application Development ==
Uniface applications are developed on with the Uniface Development Environment. Originally, it was possible to develop on [[Apple Inc.|Apple]] and [[Digital Equipment|DEC]] platforms; now, [[Microsoft Windows|Windows]] is the supported platform for development.

Uniface applications development is model-driven and component-based. The data structure, business rules, and default behavior of the application are captured in the Application Model. Model definitions can be reused and inherited by components, which can override inherited definitions and provide component-specific behavior and characteristics. Templates improve productivity and enforce consistency when defining models.

=== Application Model ===

The application model defines entities (tables), fields, keys (indexes) and relationships together with referential integrity. Each entity and field in the model has properties and a set of triggers.  Business rules are added to the model declaratively by setting properties and procedurally by adding Proc code (Uniface's procedural language) in triggers. 

Triggers are containers for code. Some triggers represent user or system events, for example Occurrence Gets Focus, Read or Leave Field.  Others cover matters such as validation or act as place holders for methods associated with the particular object.  

The use of model-level triggers enables Uniface to collect properties and behavior within business objects, separating logical from the physical data structures. It makes it possible to define default behavior once, for reuse throughout the application, speeding development and facilitating the 3-tier application architecture.

Each entity (table) is first defined in the Application Model from where it can be exported to the physical database in the form of CREATE TABLE scripts.

=== Components ===

Objects described in the application model are reused by components. Developers embed objects from the model on the component by drawing them on the layout canvas (for presentation components), or inserting them into a tree view of the component structure. They can also add component-level objects that are not in the application model, such as control fields, menus, and component variables. 

The properties and triggers defined in the application model are inherited by being copied into the component.  The definitions can be changed at the component level to provide specific functionality. This breaks the link between the application model and the component (although it is possible to restore the link to the model). If the model code or properties are changed at the model level, all components holding that object need only be recompiled to collect the new definitions. This provides benefits in maintenance and ensures that the rules associated with the object are available wherever it is used.

=== Uniface Repository ===

Uniface maintains a database of its own metadata for the purposes of reuse—application models, component definitions, component layouts, procedural code, and so on. The repository is proprietary and intended for access via the Uniface Development Environment, to ensure repository integrity. However, the repository structure is documented, making it possible (though not recommended) to interface directly with it for, for example, reporting. 

By using a centralized repository, application development can be shared over teams of software developers.  Uniface can integrate with any [[version control system]] (VCS) that supports the Microsoft Common Source Code Control Interface Specification.  The VCS functionality available within Uniface depends on the VCS used, because software vendors have interpreted and implemented the MS CSCC API differently.

== Application Deployment ==
Uniface applications can be deployed on platforms from mainframe through mobile, without changing the code. The components (and other objects such as startup shells, menus, toolbars (panels), glyphs, global and included Proc entries) are compiled into runtime objects that can be packaged into zip files and deployed onto any platform. The runtime objects are executed using a virtual machine and a platform-specific interpreter. (Java later followed Uniface in this respect). Components can be compiled on one machine and executed on another, providing the Uniface Virtual Machine is present. 

The Uniface Router and Uniface Server make Uniface scalable, balanceable and make is possible to run processes asynchronously.

== Database Connectivity ==

Uniface accesses the many databases and file systems it supports by means of database connectors (or drivers). DBMS connectors map and convert Uniface data types to the most suitable format of the particular storage medium. At runtime, it is possible to pass parameters to invoke (or disable) database-specific extensions.  Provided the database connector is licensed, it is possible to convert between different data sources. Uniface also provides an API, the Database Connector Interface, which can be used to create proprietary connectors for any [[SQL]]-based database.

== Licensing ==

Licensing is managed through the Compuware Distributed License Manager (DLM), a server based system of distributing licenses to clients on request, precluding the need for them to be held locally. 

== History of Uniface ==
Originally called UNIS, the product was created in The Netherlands in 1984 by Inside Automation, a company that was headed by Bodo Douqué, with Frits Kress as Technical Director. By 1986, both the product and the company had changed their name to Uniface. (An early logo for the product included a red capital A which reflected the red capital A in the Inside Automation logo.)

Uniface was developed on the principles of the American National Standards Institute, (ANSI), [[Three_schema_approach|3-schema architecture]].  First proposed in 1975, this was a standard approach to the building of database management systems consisting of 3 schema (or metamodels):
*Conceptual schema—definition of all the data items and relationships between them. There is only one conceptual schema per database. Uniface implements the conceptual schema as the Application Model (in various Uniface versions known as the Business Object Model and the Application Object Model).
*External schema—different external (user) views of the data. There can be many external schemas for a database. Uniface implements external schemas as components. During Uniface's evolution, the External Schema became forms; hidden forms, which ran in the background without displaying to the user, became services; services split into session services for objects of the business tier and entity services that may be either business or data tier. Forms that were printed instead of being displayed became report components. The server page (USP) was introduced for web development, and later the dynamic server page was introduced to support Web 2.0 functionality.
*Internal schema—definition of the physical representation of the stored data. Uniface leaves the internal schema to the many relational database systems to which it could be connected, enabling it to be database-independent.

Uniface was developed on the [[Digital Equipment Corporation|DEC]] [[VAX]] machine, using the native VAX file-management system [[Record Management Services|RMS]].  A vestige of this is still seen in today’s product by its continued use of a [[Gold key (DEC)|“GOLD” key]] to change modes ([[VT100|DEC VT terminals]] actually had a gold or yellow key on the keyboard. Today the “GOLD” is simply mapped to the numeric keyboard + key, or a function key).  

Early versions of the product were bundled with the Sybase RDBMS under the name FastBuild, although it was not limited to accessing only that database. 

Uniface has continuously evolved to handle new technologies and application architectures. This has been critical to its success, because applications built with Uniface can be migrated, updated and modernized without losing the original development investment.

== Uniface Versions ==

'''Uniface Version 3''' (1986):
Uniface 3 was the first public release. It featured support for multiple databases (RMS, Oracle, C_ISAM, Ingres, and RDB); virtual machine interpretation; the Structure Editor, the Uniface text and command editor.

'''Uniface Version 4''' (1988):
Uniface 4 improved the text editor (now form editor), improved printing and display support, introduced support for MS-DOS, and added a CASE tool interface.

'''Uniface Version 5''' (1990):
Uniface 5 enabled client/server deployment with the introduction of remote database access through Polyserver. It introduced graphical user interface via the Universal Presentation Interface (UPI). Database support was extended to a total of 13 databases and file systems, and it was now available on DOS, VMS, OS/2, Stratus VOS and UNIX. Japanese character support was also introduced.

'''Uniface Six''' (1994):
Uniface Six completed the move to fully graphical development environments. It included the graphical form painter and application model editor; improved deployment through Dynamic Object Libraries; added support for Microsoft Object Linking and Embedding (OLE); included support for Apple Macintosh; added permissions control; integrated version control; added Personal Series reporting tools (although these were later removed when the 3rd party decided not to enhance its product); wider platform support.

'''Uniface Seven''' (1997):
Uniface Seven focused on component integration for both Uniface and external components through the introduction of the Uniface Request Broker (URB) architecture. The URB supports bi-directional and synchronous or asynchronous communication between components. As well as remote data access, it added partitioned Application Servers and messaging. Uniface Seven also delivered the first Uniface web development and deployment tools with Web Application Server and Uniface Request Dispatcher.

Other enhancements included new component types (Services, Server Pages, Reports); Signature Editor and Assembly Workbench; subsystems; operations; non-modal forms; component instances; improved editors and navigation; enhanced editor plug-in; new debugger; integrated online help; component templates; Web Application Server; improved validation;  Uniface Name Server and graphical partitioning manager.

Uniface Seven also saw the introduction of several other tools:
*A tool for the modeling, integration and management of business processes. This functionality became Optimal Flow under Uniface 8, then Uniface Flow under Uniface 9.  
*A business integration portal, initially called Optimal View, and later Uniface View
*Uniface—a server-based, thin-client solution for delivering web-enabled applications over the Internet or Intranet, providing high-performance in low-bandwidth connections.

'''Uniface 8''' (2001):
Uniface 8 brought about major changes in the area of process integration. The Uniface Router and Uniface Server provided scalable, balanced deployment. The Web Request Dispatcher (WRD) replaced the URD, improving performance. Support for web services, with SOAP and XML, was introduced.  Connectivity and interoperability were improved and a method for implementing a 3-tier application architecture was introduced.
Connectors for SOAP, COM, CORBA and MQSeries were added; window and file management was improved; a new deployment utility) was introduced, improving application distribution; component subtypes for 3-tier architecture were added; handles were added for component instances, and automatic garbage collection was added.

'''Uniface 9''' (2006):
The Uniface 9 release focused on GUI and usability improvements, thin deployment, and integration. Support for Windows Mobile was added, and configuration and deployment was simplified using zipped archives. Support for Unicode improved what was an already impressive multilingual capability, and improvements in web development and XML handling brought Uniface further into line with industry standards. Dynamic field movement in form components removed some old barriers to flexibility.  

Other features included improved color handling, dynamic menus, an XML API, a diagram editor for the Application Model; cross-referencing functionality to support refactoring and deployment, and enhanced web services functionality.

'''Uniface 9.4''' (2010):
Despite being a point release, Uniface 9.4 introduced enough major new functionality to be considered a major release. The major focus was on rich internet application (RIA) functionality, making it possible to develop Web 2.0 applications with the rich functionality of client/server applications using the same tools and methodologies used to develop classic client/server applications. Language and locale support was substantially improved, as was support for HTML email, and security and encryption. 

'''Uniface 9.5''' (2011):
The release of Uniface 9.5 has improved the product’s integration with the World Wide Web.  The introduction of a JavaScript API, together with other improvements,  means that client-side processing can bring benefits in the areas of performance, integration, functionality and user-friendliness.  The session management capability has been extended to offer improved security.  And the processing of Web Services now fully supports complex datatypes for both SOAP and RESTful services.  There have also been improvements for those customers who have business-critical client/server applications, particularly in the area of the grid widget.

'''Uniface 9.6''' (2012):
Uniface 9.6, provided a significant overhaul of the Uniface client server GUI capabilities.  Functionality included an HTML5 control leveraging the JavaScript APIs originally delivered for the web, an enhanced tab control and updates to image handling, buttons plus other improvements. The form container control enables 'forms within forms', enabling the development of dynamic user experiences. 

In addition to the GUI enhancements, Uniface 9.6 also delivered enhancements to the Uniface Web and Web Services capabilities, including the ability to dynamical change the scope of web transactions, web pagination and hitlist processing and improved WSDL and XML capabilities. 

The Uniface Business Unit has been very transparent to the customer base that Uniface 9.6 is the last release of Uniface 9, before the release of Uniface 10 into the market place. 

There is the intention to continue to provide minor enhancements to Uniface 9.6 until 2017.

==External links==
*[http://www.uniface.com Uniface product page] The Uniface Corporate Site
*[http://www.nextcomcz.eu/index.php?kategorie=en.php Nextcom] Czech company developing in Uniface
*[http://www.udev.info www.udev.info] building better web applications with Uniface (Tutorials und HowTo's)
*[http://www.uniface.info The Uniface Community] The Uniface Community web site 
*[http://hosted.byjones.net/turf/ T.U.R.F.] An independent Uniface Related Forum
*[http://march-hare.com/library/html/ud6blurb.htm Database Driver for Source Code] UD6: a database driver for the Uniface repository (used with Version Control)
*[http://tcco.nl/index.html TCCO.NL] Designer Developer Uniface-FAST templates - speeds up your Uniface development process.
*[http://www.uniface.es Uniface. Toda ayuda cuenta] Spanish Uniface forum, news and tutorials.