{{language|Uxntal}}

''For unimplemented tasks see: [https://rosettacode.org/wiki/Tasks_not_implemented_in_Uxntal Uxntal Unimplemened]''

'''Uxntal''' is the assembly language for the Uxn virtual machine. The VM has 64KiB of addressable memory, two 256-byte stacks (data and return), and a 256-byte block of I/O ports, divided into 16 devices with 16 ports each. The Uxntal assembler features sub-labels, simple lambdas, user-defined macros, and shorthands for common immediate operations.

== Uxn VM ==

The Uxn VM relies on stacks for managing data and control flow. There are two stacks, each containing up to 256 bytes - one for general data, and one for return addresses (or anything else you want to temporarily store there). Additionally, data can be read and written anywhere in the 64KiB main memory, including to parts of the code - self-modifying code is often useful in Uxn.

For I/O, Uxn features two instructions <code>DEO</code> and <code>DEI</code>, which are used to access a separate block of 256 8-bit registers, split into 16 devices of 16 ports each. The Varvara specification defines a standard set of computing devices, including keyboard, mouse, and controller input, and video + audio outputs.

The 256 opcodes are divided into 8 special instructions, and 31 regular instructions with 3 flags each. The special instructions, which can't take additional flags are: <code>BRK</code> (break), <code>JCI</code>, <code>JMI</code>, <code>JSI</code>, (immediate jumps), <code>LIT</code>, <code>LIT2</code>, <code>LITr</code>, <code>LIT2r</code> (integer literals). The flags on the regular instructions are: <code>2</code> (short mode), <code>r</code> (use return stack), and <code>k</code> (keep operands). The main instructions include general stack operations, load and store operations, arithmetic operations, and jumps, as well as the two I/O instructions mentioned above.

== Syntax ==

<blockquote>
In concatenative programming, there are no precedence rules, the calculations are merely performed in the sequence in which they are presented. The order with which elements come off a stack is known as last in, first out. '''''â€” [https://wiki.xxiivv.com/site/uxntal_syntax.html Uxntal Syntax]'''''
</blockquote>

Instructions are written in uppercase, followed by any combination of the three flags <code>2kr</code>. Hex values are written with lowercase <code>a-f</code>.

Code can be placed at specific addresses with the <code>|</code> rune, which is especially important for assembling the reset vector at address 0x100 (<code>|0100</code>) and for defining devices and zero-page variables. Padding can be inserted with the <code>$</code> rune.

Labels are created with <code>@</code> and <code>&</code>. The difference is that <code>@</code> creates a label with the given name, while <code>&</code> creates a sub-label by prefixing the most recent <code>@label</code> and a slash.

For further details on Uxntal syntax, see the [https://wiki.xxiivv.com/site/uxntal_syntax.html syntax page] on the XXIIVV wiki.

[[Category:Assembler_language]]
[[Category:Assembly]]
[[Category:Esoteric_Languages]]
[[Category:Execution_method/Compiled/Bytecode]]
[[Category:Programming_paradigm/Object-oriented]]
[[Category:Programming_paradigm/Concatenative]]
[[Category:Typing/Unsafe]]
[[Category:Typing/Untyped]]