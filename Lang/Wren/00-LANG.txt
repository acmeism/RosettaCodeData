{{language|Wren
|exec=interpreted
|strength=strong
|safety=safe
|express=implicit
|checking=dynamic
|gc=yes
|site=http://wren.io/
}}{{language programming paradigm|Object-oriented}}

Wren is a lightweight, [[object-oriented]] [[programming language]] designed to be an easily-embeddable scripting language.

It is under development on [https://github.com/wren-lang/wren GitHub] and is fully documented [http://wren.io/ here].

The CLI tool (Wren CLI) has its own repository and is the main focus of examples written for RC.
The latest version 0.4.0 is available as a pre-built standalone executable for 64-bit Linux, MacOS and Windows and can be downloaded from [https://github.com/wren-lang/wren-cli/releases here].

Following the migration to Miraheze, RC now uses [https://pygments.org Pygments] (rather than GeSHi) for syntax highlighting and I have written a lexer for Wren which is included in version 2.14.0. However, at the time of writing (June 2023), RC is still using version 2.11.2 and it is not known when this will be updated to the latest version. 

In the meantime 'ecmascript', which we currently use for the 'lang' attribute, is supported by virtue of a GeSHi mapping to the 'javascript' lexer and highlights all Wren 0.4.0 keywords except: ''is'', ''construct'' and ''foreign''. I suggest we continue to use that until the Wren lexer is available after which we can use the latter for new tasks and when updating existing tasks. A major effort would be needed to update all existing tasks straightaway given that there are more than 1,600 of them as at June 2023.

As a language mainly designed for embedding, Wren's standard library is (of necessity) quite small and I have therefore decided to create some additional modules to assist with writing Rosetta Code tasks so the same code does not have to be written or copy/pasted time and time again thereby bloating a task's script code unnecessarily. The ones written so far are listed below:

{| class="wikitable"
! No. !! Module name !! !! No. !! Module name
|-
| 1 || [[:Category:Wren-fmt|fmt]] || || 2 || [[:Category:Wren-str|str]]
|-
| 3 || [[:Category:Wren-sort|sort]] || || 4 || [[:Category:Wren-math|math]]
|-
| 5 || [[:Category:Wren-trait|trait]] || || 6 || [[:Category:Wren-seq|seq]]
|-
| 7 || [[:Category:Wren-date|date]] || || 8 || [[:Category:Wren-rat|rat]]
|-
| 9 || [[:Category:Wren-pattern|pattern]] || || 10 || [[:Category:Wren-big|big]]
|-
| 11 || [[:Category:Wren-upc|upc]] || || 12 || [[:Category:Wren-matrix|matrix]]
|-
| 13 || [[:Category:Wren-set|set]] || || 14 || [[:Category:Wren-llist|llist]]
|-
| 15 || [[:Category:Wren-queue|queue]] || || 16 || [[:Category:Wren-complex|complex]]
|-
| 17 || [[:Category:Wren-dynamic|dynamic]] || || 18 || [[:Category:Wren-ioutil|ioutil]]
|-
| 19 || [[:Category:Wren-long|long]] || || 20 || [[:Category:Wren-crypto|crypto]]
|-
| 21 || [[:Category:Wren-sound|sound]] || || 22 || [[:Category:Wren-polygon|polygon]]
|-
| 23 || [[:Category:Wren-srandom|srandom]] || || 24 || [[:Category:Wren-lsystem|lsystem]]
|-
| 25 || [[:Category:Wren-turtle|turtle]] || || 26 || [[:Category:Wren-ellipse|ellipse]]
|-
| 27 || [[:Category:Wren-check|check]] || || 28 || [[:Category:Wren-array|array]]
|-
| 29 || [[:Category:Wren-gmp|gmp]] || || 30 || [[:Category:Wren-ecm|ecm]]
|-
| 31 || [[:Category:Wren-sql|sql]] || || 32 || [[:Category:Wren-event|event]]
|-
| 33 || [[:Category:Wren-i64|i64]] || || 34 || [[:Category:Wren-perm|perm]]
|-
| 35 || [[:Category:Wren-linear|linear]] || || 36 || [[:Category:Wren-regex|regex]]
|-
| 37 || [[:Category:Wren-maputil|maputil]] || || 38 || [[:Category:Wren-plot|plot]]
|-
| 39 || [[:Category:Wren-debug|debug]] || || 40 || [[:Category:Wren-table|table]]
|-
| 41 || [[:Category:Wren-iterate|iterate]] || || 42 || [[:Category:Wren-money|money]]
|-
| 43 || [[:Category:Wren-vector|vector]] || || 44 || [[:Category:Wren-ordered|ordered]]
|-
| 45 || [[:Category:Wren-psieve|psieve]] || ||  ||
|}
<br>
To use a class or classes from a module (say ''fmt''), you need to import them into your script with Wren code such as the following. To use more than one class separate their names with commas:

<syntaxhighlight lang="ecmascript">import "./fmt" for Conv, Fmt</syntaxhighlight>

These modules are subject to the same license as any other code submitted to Rosetta Code though contributors' user pages should be checked to see whether more permissive terms are available. If anyone wishes to add further modules, please do so using a similar model and append them to the list.

Please note that when creating a category for a new module its name should be prefixed with 'Wren-' as in 'Wren-fmt' and the library header for a task which uses the module should therefore use this name. Modules will normally have generic names and this convention allows Rosetta Code users to easily distinguish Wren modules from similarly named modules/libraries written for other languages.

There are also a number of third-party modules available for Wren of which the following have been used to write solutions for Rosetta Code tasks:

{| class="wikitable"
! No. !! Module name !! !! No. !! Module name
|-
| 1 || [[:Category:DOME|DOME]] || || 2 || [[:Category:Raylib-wren|Raylib-wren]]
|-
| 3 || [[:Category:SpiderWren|SpiderWren]] || || 4 || [[:Category:Wren-assert|Wren-assert]]
|-
| 5 || [[:Category:Wren-json|Wren-json]] || || 6 || [[:Category:Wren-test|Wren-test]]
|-
| 7 || [[:Category:WrenGo|WrenGo]] || || 8 || [[:Category:Wren-xsequence|Wren-xsequence]]
|}
<br>
For further information and licensing requirements, please consult their individual pages.

==Todo==
* [[Tasks not implemented in Wren]]