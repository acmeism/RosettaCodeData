doors = malloc$ 100u
for uint [0u, sizeof$ doors) with l1 {
  put_byte$ + doors l1 as false byte
}
function void pass(step:uint) {
  location = step
  while <= location sizeof$ doors {
    ac = - + doors location 1u
    put_byte$ ac ~ deref_byte$ ac// true is represented as 255 (0xff)
    location = + location step
  }
}
for uint (0u, sizeof$ doors] with l2 {//range exclusive of 0, inclusive of 100
  pass$ l2
}
count = 1u
for ubyte as doors listubyte with isopen {// list for-each
  if as isopen bool {// cast byte to bool
    puts$ "door "
    putui$ count
    puts$ " is open\n"
  } ;
  count = + count 1u
}
free$ doors
