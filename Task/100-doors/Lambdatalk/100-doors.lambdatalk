1) unoptimized version

{def doors
 {A.new
  {S.map {lambda {} false} {S.serie 1 100}}}}
-> doors

{def toggle
 {lambda {:i :a}
  {let { {_ {A.set! :i {not {A.get :i :a}} :a} }}}}}
-> toggle

{S.map {lambda {:b}
 {S.map {lambda {:i} {toggle :i {doors}}}
  {S.serie :b 99 {+ :b 1}}}}
   {S.serie 0 99}}
->

{S.replace \s by space in
 {S.map {lambda {:i} {if {A.get :i {doors}} then {+ :i 1} else}}
  {S.serie 0 99}}}

-> 1 4 9 16 25 36 49 64 81 100

2.2) optimized version

{S.replace \s by space in
 {S.map {lambda {:i}
         {let { {:root {sqrt :i}} }
              {if {= :root {round :root}}
               then {* :root :root}
               else}}}
        {S.serie 1 100}}}

-> 1 4 9 16 25 36 49 64 81 100
