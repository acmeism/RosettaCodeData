use perl5i::2;

package doors {

  use perl5i::2;
  use Const::Fast;

  const my $OPEN   => 1;
  const my $CLOSED => 0;

  # ----------------------------------------
  # Constructor: door->new( @args );
  # input: N - how many doors?
  # returns: door object
  #
  method new($class: @args ) {
    my $self = bless {}, $class;
    $self->_init( @args );
    return $self;
  }

  # ----------------------------------------
  # class initializer.
  # input: how many doors?
  # sets N, creates N+1 doors ( door zero is not used ).
  #
  method _init( $N ) {
    $self->{N} = $N;
    $self->{doors} = [ ($CLOSED) x ($N+1) ];
  }

  # ----------------------------------------
  # $self->toggle( $door_number );
  # input: number of door to toggle.
  # OPEN a CLOSED door; CLOSE an OPEN  door.
  #
  method toggle( $which ) {
    $self->{doors}[$which] = ( $self->{doors}[$which] == $OPEN
                               ? $CLOSED
                               : $OPEN
        		     );
  }

  # ----------------------------------------
  # $self->toggle_n( $cycle );
  # input: number.
  # Toggle doors 0, $cycle, 2 * $cycle, 3 * $cycle, .. $self->{N}
  #
  method toggle_n( $n ) {
    $self->toggle($_)
      for map { $n * $_ }
          ( 1 .. int( $self->{N} / $n) );

  }

  # ----------------------------------------
  # $self->toggle_all();
  # Toggle every door, then every other door, every third door, ...
  #
  method toggle_all() {
    $self->toggle_n( $_ ) for ( 1 .. $self->{N} );
  }


  # ----------------------------------------
  # $self->print_open();
  # Print list of which doors are open.
  #
  method print_open() {
    say join ', ', grep { $self->{doors}[$_] == $OPEN } ( 1 ... $self->{N} );
  }
}

# ----------------------------------------------------------------------
# Main Thread
#
my $doors = doors->new(100);
$doors->toggle_all();
$doors->print_open();
