[Char = ((Float, Float) -> Float)] op
op[Char(‘+’)] = (x, y) -> x + y
op[Char(‘-’)] = (x, y) -> x - y
op[Char(‘*’)] = (x, y) -> x * y
op[Char(‘/’)] = (x, y) -> I y != 0 {x / y} E 9999999

F almost_equal(a, b)
   R abs(a - b) <= 1e-5

F solve(nums)
   V syms = ‘+-*/’
   V sorted_nums = sorted(nums).map(Float)
   L(x, y, z) cart_product(syms, syms, syms)
      V n = copy(sorted_nums)
      L
         V (a, b, c, d) = (n[0], n[1], n[2], n[3])
         I almost_equal(:op[x](:op[y](a, b), :op[z](c, d)), 24.0)
            R ‘(’a‘ ’y‘ ’b‘) ’x‘ (’c‘ ’z‘ ’d‘)’
         I almost_equal(:op[x](a, :op[y](b, :op[z](c, d))), 24.0)
            R a‘ ’x‘ (’b‘ ’y‘ (’c‘ ’z‘ ’d‘))’
         I almost_equal(:op[x](:op[y](:op[z](c, d), b), a), 24.0)
            R ‘((’c‘ ’z‘ ’d‘) ’y‘ ’b‘) ’x‘ ’a
         I almost_equal(:op[x](:op[y](b, :op[z](c, d)), a), 24.0)
            R ‘(’b‘ ’y‘ (’c‘ ’z‘ ’d‘)) ’x‘’a
         I !n.next_permutation()
            L.break
   R ‘not found’

L(nums) [[9, 4, 4, 5],
         [1, 7, 2, 7],
         [5, 7, 5, 4],
         [1, 4, 6, 6],
         [2, 3, 7, 3],
         [8, 7, 9, 7],
         [1, 6, 2, 6],
         [7, 9, 4, 1],
         [6, 4, 2, 2],
         [5, 7, 9, 7],
         [3, 3, 8, 8]]
   print(‘solve(’nums‘) -> ’solve(nums))
