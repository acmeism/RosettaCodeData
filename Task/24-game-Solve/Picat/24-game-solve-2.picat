import util.

main =>
  Target=24,
  Nums = [5,6,7,8],

  All=findall(Expr, solve_num(Nums,Target,Expr)),
  foreach(Expr in All) println(Expr.flatten()) end,
  println(len=All.length),
  nl.

% A string based approach, inspired by - among others - the Raku solution.
solve_num(Nums, Target,Expr) =>
   Patterns = [
               "A X B Y C Z D",
               "(A X B) Y C Z D",
               "(A X B Y C) Z D",
               "((A X B) Y C) Z D",
               "(A X B) Y (C Z D)",
               "A X (B Y C Z D)",
               "A X (B Y (C Z D))"
               ],
   permutation(Nums,[A,B,C,D]),
   Syms = [+,-,*,/],
   member(X ,Syms),
   member(Y ,Syms),
   member(Z ,Syms),
   member(Pattern,Patterns),
   Expr = replace_all(Pattern,
                     "ABCDXYZ",
                     [A,B,C,D,X,Y,Z]),
   catch(Target =:= Expr.eval(), E, ignore(E)).

eval(Expr) = parse_term(Expr.flatten()).apply().

ignore(_E) => fail. % ignore zero_divisor errors

% Replace all occurrences in S with From -> To.
replace_all(S,From,To) = Res =>
   R = S,
   foreach({F,T} in zip(From,To))
     R := replace(R, F,T.to_string())
   end,
   Res = R.
