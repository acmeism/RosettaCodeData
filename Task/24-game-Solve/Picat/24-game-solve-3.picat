import util.

main =>
  Target=24,
  Nums = [5,6,7,8],
  _ = findall(Expr, solve_num2(Nums,Target)),
  nl.

solve_num2(Nums, Target) =>
    Syms = [+,-,*,/],
    Perms = permutations([I.to_string() : I in Nums]),
    Seen = new_map(), % weed out duplicates
    foreach(X in Syms,Y in Syms, Z in Syms)
       foreach(P in Perms)
         [A,B,C,D] = P,
         if catch(check(A,X,B,Y,C,Z,D,Target,Expr),E,ignore(E)),
            not Seen.has_key(Expr) then
              println(Expr.flatten()=Expr.eval().round()),
              Seen.put(Expr,1)
         end
      end
   end.

to_string2(Expr) = [E.to_string() : E in Expr].flatten().

ignore(_E) => fail. % ignore zero_divisor errors

check(A,X,B,Y,C,Z,D,Target,Expr) ?=>
   Expr = ["(",A,Y,B,")",X,"(",C,Z,D,")"].to_string2(),
   Target =:= Expr.eval().

check(A,X,B,Y,C,Z,D,Target,Expr) ?=>
   Expr = [A,X,"(",B,Y,"(",C,Z,D,")",")"].to_string2(),
   Target =:= Expr.eval().

check(A,X,B,Y,C,Z,D,Target,Expr) ?=>
   Expr = ["(","(",C,Z,D,")",Y,B,")",X,A].to_string2(),
   Target =:= Expr.eval().

check(A,X,B,Y,C,Z,D,Target,Expr) ?=>
   Expr = ["(",B,Y,"(",C,Z,D,")",")",X,A].to_string2(),
   Target =:= Expr.eval().

check(A,X,B,Y,C,Z,D,Target,Expr) =>
   Expr = [A,X,"(","(",B,Y,C,")", Z,D,")"].to_string2(),
   Target =:= Expr.eval().
