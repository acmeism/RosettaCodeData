local fn FourRings( low as long, high as long, unique as BOOL, show as BOOL )
  long a, b, c, d, e, f, g
  long t, total = 0
  long l = len(str(high))

  if ( l < len(str(low)) ) then l = len(str(low))

  if ( show )
    for a = 97 to 103
      print space(l);fn StringWithCharacters( @a, 1 );
    next

    print
    print @" ";fn StringByPaddingToLength( @"", ( l + 1 ) * 7, @"-", 0 )
  end if

  for a = low to high
    for b = low to high
      if ( unique )
        if ( b == a ) then continue
      end if
      t = a + b
      for c = low to high
        if ( unique )
          if ( c == a or c == b ) then continue
        end if
        for d = low to high
          if ( unique )
            if ( d == a or d == b or d == c ) then continue
          end if
          if ( b + c + d == t )
            for e = low to high
              if ( unique )
                if ( e == a or e == b or e == c or e == d ) then continue
              end if
              for f = low to high
                if ( unique )
                  if ( f == a or f == b or f == c or f == d or f == e ) then continue
                end if
                if ( d + e + f == t )
                  for g = low to high
                    if ( unique )
                      if ( g == a or g == b or g == c or g == d or g == e or g == f ) then continue
                    end if
                    if ( f + g == t )
                      total += 1
                      if ( show )
                        printf @"%3d%3d%3d%3d%3d%3d%3d", a, b, c, d, e, f, g
                      end if
                    end if
                  next
                end if
              next
            next
          end if
        next
      next
    next
  next

  if ( unique )
    print
    print total;@" unique solutions for ";low;@" to ";high
    print fn StringByPaddingToLength( @"", 30, @"-", 0 )
    print
  else
    print total;@" non-unique solutions for ";low;@" to ";high
    print fn StringByPaddingToLength( @"", 37, @"-", 0 )
    print
  end if
end fn

window 1, @"4 Rings", ( 0, 0, 350, 400 )

fn FourRings( 1, 7, YES, YES )
fn FourRings( 3, 9, YES, YES )
fn FourRings( 0, 9,  NO,  NO )

HandleEvents
