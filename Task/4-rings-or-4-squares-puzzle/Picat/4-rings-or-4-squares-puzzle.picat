import cp.

main =>
  puzzle_all(1, 7, true, Sol1),
  foreach(Sol in Sol1) println(Sol) end,
  nl,

  puzzle_all(3, 9, true, Sol2),
  foreach(Sol in Sol2) println(Sol) end,
  nl,

  puzzle_all(0, 9, false, Sol3),
  println(len=Sol3.len),
  nl.

puzzle_all(Min, Max, Distinct, LL) =>
    L = [A,B,C,D,E,F,G],
    L :: Min..Max,
    if Distinct then
      all_different(L)
    else
      true
    end,
    T #= A+B,
    T #= B+C+D,
    T #= D+E+F,
    T #= F+G,
    % Another approach:
    % Sums = $[A+B,B+C+D,D+E+F,F+G],
    % foreach(I in 2..Sums.len) Sums[I] #= Sums[I-1] end,
    LL = solve_all(L).
