  [ swap dip [ 1+ split drop ]
    split nip ]                   is slice      (   [ n n --> [ )

  [ 0 swap witheach + ]           is sum        (       [ --> n )

  [ slice sum join ]              is square     ( [ [ n n --> [ )

  [ true swap
    behead swap witheach
      [ over = not if
          [ dip not conclude ] ]
    drop ]                        is same       (       [ --> b )

  [ [] temp put
    over - 1+ times
     [ dup i^ + temp gather ]
    drop
    temp take ]                   is  low->high (     n n --> [ )

  [ [] temp put
    witheach
       [ []
         over 0 1 square
         over 1 3 square
         over 3 5 square
         over 5 6 square
         same iff
           [ nested temp gather ]
         else drop ]
     temp take ]                  is task       (     [ n --> [ )

 1 7 low->high permutations task
     witheach [ echo cr ] cr
 3 9 low->high permutations task
     witheach [ echo cr ] cr
 0 9 low->high 7 arrangements task size echo
