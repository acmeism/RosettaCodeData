V cache = [[BigInt(1)]]
F cumu(n)
   L(l) :cache.len .. n
      V r = [BigInt(0)]
      L(x) 1 .. l
         r.append(r.last + :cache[l - x][min(x, l - x)])
      :cache.append(r)
   R :cache[n]

F row(n)
   V r = cumu(n)
   R (0 .< n).map(i -> @r[i + 1] - @r[i])

print(‘rows:’)
L(x) 1..10
   print(‘#2:’.format(x)‘ ’row(x))

print("\nsums:")

V pp = [BigInt(1)]

F partitions(n)
   :pp.append(BigInt(0))

   L(k) 1 .. n
      V d = n - k * (3 * k - 1) I/ 2
      I d < 0
         L.break

      I k [&] 1 != 0
         :pp[n] += :pp[d]
      E
         :pp[n] -= :pp[d]

      d -= k
      I d < 0
         L.break

      I k [&] 1 != 0
         :pp[n] += :pp[d]
      E
         :pp[n] -= :pp[d]

   R :pp.last

V ns = Set([23, 123, 1234, 12345])
V max_ns = max(ns)

L(i) 1 .. max_ns
   I i > max_ns
      L.break
   V p = partitions(i)
   I i C ns
      print(‘#6: #.’.format(i, p))
