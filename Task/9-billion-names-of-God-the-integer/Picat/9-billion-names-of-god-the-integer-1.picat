import cp.

main =>
  foreach(N in 1..25)
     P = integer_partition(N).reverse,
     G = P.map(sort_down).map(first).counts.to_list.sort.map(second),
     println(G=G.sum)
  end,
  println("Num partitions == sum of rows:"),
  println([partition1(N) : N in 1..25]).

% Get all partitions
integer_partition(N) = find_all(X,integer_partition(N,X)).
integer_partition(N,X) =>
  member(Len,1..N),
  X = new_list(Len),
  X :: 1..N,
  increasing(X),
  sum(X) #= N,
  solve($[split],X).

% Counts the occurrences of the elements in L
counts(L) = Map =>
  Map = new_map(),
  foreach(I in L)
    Map.put(I,Map.get(I,0)+1)
  end.
