Define.i nMax=25, n, k
Dim pfx.s(1)

Procedure.s Sigma(sx.s, sums.s)
  Define.i i, v1, v2, r
  Define.s s, sa
  sums=ReverseString(sums) : s=ReverseString(sx)
  For i=1 To Len(s)*Bool(Len(s)>Len(sums))+Len(sums)*Bool(Len(sums)>=Len(s))
    v1=Val(Mid(s,i,1))
    v2=Val(Mid(sums,i,1))
    r+v1+v2
    sa+Str(r%10)
    r/10
  Next i
  If r : sa+Str(r%10) : EndIf
  ProcedureReturn ReverseString(sa)
EndProcedure

Procedure.i Adr(row.i,col.i)
  ProcedureReturn ((row-1)*row/2+col)*Bool(row>0 And col>0)
EndProcedure

Procedure Triangle(row.i,Array pfx.s(1))
  Define.i n,k
  Define.s zs
  nMax=row
  ReDim pfx(Adr(nMax,nMax))
  For n=1 To nMax
    For k=1 To n
      If k>n    : pfx(Adr(n,k))="0"    : Continue : EndIf
      If n=k    : pfx(Adr(n,k))="1"    : Continue : EndIf
      If k<=n/2
        zs=""
        zs=Sigma(pfx(Adr(n-k,k)),zs)
        zs=Sigma(pfx(Adr(n-1,k-1)),zs)
        pfx(Adr(n,k))=zs
      Else
        pfx(Adr(n,k))=pfx(Adr(n-1,k-1))
      EndIf
    Next k
  Next n
EndProcedure

Procedure.s sum(row.i, Array pfx.s(1))
  Define.s s
  Triangle(row, pfx())
  For n=1 To row
    s=Sigma(pfx(Adr(row,n)),s)
  Next n
  ProcedureReturn RSet(Str(row),5,Chr(32))+" : "+s
EndProcedure

OpenConsole()

Triangle(nMax, pfx())
For n=1 To nMax
  Print(Space(((nMax*4-1)-(n*4-1))/2))
  For k=1 To n
    Print(RSet(pfx(Adr(n,k)),3,Chr(32))+Space(1))
  Next k
  PrintN("")
Next n
PrintN("")
PrintN(sum(23,pfx()))
PrintN(sum(123,pfx()))
PrintN(sum(1234,pfx()))
PrintN(sum(12345,pfx()))
Input()
