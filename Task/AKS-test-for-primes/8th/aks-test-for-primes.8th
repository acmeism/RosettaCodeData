with: a

: nextrow  \ a -- a
    len
    [ ( drop [1] ),
      ( drop [1,1] ),
      ( ' n:+ y 1 slide 1 push ) ]
    swap 2 min caseof ;

;with

with: n

: .x   \ n --
    dup
    [ ( drop ),
      ( drop "x" . ),
      ( "x^" . . ) ]
    swap 2 min caseof space ;

: .term  \ coef exp -- ; omit coef for 1x^n when n > 0
    over 1 = over 0 > and if  nip .x  else  swap . .x  then ;

: .sgn  \ +/-1 --
    [ "-", null, "+" ]
    swap 1+ caseof . space ;

: .lhs  \ n --
    "(x-1)^" . . ;

: .rhs  \ a -- a
    a:len 1- >r
    1 swap ( third .sgn r@ rot - .term -1 * ) a:each
    nip rdrop ;

: .eqn  \ a -- a
    a:len 1- .lhs " = " . .rhs ;

: .binomials  \ --
    [] ( nextrow .eqn cr ) 8 times drop ;

: primerow? \ a -- a ?
    a:len 3 < if false ;then
    1 a:@ >r   \ 2nd position is the number to check for primality
    true swap ( nip dup 1 = swap r@ mod 0 = or and ) a:each swap
    rdrop ;

: .primes-via-aks \ --
    [] ( nextrow primerow? if 1 a:@ . space then ) 50 times drop ;

;with

.binomials cr
"The primes upto 50 are (via AKS): " . .primes-via-aks cr

bye
