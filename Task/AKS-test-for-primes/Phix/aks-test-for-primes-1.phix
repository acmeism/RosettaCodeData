-- demo/rosetta/AKSprimes.exw
-- Does not work for primes above 67 (56 on 32bit), which is actually beyond the original task anyway.
-- Translated from the C version (with all out-by-1 stuff now eradicated).
with javascript_semantics
constant limit = iff(machine_bits()=32?56:67)
sequence c = repeat(0,limit+1)

procedure coef(integer n)
    c[n+1] = 1
    for i=n to 2 by -1 do
        c[i] += c[i-1]
    end for
end procedure

function is_aks_prime(integer n)
    coef(n)
    for i=2 to n-1 do
        if remainder(c[i],n)!=0 then
            return false
        end if
    end for
    return true
end function

procedure show(integer n)
    for i=n+1 to 1 by -1 do
        object ci = c[i]
        if ci=1 then
            if remainder(n-i+1,2)=0 then
                if i=1 then
                    if n=0 then
                        ci = "1"
                    else
                        ci = "+1"
                    end if
                else
                    ci = ""
                end if
            else
                ci = "-1"
            end if
        else
            if remainder(n-i+1,2)=0 then
                ci = sprintf("+%d",ci)
            else
                ci = sprintf("-%d",ci)
            end if
        end if
        if i=1 then -- ie ^0
            printf(1,"%s",{ci})
        elsif i=2 then -- ie ^1
            printf(1,"%sx",{ci})
        else
            printf(1,"%sx^%d",{ci,i-1})
        end if
    end for
end procedure

procedure main()
    for n=0 to 9 do
        coef(n);
        printf(1,"(x-1)^%d = ", n);
        show(n);
        puts(1,'\n');
    end for

    printf(1,"\nprimes (<=%d):",limit);
--  coef(1); -- (needed to reset c, if we want to avoid saying 1 is prime...)
    c[2] = 1 -- (this manages "", which is all that call did anyway...)
    for n=2 to limit do
        if is_aks_prime(n) then
            printf(1," %d", n);
        end if
    end for
    puts(1,'\n');
  wait_key()
end procedure
main()
