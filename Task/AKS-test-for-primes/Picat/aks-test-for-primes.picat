pascal([]) = [1].
pascal(L) = [1|sum_adj(L)].

sum_adj(Row) = Next =>
    Next = L,
    while (Row = [A,B|_])
        L = [A+B|Rest],
        L := Rest,
        Row := tail(Row)
    end,
    L = Row.

show_x(0) = "".
show_x(1) = "x".
show_x(N) = S, N > 1 => S = [x, '^' | to_string(N)].

show_term(Coef, Exp) = cond((Coef != 1; Exp == 0), Coef.to_string, "") ++ show_x(Exp).

expansions(N) =>
    Row = [],
    foreach (I in 0..N-1)
        Row := pascal(Row),
        writef("(x - 1)^%d = ", I),
        Exp = I,
        Sgn = '+',
        foreach (Coef in Row)
            if Exp != I then
                writef(" %w ", Sgn)
            end,
            writef("%s", show_term(Coef, Exp)),
            Exp := Exp - 1,
            Sgn := cond(Sgn == '+', '-', '+')
        end,
        nl
    end.

primerow([], _).
primerow([A,A|_], N) :- A mod N == 0.  % end when we've seen half the list.
primerow([A|As], N) :- (A mod N == 0; A == 1), primerow(As, N).

primes_upto(N) = Primes =>
    Primes = L,
    Row = [1, 1],
    foreach (K in 2..N)
        Row := pascal(Row),
        if primerow(Row, K) then
            L = [K|Rest],
            L := Rest
        end
    end,
    L = [].

main =>
    expansions(8),
    writef("%nThe primes upto 50 (via AKS) are: %w%n", primes_upto(50)).
