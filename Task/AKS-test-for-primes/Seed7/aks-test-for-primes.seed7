$ include "seed7_05.s7i";

const func array integer: expand_x_1 (in integer: p) is func
  result
    var array integer: ex is [] (1);
  local
    var integer: i is 0;
  begin
    for i range 0 to p - 1 do
      ex := [] (ex[1] * -(p - i) div (i + 1)) & ex;
    end for;
  end func;

const func boolean: aks_test (in integer: p) is func
  result
    var boolean: aks_test is FALSE;
  local
    var array integer: ex is 0 times 0;
    var integer: idx is 0;
  begin
    if p >= 2 then
      ex := expand_x_1(p);
      ex[1] +:= 1;
      for key idx range ex until ex[idx] rem p <> 0 do
        noop;
      end for;
      aks_test := idx = length(ex);
    end if;
  end func;

const proc: main is func
  local
    var integer: p is 0;
    var integer: n is 0;
    var integer: e is 0;
  begin
    writeln("# p: (x-1)^p for small p");
    for p range 0 to 11 do
      write(p lpad 3 <& ": ");
      for n key e range expand_x_1(p) do
        write(" ");
        if n >= 0 then
          write("+");
        end if;
        write(n);
        if e > 1 then
          write("x^" <& pred(e));
        end if;
      end for;
      writeln;
    end for;
    writeln;
    writeln("# small primes using the aks test");
    for p range 0 to 61 do
      if aks_test(p) then
        write(p <& " ");
      end if;
    end for;
    writeln;
  end func;
