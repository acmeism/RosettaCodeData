100 cls
110 type tableentry
120   nombre as string *8
130   bits as integer
140   startpos as integer
150   length as integer
160 end type
170 dim hexmap$(15)
180 hexmap$(0) = "0000" : hexmap$(1) = "0001" : hexmap$(2) = "0010" : hexmap$(3) = "0011"
190 hexmap$(4) = "0100" : hexmap$(5) = "0101" : hexmap$(6) = "0110" : hexmap$(7) = "0111"
200 hexmap$(8) = "1000" : hexmap$(9) = "1001" : hexmap$(10) = "1010" : hexmap$(11) = "1011"
210 hexmap$(12) = "1100" : hexmap$(13) = "1101" : hexmap$(14) = "1110" : hexmap$(15) = "1111"
220 dim fields(12) as tableentry
230 header$ = "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"+chr$(10)
240 header$ = header$+"  |                      ID                       |"+chr$(10)
250 header$ = header$+"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"+chr$(10)
260 header$ = header$+"  |QR|   Opcode  |AA|TC|RD|RA|    Z   |   RCODE   |"+chr$(10)
270 header$ = header$+"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"+chr$(10)
280 header$ = header$+"  |                    QDCOUNT                    |"+chr$(10)
290 header$ = header$+"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"+chr$(10)
300 header$ = header$+"  |                    ANCOUNT                    |"+chr$(10)
310 header$ = header$+"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"+chr$(10)
320 header$ = header$+"  |                    NSCOUNT                    |"+chr$(10)
330 header$ = header$+"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"+chr$(10)
340 header$ = header$+"  |                    ARCOUNT                    |"+chr$(10)
350 header$ = header$+"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"
360 fields(0).nombre = "     ID " : fields(0).bits = 16 : fields(0).startpos = 0 : fields(0).length = 16
370 fields(1).nombre = "     QR " : fields(1).bits = 1 : fields(1).startpos = 16 : fields(1).length = 1
380 fields(2).nombre = " Opcode " : fields(2).bits = 4 : fields(2).startpos = 17 : fields(2).length = 4
390 fields(3).nombre = "     AA " : fields(3).bits = 1 : fields(3).startpos = 21 : fields(3).length = 1
400 fields(4).nombre = "     TC " : fields(4).bits = 1 : fields(4).startpos = 22 : fields(4).length = 1
410 fields(5).nombre = "     RD " : fields(5).bits = 1 : fields(5).startpos = 23 : fields(5).length = 1
420 fields(6).nombre = "     RA " : fields(6).bits = 1 : fields(6).startpos = 24 : fields(6).length = 1
430 fields(7).nombre = "      Z " : fields(7).bits = 3 : fields(7).startpos = 25 : fields(7).length = 3
440 fields(8).nombre = "  RCODE " : fields(8).bits = 4 : fields(8).startpos = 28 : fields(8).length = 4
450 fields(9).nombre = "QDCOUNT " : fields(9).bits = 16 : fields(9).startpos = 32 : fields(9).length = 16
460 fields(10).nombre = "ANCOUNT " : fields(10).bits = 16 : fields(10).startpos = 48 : fields(10).length = 16
470 fields(11).nombre = "NSCOUNT " : fields(11).bits = 16 : fields(11).startpos = 64 : fields(11).length = 16
480 fields(12).nombre = "ARCOUNT " : fields(12).bits = 16 : fields(12).startpos = 80 : fields(12).length = 16
490 hexstr$ = "78477bbf5496e12e1bf169a4"
500 binstr$ = hextobinary$(hexstr$)
510 print "RFC 1035 message diagram header:"
520 print header$
530 print
540 print " Decoded:"
550 print " Name     Bits  Start  End"
560 print " =======  ====  =====  ==="
570 for i = 0 to 12
580   print " ";fields(i).nombre;"  ";
581   print using "####";fields(i).bits;"  ";
600   print using "#####";fields(i).startpos;"  ";
601   print using "###";fields(i).startpos+fields(i).length-1
610 next i
620 print
630 print " Test string in hex:"
640 print " ";hexstr$
650 print
660 print " Test string in binary:"
670 print " ";binstr$
680 print
690 print " Unpacked:"
700 print " Name     Size  Bit Pattern"
710 print " =======  ====  ================"
720 for i = 0 to 12
730   bitpattern$ = mid$(binstr$,fields(i).startpos+1,fields(i).length)
740   bitpattern$ = left$(bitpattern$+"                ",16)
760   print " ";fields(i).nombre;"  ";
770   print using "####";fields(i).bits;"  ";
780   print bitpattern$
790 next i
800 end
810 sub hextobinary$(hexstring$)
820   result$ = ""
830   for i = 1 to len(hexstring$)
840     hexdigit$ = ucase$(mid$(hexstring$,i,1))
850     if hexdigit$ >= "0" and hexdigit$ <= "9" then
860       idx = val(hexdigit$)
870     else
880       idx = asc(hexdigit$)-asc("A")+10
890     endif
900     if idx >= 0 and idx <= 15 then result$ = result$+hexmap$(idx)
910   next i
920   hextobinary$ = result$
930 end sub
