Structure TableEntry
  nombre.s
  bits.i
  startPos.i
  length.i
EndStructure

Procedure.s HexToBinary(hexString.s)
  Dim hexMap.s(15)
  hexMap(0) = "0000" : hexMap(1) = "0001" : hexMap(2) = "0010" : hexMap(3) = "0011"
  hexMap(4) = "0100" : hexMap(5) = "0101" : hexMap(6) = "0110" : hexMap(7) = "0111"
  hexMap(8) = "1000" : hexMap(9) = "1001" : hexMap(10) = "1010" : hexMap(11) = "1011"
  hexMap(12) = "1100" : hexMap(13) = "1101" : hexMap(14) = "1110" : hexMap(15) = "1111"

  Protected.s result = "", hexDigit
  Protected.i idx

  For i = 0 To Len(hexString) - 1
    hexDigit = UCase(Mid(hexString, i + 1, 1))
    If hexDigit >= "0" And hexDigit <= "9"
      idx = Val(hexDigit)
    Else
      idx = Asc(hexDigit) - Asc("A") + 10
    EndIf
    If idx >= 0 And idx <= 15
      result + hexMap(idx)
    EndIf
  Next

  ProcedureReturn result
EndProcedure

Procedure ParseASCIIArt()
  Protected header.s = "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+" + #CRLF$ +
                       "  |                      ID                       |" + #CRLF$ +
                       "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+" + #CRLF$ +
                       "  |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |" + #CRLF$ +
                       "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+" + #CRLF$ +
                       "  |                    QDCOUNT                    |" + #CRLF$ +
                       "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+" + #CRLF$ +
                       "  |                    ANCOUNT                    |" + #CRLF$ +
                       "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+" + #CRLF$ +
                       "  |                    NSCOUNT                    |" + #CRLF$ +
                       "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+" + #CRLF$ +
                       "  |                    ARCOUNT                    |" + #CRLF$ +
                       "  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"

  Dim fields.TableEntry(12)
  fields(0)\nombre = "     ID " : fields(0)\bits = 16 : fields(0)\startPos = 0 : fields(0)\length = 16
  fields(1)\nombre = "     QR " : fields(1)\bits = 1 : fields(1)\startPos = 16 : fields(1)\length = 1
  fields(2)\nombre = " Opcode " : fields(2)\bits = 4 : fields(2)\startPos = 17 : fields(2)\length = 4
  fields(3)\nombre = "     AA " : fields(3)\bits = 1 : fields(3)\startPos = 21 : fields(3)\length = 1
  fields(4)\nombre = "     TC " : fields(4)\bits = 1 : fields(4)\startPos = 22 : fields(4)\length = 1
  fields(5)\nombre = "     RD " : fields(5)\bits = 1 : fields(5)\startPos = 23 : fields(5)\length = 1
  fields(6)\nombre = "     RA " : fields(6)\bits = 1 : fields(6)\startPos = 24 : fields(6)\length = 1
  fields(7)\nombre = "      Z " : fields(7)\bits = 3 : fields(7)\startPos = 25 : fields(7)\length = 3
  fields(8)\nombre = "  RCODE " : fields(8)\bits = 4 : fields(8)\startPos = 28 : fields(8)\length = 4
  fields(9)\nombre = "QDCOUNT " : fields(9)\bits = 16 : fields(9)\startPos = 32 : fields(9)\length = 16
  fields(10)\nombre = "ANCOUNT " : fields(10)\bits = 16 : fields(10)\startPos = 48 : fields(10)\length = 16
  fields(11)\nombre = "NSCOUNT " : fields(11)\bits = 16 : fields(11)\startPos = 64 : fields(11)\length = 16
  fields(12)\nombre = "ARCOUNT " : fields(12)\bits = 16 : fields(12)\startPos = 80 : fields(12)\length = 16

  Protected hexStr.s = "78477bbf5496e12e1bf169a4"
  Protected binStr.s = HexToBinary(hexStr)

  PrintN("RFC 1035 message diagram header:")
  PrintN(header)
  PrintN(#CRLF$ + " Decoded:")
  PrintN(" Name     Bits  Start  End" + #CRLF$ + " =======  ====  =====  ===")

  For i = 0 To 12
    PrintN(RSet(fields(i)\nombre, 9) + " " + RSet(Str(fields(i)\bits), 4) + " " +
           RSet(Str(fields(i)\startPos), 6) + " " + RSet(Str(fields(i)\startPos + fields(i)\length - 1), 4))
  Next

  PrintN(#CRLF$ + " Test string in hex:")
  PrintN(" " + hexStr)
  PrintN(#CRLF$ + " Test string in binary:")
  PrintN(" " + binStr)
  PrintN(#CRLF$ + " Unpacked:")
  PrintN(" Name     Size  Bit Pattern" + #CRLF$ + " =======  ====  ================")

  For i = 0 To 12
    bitPattern.s = Mid(binStr, fields(i)\startPos + 1, fields(i)\length)
    bitPattern = Left(bitPattern + Space(16), 16)
    PrintN(RSet(fields(i)\nombre, 9) + " " + RSet(Str(fields(i)\bits), 4) + "  " + bitPattern)
  Next
EndProcedure

OpenConsole()

ParseASCIIArt()
PrintN(#CRLF$ + "Press ENTER to exit"): Input()
CloseConsole()
