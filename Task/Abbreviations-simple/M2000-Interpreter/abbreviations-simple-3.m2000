Module Abbreviations_simple {
	commands=list
	a$="add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 "
	a$+="compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate "
	a$+="3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 "
	a$+="forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load "
	a$+="locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 "
	a$+="msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 "
	a$+="refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left "
	a$+="2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1"
	gosub cleanspaces
	gosub makelist
	if not empty then gosub processstack
	a$="riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
	Print a$
	gosub cleanspaces
	gosub findresult	
	a$="riG   macro copies macr"
	Print a$
	gosub cleanspaces
	gosub findresult	
	End
processstack:
	Read many, word$
	if many>0  and many<len(word$) then
		for i=many to len(word$)-1
			if not exist(commands, Left$(word$, i)) then
				append commands, Left$(word$, i):= word$
			else  ' remove Rem to see which word has same key with other word
				Rem ? Left$(word$, i), i, word$, eval$(commands) ' same keys ??
			end if
		next
	end if
	append commands, word$
	Return
cleanspaces:
	do
		b$=a$
		a$=replace$("  ", " ", b$)
	until b$=a$
	Return
makelist:
	let b$="", w$="", n$=""
	flush
	for i=1 to len(A$)
		c$=mid$(a$, i, 1)
		if c$~"[a-zA-Z]" then
			if w$="" and not empty then gosub processstack
			w$+=c$
		else.if c$~"[1-9]" then
			drop : push val(c$)
		else
			if w$<>"" then data 0, ucase$(w$):w$=""
		end if
	next
	return
findresult:
	dim a$()
	a$()=piece$(ucase$(a$), " ")
	flush
	for i=0 to len(a$())-1
		if exist(commands, a$(i)) then
			Data eval$(commands)
		else
			Data "*error*"
		end if
	next
	Print Array([])#str$(" ")
	Return
}
Abbreviations_simple
