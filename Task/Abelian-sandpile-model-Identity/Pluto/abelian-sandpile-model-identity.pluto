class Sandpile
    -- 'a' is a list of 9 integers in row order.
    function __construct(public a)
        self.neighbors = {
            {2, 4}, {1, 3, 5}, {2, 6}, {1, 5, 7}, {2, 4, 6, 8},
            {3, 5, 9}, {4, 8}, {5, 7, 9}, {6, 8}
        }
    end

    function __add(other)
        local b = {}
        for i = 1, 9 do
            b:insert(self.a[i] + other.a[i])
        end
        return new Sandpile(b)
    end

    function is_stable()
        return self.a:checkall(|i| -> i <= 3)
    end

    -- Just topples once so we can observe intermediate results.
    function topple()
        for i = 1, 9 do
            if self.a[i] > 3 then
               self.a[i] -= 4
               for self.neighbors[i] as j do ++self.a[j] end
               return
            end
        end
    end

    function to_string()
        local s = ""
        for i = 1, 3 do
            for j = 1, 3 do s ..=  $"{self.a[3*(i - 1) + j]} " end
            s ..= "\n"
        end
        return s
    end
end

print("Avalanche of topplings:\n")
local s0 = new Sandpile({4, 3, 3, 3, 1, 2, 0, 2, 3})
print(s0:to_string())
while !s0:is_stable() do
    s0:topple()
    print(s0:to_string())
end

print("Commutative additions:\n")
local s1 = new Sandpile({1, 2, 0, 2, 1, 1, 0, 1, 3})
local s2 = new Sandpile({2, 1, 3, 1, 0, 1, 0, 1, 0})
local s3_a = s1 + s2
while !s3_a:is_stable() do s3_a:topple() end
local s3_b = s2 + s1
while !s3_b:is_stable() do s3_b:topple() end
local s1s = s1:to_string()
local s2s = s2:to_string()
local s3_as = s3_a:to_string()
local s3_bs = s3_b:to_string()
print(string.format("%s\nplus\n\n%s\nequals\n\n%s", s1s, s2s, s3_as))
print(string.format("and\n\n%s\nplus\n\n%s\nalso equals\n\n%s", s2s, s1s, s3_bs))

print("Addition of identity sandpile:\n")
local s3 = new Sandpile({3, 3, 3, 3, 3, 3, 3, 3, 3})
local s3_id = new Sandpile({2, 1, 2, 1, 0, 1, 2, 1, 2})
local s4 = s3 + s3_id
while !s4:is_stable() do s4:topple() end
local s3s = s3:to_string()
local s3_ids = s3_id:to_string()
local s4s = s4:to_string()
print(string.format("%s\nplus\n\n%s\nequals\n\n%s", s3s, s3_ids, s4s))

print("Addition of identities:\n")
local s5 = s3_id + s3_id
while !s5:is_stable() do s5:topple() end
local s5s = s5:to_string()
print(string.format("%s\nplus\n\n%s\nequals\n\n%s", s3_ids, s3_ids, s5s))
