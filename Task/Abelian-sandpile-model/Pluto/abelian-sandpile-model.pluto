class Sandpile
    -- 'a' is a list of integers in row order.
    function __construct(a)
        local count = #a
        self.rows = math.floor(math.sqrt(count))
        if self.rows * self.rows != count then
             print("The matrix of values must be square.")
             os.exit(1)
        end
        self.a = a
        self.neighbors = {}
        for i = 1, count do
            self.neighbors[i] = {}
            if (i - 1) % self.rows > 0   then self.neighbors[i]:insert(i - 1) end
            if i % self.rows > 0         then self.neighbors[i]:insert(i + 1) end
            if i - self.rows >= 1        then self.neighbors[i]:insert(i - self.rows) end
            if i + self.rows < count + 1 then self.neighbors[i]:insert(i + self.rows) end
        end
    end

    function is_stable()
        return self.a:checkall(|i| -> i <= 3)
    end

    -- Topples until stable.
    function topple()
        while !self:is_stable() do
            for i = 1, #self.a do
                if self.a[i] > 3 then
                    self.a[i] -= 4
                    for self.neighbors[i] as j do ++self.a[j] end
                end
            end
        end
    end

    function to_string()
        local s = ""
        for i = 1, self.rows do
            for j = 1, self.rows do
                s ..= string.format("%2d ", self.a[self.rows * (i - 1) + j])
            end
            s ..="\n"
        end
        return s
    end
end

local function print_across(str1, str2)
    local r1 = str1:split("\n")
    local r2 = str2:split("\n")
    local rows = #r1 - 1
    local cr = rows // 2 + 1
    for i = 1, rows do
        local symbol = (i == cr) ? "->" : "  "
        print(string.format("%s %s %s", r1[i], symbol, r2[i]))
    end
    print()
end

local a1, a2, a3, a4 = {}, {}, {}, {}
for i = 1, 25 do
    a1[i] = 0
    a2[i] = 0
    a3[i] = 0
end
for i = 1, 100 do
    a4[i] = 0
end
a1[13] = 4
a2[13] = 6
a3[13] = 16
a4[56] = 64
for {a1, a2, a3, a4} as a do
    local s = new Sandpile(a)
    local str1 = s:to_string()
    s:topple()
    local str2 = s:to_string()
    print_across(str1, str2)
end
