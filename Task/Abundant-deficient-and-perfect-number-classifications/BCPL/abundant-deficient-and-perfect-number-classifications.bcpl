get "libhdr"
manifest $( maximum = 20000 $)

let calcpdivs(p, max) be
$(  for i=0 to max do p!i := 0
    for i=1 to max/2
    $(  let j = i+i
        while 0 < j <= max
        $(  p!j := p!j + i
            j := j + i
        $)
    $)
$)

let classify(p, n, def, per, ab) be
$(  let z = 0<=p!n<n -> def, p!n=n -> per, ab
    !z := !z + 1
$)

let start() be
$(  let p = getvec(maximum)
    let def, per, ab = 0, 0, 0

    calcpdivs(p, maximum)
    for i=1 to maximum do classify(p, i, @def, @per, @ab)

    writef("Deficient numbers: %N*N", def)
    writef("Perfect numbers: %N*N", per)
    writef("Abundant numbers: %N*N", ab)
    freevec(p)
$)
