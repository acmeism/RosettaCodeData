import ballerina/io;

function divisors(int n) returns int[] {
    if n < 1 { return []; }
    int[] divisors  = [];
    int[] divisors2 = [];
    int i = 1;
    int k = n % 2 == 0 ? 1 : 2;
    while i * i <= n {
        if n % i == 0 {
            divisors.push(i);
            int j = n / i;
            if j != i { divisors2.push(j); }
        }
        i += k;
    }
    if divisors2.length() > 0 {
        divisors.push(...divisors2.reverse());
    }
    return divisors;
}

function properDivisors(int n) returns int[] {
    int[] d = divisors(n);
    int c = d.length();
    return c <= 1 ? [] : d.slice(0, c - 1);
}

public function main() {
    int d = 0;
    int a = 0;
    int p = 0;
    foreach int i in 1...20000 {
        int j = int:sum(...properDivisors(i));
        if j < i {
            d += 1;
        } else if j == i {
            p += 1;
        } else {
            a += 1;
        }
    }
    io:println("There are ", d, " deficient numbers between 1 and 20000");
    io:println("There are ", a, " abundant numbers  between 1 and 20000");
    io:println("There are ", p, " perfect numbers between 1 and 20000");
}
