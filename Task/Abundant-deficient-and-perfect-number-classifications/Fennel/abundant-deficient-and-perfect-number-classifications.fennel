(do ;;; count abundant, perfect and deficient numbers up to 20 000
    ; construct a table of proper divisor sums
    (local (max-number pds) (values 20_000 []))
    (tset pds 1 0)
    (for [i 2 max-number] (tset pds i 1))
    (for [i 2 max-number]
         (for [j (+ i i) max-number i] (tset pds j (+ i (. pds j))))
    )
    ; classify the numbers and count each type
    (var (aCount dCount pCount) (values 0 0 0))
    (for [i 1 max-number]
         (local dSum (. pds i))
         (if   (> dSum i) (set aCount (+ aCount 1))
               (< dSum i) (set dCount (+ dCount 1))
                          (set pCount (+ pCount 1))
         )
    )
    (io.write (string.format "Abundant  numbers up to %d: %8d\n" max-number aCount))
    (io.write (string.format "Perfect   numbers up to %d: %8d\n" max-number pCount))
    (io.write (string.format "Deficient numbers up to %d: %8d\n" max-number dCount))
)
