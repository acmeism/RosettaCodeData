V oddNumber = 1
V aCount = 0
V dSum = 0

F divisorSum(n)
   V sum = 1
   V i = Int(sqrt(n) + 1)

   L(d) 2 .< i
      I n % d == 0
         sum += d
         V otherD = n I/ d
         I otherD != d
            sum += otherD
   R sum

print(‘The first 25 abundant odd numbers:’)
L aCount < 25
   dSum = divisorSum(oddNumber)
   I dSum > oddNumber
      aCount++
      print(‘#5 proper divisor sum: #.’.format(oddNumber, dSum))
   oddNumber += 2

L aCount < 1000
   dSum = divisorSum(oddNumber)
   I dSum > oddNumber
      aCount++
   oddNumber += 2
print("\n1000th abundant odd number:")
print(‘     ’(oddNumber - 2)‘  proper divisor sum:  ’dSum)

oddNumber = 1000000001
V found = 0B
L !found
   dSum = divisorSum(oddNumber)
   I dSum > oddNumber
      found = 1B
      print("\nFirst abundant odd number > 1 000 000 000:")
      print(‘     ’oddNumber‘  proper divisor sum:  ’dSum)
   oddNumber += 2
