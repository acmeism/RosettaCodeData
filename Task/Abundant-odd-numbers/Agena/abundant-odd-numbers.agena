scope # find some abundant snumbers
      #    - numbers whose proper divisor sum is bigger than the number itself

    # returns the sum of the proper divisors of n
    local constant divisor_sum := proc( n :: number ) :: number is
        local sum := 1;
        for d from 2 to entier sqrt( n ) do
            if n mod d = 0 then
                sum +:= d;
                other_d := n \ d;
                if other_d <> d then
                    sum +:= other_d
                fi
            fi
        od;
        return sum
    end;
    scope # find the numbers required by the task
        # first 25 odd abundant numbers
        local odd_number, a_count, d_sum := 1, 0, 0;
        print( "The first 25 abundant odd numbers:" );
        while a_count < 25 do
            d_sum := divisor_sum( odd_number );
            if d_sum > odd_number then
                a_count +:= 1;
                printf( "%6d proper divisor sum: %d\n", odd_number, d_sum );
            fi;
            odd_number +:= 2
        od;
        # 1000th odd abundant number
        while a_count < 1_000 do
            d_sum := divisor_sum( odd_number );
            if d_sum > odd_number then
                a_count +:= 1
            fi;
            odd_number +:= 2
        od;
        printf( "1000th abundant odd number:\n    %d proper divisor sum: %d\n", odd_number, d_sum );
        # first odd abundant number > one billion
        odd_number  := 1_000_000_001;
        local found := false;
        while not found do
            d_sum := divisor_sum( odd_number );
            if d_sum > odd_number then
                found := true;
                print( "First abundant odd_number > 1 000 000 000:" );
                printf( "    %d proper divisor sum: %d\n", odd_number, d_sum );
            fi;
            odd_number +:= 2
        od
    end
end
