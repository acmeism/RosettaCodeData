import ballerina/io;

function divisors(int n) returns int[] {
    if n < 1 { return []; }
    int[] divisors  = [];
    int[] divisors2 = [];
    int i = 1;
    int k = n % 2 == 0 ? 1 : 2;
    while i * i <= n {
        if n % i == 0 {
            divisors.push(i);
            int j = n / i;
            if j != i { divisors2.push(j); }
        }
        i += k;
    }
    if divisors2.length() > 0 {
        divisors.push(...divisors2.reverse());
    }
    return divisors;
}

function properDivisors(int n) returns int[] {
    int[] d = divisors(n);
    int c = d.length();
    return c <= 1 ? [] : d.slice(0, c - 1);
}

function sumStr(int[] divs) returns string {
    var f = function(string acc, int div) returns string {
        return acc + div.toString() + " + ";
    };
    string sum = divs.reduce(f, "");
    int len = sum.length();
    return sum.substring(0, len - 3);
}

function abundantOdd(int searchFrom, int countFrom, int countTo, boolean printOne)
    returns int {
    int count = countFrom;
    int n = searchFrom;
    while count < countTo {
        int[] divs = properDivisors(n);
        int tot = int:sum(...divs);
        if tot > n {
            count += 1;
            if !printOne || count >= countTo {
                string s = sumStr(divs);
                if !printOne {
                    string s1 = count.toString().padStart(2);
                    string s2 = n.toString().padStart(5);
                    io:println(`${s1}. ${s2} < ${s} = ${tot}`);
                } else {
                    io:println(`${n} < ${s} = ${tot}`);
                }
            }
        }
        n += 2;
    }
    return n;
}

public function main() {
    final int max = 25;
    io:println("The first ", max, " abundant odd numbers are:");
    int n = abundantOdd(1, 0, 25, false);

    io:println("\nThe one thousandth abundant odd number is:");
    _ = abundantOdd(n, 25, 1000, true);

    io:println("\nThe first abundant odd number above one billion is:");
    _ = abundantOdd(<int>1e9+1, 0, 1, true);
}
