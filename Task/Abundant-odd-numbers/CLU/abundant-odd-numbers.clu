% Integer square root
isqrt = proc (s: int) returns (int)
    x0: int := s / 2
    if x0 = 0 then
        return(s)
    else
        x1: int := (x0 + s/x0) / 2
        while x1 < x0 do
            x0 := x1
            x1 := (x0 + s/x0) / 2
        end
        return(x0)
    end
end isqrt

% Calculate aliquot sum (for odd numbers only)
aliquot = proc (n: int) returns (int)
    sum: int := 1
    for i: int in int$from_to_by(3, isqrt(n)+1, 2) do
        if n//i = 0 then
            j: int := n / i
            sum := sum + i
            if i ~= j then
                sum := sum + j
            end
        end
    end
    return(sum)
end aliquot

% Generate abundant odd numbers
abundant_odd = iter (n: int) yields (int)
    while true do
        if n < aliquot(n) then yield(n) end
        n := n + 2
    end
end abundant_odd

start_up = proc ()
    po: stream := stream$primary_output()

    count: int := 0
    for n: int in abundant_odd(1) do
        count := count + 1
        if count <= 25 cor count = 1000 then
            stream$putl(po, int$unparse(count)
                        || ":\t"
                        || int$unparse(n)
                        || "\taliquot: "
                        || int$unparse(aliquot(n)))
            if count = 1000 then break end
        end
    end

    for n: int in abundant_odd(1000000001) do
        stream$putl(po, "First above 1 billion: "
                        || int$unparse(n)
                        || " aliquot: "
                        || int$unparse(aliquot(n)))
        break
    end
end start_up
