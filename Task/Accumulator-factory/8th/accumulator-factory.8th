\ RossetaCode 'accumulator factory'

\ The 'accumulate' word stores the accumulated value in an array, because arrays
\ are mutable:
: accumulate \ n [m] -- n+m \ [m] -> [n+m]
  a:pop rot n:+
  tuck a:push swap ;

\ To comply with the rules, this takes a number and wraps it in an array, and
\ then curries it.  Since 'curry:' is "immediate", we need to postpone its
\ action using 'p:.

: make-accumulator
  1 a:close
  ' accumulate
  p: curry: ;

\ We 'curry' the initial value along with 'accumulate' to create
\ a new word, '+10', which will give us the accumulated values
10 make-accumulator +10

\ This loop will add 1, then 2, then 3, to the accumulator, which prints the
\ results 11,13,16:
( +10 . cr ) 1 3 loop
bye
