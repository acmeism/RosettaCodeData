use std, array

let A = accumulator 42
print(A 0)
print(A 1)
print(A 10)
print(A 100)

let B = accumulator 4.2
print(B 0)
print(B 1)
print(B 10.0)
print(B 100.4)

~A ; ~B
(: use dbg; check mem leak :)

(: accumulator call :)
=: <accumulator a> <num x> := -> (a.t)
   call ((a.func) as function(any)(a.t)->(a.t)) with (a.data) ((Cgen x) as a.t)

(: accumulator constructors :)
.: accumulator <int x> :. -> int accumulator
   (val (int accumulator) A).init(x)
   (A as Accumulator).func = ( .:<int& accu, int x>:. ->int {accu += x; accu} )
   A

.: accumulator <real x> :. -> real accumulator
   (val (real accumulator) A).init(x)
   (A as Accumulator).func = ( .:<real&accu,real x>:. ->real{accu += x; accu} )
   A

=: <accumulator& a>.init <num x> :=
   a = new (Accumulator)
   a.data = (new array of 1 a.t)
   *(a.data as (a.t*)) = Cgen x

(: accumulator destructor :)
.: del Accumulator <Accumulator a>:.
   free a.data
   free a
=: ~ <accumulator a> := {del Accumulator a}

(: accumulator type :)
class Accumulator
  function	func
  any		data

=: [<type t=(int)>] accumulator := -> type
   Accumulator.prefix
   Accumulator.suffix

autocast accumulator<->Accumulator
