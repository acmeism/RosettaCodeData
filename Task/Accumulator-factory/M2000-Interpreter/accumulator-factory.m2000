\\ M2000 Interpreter
\\ accumulator factory
foo=lambda acc=0 (n as double=0) -> {
      \\ interpreter place this: read n as double=0 as first line of lambda function
      if n=0 then =acc : exit
      acc+=n
      \\ acc passed as a closuer to lambda (a copy of acc in the result lambda function)
      =lambda acc -> {
            ' if stack of values is empty then return a copy of acc
            if empty then =acc : exit
            read x
            \\ x has no type here, can be any numeric type (also can be an object too)
            \\ accumulator is double, and is a closure (a copy of acc in foo)
            acc+=x
            \\ any variable in M2000 hold  first type
            \\ if x is an object then we get error, except if object use this operator
            x=acc
            \\ so we return x type
            =x
      }
}
x=foo(1&)   ' 1& is long type (32bit)
call void x(5) ' 5 is double type (the default type for M2000)
call void foo(3#)   ' void tell to interpreter to throw result, 3# is Currency type
print x(2.3@) ' print 8.3,   2.3@ is Decimal type
print foo()=4 ' print true
def ExpType$(z)=type$(z)
print ExpType$(foo())="Double"
print ExpType$(x(0&))="Long"
print ExpType$(x(0@))="Decimal"
print ExpType$(x())="Double"
print ExpType$(foo(20))="lambda"
