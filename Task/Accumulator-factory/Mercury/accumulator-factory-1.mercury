:- module accum.
:- interface.

:- typeclass addable(T) where [
    func T + T = T
].

:- impure func gen(T) = (impure (func(T)) = T) <= addable(T).

:- implementation.
:- import_module bt_array, univ, int.

:- mutable(states, bt_array(univ), make_empty_array(0), ground, [untrailed]).

gen(N) = F :-
    some [!S] (
        semipure get_states(!:S),
        size(!.S, Size),
        resize(!.S, 0, Size + 1, univ(N), !:S),
        impure set_states(!.S)
    ),
    F = (impure (func(Add)) = M :-
        some [!SF] (
            semipure get_states(!:SF),
            !.SF ^ elem(Size) = U,
            det_univ_to_type(U, M0),
            M = M0 + Add,
            !SF ^ elem(Size) := univ(M),
            impure set_states(!.SF)
        )).
