:- module accumuser.
:- interface.
:- import_module io.
:- pred main(io::di, io::uo) is det.
:- implementation.
:- import_module accum, list, string, int, float.

:- instance addable(int) where [
    A + B = int.(A + B)
].

:- instance addable(float) where [
    A + B = float.(A + B)
].

:- pragma promise_pure main/2.
main(!IO) :-
    impure F = accum.gen(1),
    impure N1 = impure_apply(F, 1),
    impure N2 = impure_apply(F, 1),
    impure G = accum.gen(500.0),
    impure R1 = impure_apply(G, -10.0),
    impure R2 = impure_apply(G, -50.0),
    io.format("%d, %d\n", [i(N1), i(N2)], !IO),
    io.format("%.0f, %.0f\n", [f(R1), f(R2)], !IO).
