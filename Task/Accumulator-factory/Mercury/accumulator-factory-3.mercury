:- module accum2.
:- interface.

:- typeclass addable(T) where [
    func T + T = T
].

:- type accum(T).

    % init(N) = Acc
    % Return an accumulator with initial value of N
    %
:- func init(T) = accum(T)
    <= addable(T).

    % bump(By, N, !Acc)
    % Add By to accumulator !Acc, yielding the next number as N
    %
:- pred bump(T::in, T::out, accum(T)::in, accum(T)::out) is det
    <= addable(T).

:- implementation.

:- type accum(T) == T.

init(N) = N.

bump(X, N, N0, N) :-
    N = X + N0.
