import ballerina/io;

map<byte> pps = {};

function getPerfectPowers(int maxExp) {
    int upper  = <int>10.0.pow(<float>maxExp);
    int upper2 = <int>10.0.pow(<float>maxExp).sqrt().floor();
    foreach int i in 2...upper2 {
        int p = i;
        while true {
            if p > int:MAX_VALUE / i { break; }
            p *= i;
            if p >= upper { break; }
            pps[p.toString()] = 1;
        }
    }
}

function getAchilles(int minExp, int maxExp) returns map<byte> {
    int lower  = <int>10.0.pow(<float>minExp);
    int upper  = <int>10.0.pow(<float>maxExp);
    int upper2 = <int>10.0.pow(<float>maxExp).cbrt().floor();
    int upper3 = <int>10.0.pow(<float>maxExp).sqrt().floor();
    map<byte> achilles = {};
    foreach int b in 1...upper2 {
        int b3 = b * b * b;
        foreach int a in 1...upper3 {
            int p = b3 * a * a;
            if p >= upper { break; }
            if p >= lower {
                string ps = p.toString();
                if !pps.hasKey(ps) {
                    achilles[ps] = 1;
                }
            }
        }
    }
    return achilles;
}

function totient(int m) returns int {
    if m < 1 { return 0; }
    int tot = m;
    int n = m;
    int i = 2;
    while  i * i <= n {
        if (n % i) == 0 {
            while (n % i) == 0 { n /= i; }
            tot -= tot / i;
        }
        if i == 2 { i = 1; }
        i += 2;
    }
    if n > 1 {  tot -= tot / n; }
    return tot;
}

public function main() returns error? {
    final int maxDigits = 14;
    getPerfectPowers(maxDigits);
    map<byte> achillesSet = getAchilles(1, 5); // enough for first 2 parts
    int[] achilles = achillesSet.keys().map(s => check int:fromString(s)).sort();
    io:println("First 50 Achilles numbers:");
    foreach int i in 0..<50 {
        string s = achilles[i].toString().padStart(4);
        io:print(s, " ");
        if (i + 1) % 10 == 0 { io:println(); }
    }
    io:println("\nFirst 30 strong Achilles numbers:");
    int[] strongAchilles = [];
    int count = 0;
    int n = 0;
    while count < 30 {
        int tot = totient(achilles[n]);
        if achillesSet.hasKey(tot.toString()) {
            strongAchilles.push(achilles[n]);
            count += 1;
        }
        n += 1;
    }
    foreach int j in 0..<30 {
        string t = strongAchilles[j].toString().padStart(5);
        io:print(t, " ");
        if (j + 1) % 10 == 0 { io:println(); }
    }

    io:println("\nNumber of Achilles numbers with:");
    foreach int d in 2...maxDigits {
        int ac = getAchilles(d - 1, d).length();
        io:println(d.toString().padStart(2), " digits: ", ac);
    }
}
