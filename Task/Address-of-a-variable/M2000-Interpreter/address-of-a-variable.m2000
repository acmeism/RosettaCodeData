module checkVarptr {
	declare GetMem8 lib "msvbvm60.GetMem8" {Long addr, Long retValue}
	long long x=1234567812345678&&, z
	dim k(2,2,2) as long long
	call GetMem8(VarPtr(x), VarPtr(z))
	call GetMem8(VarPtr(x), VarPtr(k(1,0,1)))
	print z=x
	print k(1,0,1)=x
	link z to m
	print VarPtr(z)=VarPtr(m)
	checkref(&z)
	sub checkref(&p)
		print VarPtr(z)=VarPtr(p)
	end sub
}
checkVarptr
module checkVarptr {
	// Using byref at GemMem8 signature
	declare GetMem8 lib "msvbvm60.GetMem8" {long &addr, long &retValue}
	declare PutMem8 lib "msvbvm60.PutMem8" {long &addr, retValue as long long}
	long long x=1234567812345678&&, z
	dim k(2,2,2) as long long
	call GetMem8(&x, &z)
	call GetMem8(&x, &k(1,0,1))
	print z=x
	print k(1,0,1)=x
	checkref(&z)
	print z=987654321987654321&&
	sub checkref(&p)
		print VarPtr(z)=VarPtr(p)
		call PutMem8(&p, 987654321987654321&&)
	end sub
}
checkVarptr
