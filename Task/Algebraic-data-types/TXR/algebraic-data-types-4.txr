(defun-match rb-balance
  ((@(or @(black @(red @(red a b x) c y) d z)
         @(black @(red a @(red b c x) x) d z)
         @(black a @(red @(red b c y) d z) x)
         @(black a @(red b @(red c d z) y) x)))
   (new (rbnode :red
                (new (rbnode :black a b x))
                (new (rbnode :black c d z))
                y)))
  ((@else) else))

(defun rb-insert-rec (tree x)
  (match-ecase tree
    (nil
     (new (rbnode :red nil nil x)))
    (@(rb color a b y)
     (cond
       ((< x y)
        (rb-balance (new (rbnode color (rb-insert-rec a) b y))))
       ((> x y)
        (rb-balance (new (rbnode color a (rb-insert-rec b) y))))
       (t tree)))))

(defun rb-insert (tree x)
  (match-case (rb-insert-rec tree x)
    (@(red a b y) (new (rbnode :black a b y)))
    (@else else)))
