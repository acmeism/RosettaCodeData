' version 10-10-2024
' compile with: fbc -s console

#Include Once "gmp.bi"
#Include Once "crt/stdio.bi"

#Define prec 70

Dim As UInteger n, tmp
Dim As String buffer = Space(50)
Dim As ZString Ptr gmp_str : gmp_str = Allocate(prec * 100)

Dim As Mpz_ptr t1, t2, t3, t4
t1  = Allocate(Len(__Mpz_struct)) : Mpz_init(t1)
t2  = Allocate(Len(__Mpz_struct)) : Mpz_init(t2)
t3  = Allocate(Len(__Mpz_struct)) : Mpz_init(t3)

Dim As mpf_ptr f1, f2, sum, pi
f1  = Allocate(Len(__Mpf_struct)) : Mpf_init2(f1, prec * 10)
f2  = Allocate(Len(__Mpf_struct)) : Mpf_init2(f2, prec * 10)
sum = Allocate(Len(__Mpf_struct)) : Mpf_init2(sum, prec * 10)
pi  = Allocate(Len(__Mpf_struct)) : Mpf_init2(pi, prec * 10)

For n = 0 To prec

    mpz_fac_ui(t1, 6 * n)

    mpz_ui_pow_ui(t2 , n, 2)
    mpz_mul_ui(t2, t2, 532)
    mpz_set_ui(t3, n)
    mpz_mul_ui(t3, t3, 126)
    mpz_add(t2, t2, t3)
    mpz_add_ui(t2, t2, 9)

    mpz_fac_ui(t3, n)
    mpz_pow_ui(t3, t3, 6)
    mpz_mul_ui(t3, t3, 3)

    mpz_mul(t1, t1, t2)
    mpz_mul_2exp(t1, t1, 5)
    mpz_divexact(t1, t1, t3)

    Mpz_get_str(gmp_str, 10, t1)
    If n < 10 Then
        RSet buffer, *gmp_str
        Print n; buffer
    EndIf

    tmp = 6 * n +3
    mpf_set_z(f1, t1)
    mpf_set_ui(f2, 10)
    mpf_pow_ui(f2, f2, tmp)
    mpf_div(f1, f1, f2)
    mpf_add(sum, sum, f1)

    If tmp - Len(*gmp_Str) > prec Then
        Print
        Print "Pi with 70 decimal digits of precision"
        mpf_sqrt(f2, sum)
        mpf_ui_div(pi , 1 , f2)
        gmp_printf (!"pi = %.*Ff \n", 70, pi)
        fflush(stdout)
        Exit For
    EndIf

Next

mpz_clears(t1, t2, t3, NULL)
mpf_clears(f1, f2, sum, pi, NULL)
DeAllocate(gmp_str)


' empty keyboard buffer
While Inkey <> "" : Wend
Print : Print "hit any key to end program"
Sleep
End
