' FB 1.05.0 Win64

Type IndexedWord
  As String word
  As Integer index
End Type

' selection sort, quick enough for sorting small number of letters
Sub sortWord(s As String)
  Dim As Integer i, j, m, n = Len(s)
  For i = 0 To n - 2
    m = i
    For j = i + 1 To n - 1
      If s[j] < s[m] Then m = j
    Next j
    If m <> i Then Swap s[i], s[m]
  Next i
End Sub

' quicksort for sorting whole dictionary of IndexedWord instances by sorted word
Sub quicksort(a() As IndexedWord, first As Integer, last As Integer)
  Dim As Integer length = last - first + 1
  If length < 2 Then Return
  Dim pivot As String = a(first + length\ 2).word
  Dim lft As Integer = first
  Dim rgt As Integer = last
  While lft <= rgt
    While a(lft).word < pivot
      lft +=1
    Wend
    While a(rgt).word > pivot
      rgt -= 1
    Wend
    If lft <= rgt Then
       Swap a(lft), a(rgt)
       lft += 1
       rgt -= 1
    End If
  Wend
  quicksort(a(), first, rgt)
  quicksort(a(), lft, last)
End Sub

Function isDeranged(s1 As String, s2 As String) As Boolean
  For i As Integer = 0 To Len(s1) - 1
    If s1[i] = s2[i] Then Return False
  Next
  Return True
End Function

Dim t As Double = timer
Dim As String w()  '' array to hold actual words
Open "undict.txt" For Input As #1
Dim count As Integer = 0
While Not Eof(1)
  count +=1
  Redim Preserve w(1 To count)
  Line Input #1, w(count)
Wend
Close #1

Dim As IndexedWord iw(1 To count) '' array to hold sorted words and their index into w()
Dim word As String
For i As Integer = 1 To count
  word = w(i)
  sortWord(word)
  iw(i).word = word
  iw(i).index = i
Next
quickSort iw(), 1, count  '' sort the IndexedWord array by sorted word

Dim As Integer startIndex = 1, maxLength, ub
Dim As Integer maxIndex()
Dim As IndexedWord iWord = iw(1)
maxLength = 0

For i As Integer = 2 To count
  If iWord.word = iw(i).word Then
    If isDeranged(w(iword.index), w(iw(i).index)) Then
      If startIndex + 1 < i Then Swap iw(i), iw(startIndex + 1)
      If Len(iWord.word) > maxLength Then
        maxLength = Len(iWord.word)
        Erase maxIndex
        ub = 1
        Redim maxIndex(1 To ub)
        maxIndex(ub) = startIndex
        startIndex += 2
        i = startIndex
        iWord = iw(i)
      ElseIf Len(iWord.word) = maxLength Then
        ub += 1
        Redim Preserve maxIndex(1 To ub)
        maxIndex(ub) = startIndex
        startIndex += 2
        i = startIndex
        iWord = iw(i)
      End If
    End If
  ElseIf i = count Then
    Exit For
  Else
    For j As Integer = i To count - 1
      iWord = iw(j)
      If Len(iWord.word) >= maxLength Then
        startIndex = j
        i = startIndex
        Exit For
      End If
    Next
  End If
Next

Print Str(count); " words in the dictionary"
Print "The deranged anagram pair(s) with the greatest length (namely"; maxLength; ") is:"
Print
Dim iws(1 To maxLength) As IndexedWord  '' array to hold each deranged anagram pair
For i As Integer = 1 To UBound(maxIndex)
  For j As Integer = maxIndex(i) To maxIndex(i) + 1
    iws(j - maxIndex(i) + 1) = iw(j)
  Next j
  If iws(1).index > iws(2).index Then swap iws(1), iws(2) '' ensure pair is in correct order
  For j As Integer = 1 To 2
    Print w(iws(j).index); " ";
  Next j
  Print
Next i

Print
Print "Took ";
Print Using "#.###"; timer - t;
Print " seconds on i3 @ 2.13 GHz"

Print
Print "Press any key to quit"
Sleep
