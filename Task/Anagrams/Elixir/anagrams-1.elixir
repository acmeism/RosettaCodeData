defmodule Anagrams do
  def find(file) do
    {:ok, body} = File.read(file)
      body
        |> String.split("\n",trim: true)
	|> Enum.map(&(String.split(&1,"",trim: true)))
        |> sort(%{})
	|> Enum.group_by(fn {_,v} -> length(v) end)
	|> Enum.max_by(&(&1))
	|> print()
    end

    def sort([],m), do: m
    def sort([word|words],m) do
      s = Enum.sort(word)
      if Dict.has_key?(m,s) do
	m = Map.put(m,s, [word|Dict.get(m,s)])
      else
	m = Map.put(m,s,[word])
      end
      sort(words,m)
    end

    def print({_,y}) do
      Enum.map(y, fn {_,e} -> Enum.map(e, &(Enum.join(&1,"")))
	|> Enum.sort
	|> Enum.join(" ") end)
      |> Enum.join("\n")
      |> IO.puts
    end
end
Anagrams.find("unixdict.txt")
