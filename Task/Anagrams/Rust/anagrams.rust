use std::collections::HashMap;
use std::collections::hash_map::Entry::*;
use std::fs::File;
use std::io::{BufRead,BufReader};
use std::cmp;

fn sort_string(string: &str) -> String {
    let mut chars = string.chars().collect::<Vec<char>>();
    chars.sort();
    chars.into_iter().collect()
}

fn main () {
    let file = BufReader::new(File::open("unixdict.txt").unwrap());
    let mut map = HashMap::new();
    for line in file.lines() {
        let s: String = line.unwrap().trim().into();
        match map.entry(sort_string(&s)) {
            Vacant(entry) => { entry.insert(vec![s]); },
            Occupied(mut entry) => { entry.get_mut().push(s); }
        }
    }
    let max_length = map.values().fold(0, |s, v| cmp::max(s, v.len()));
    for v in map.values().filter(|&v| v.len() == max_length) {
        println!("{}", v.join(" "))
    }
}
