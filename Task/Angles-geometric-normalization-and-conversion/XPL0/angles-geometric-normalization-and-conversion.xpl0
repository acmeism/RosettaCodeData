def Pi = 3.14159265358979323846, N=12, Tab=9;
func real D2D;  real D;  return Mod(D, 360.);
func real G2G;  real G;  return Mod(G, 400.);
func real M2M;  real M;  return Mod(M, 6400.);
func real R2R;  real R;  return Mod(R, 2.*Pi);
func real D2G;  real D;  return 400. * D2D(D) / 360.;
func real D2M;  real D;  return 6400.* D2D(D) / 360.;
func real D2R;  real D;  return 2.*Pi* D2D(D) / 360.;
func real G2D;  real G;  return 360. * G2G(G) / 400.;
func real G2M;  real G;  return 6400.* G2G(G) / 400.;
func real G2R;  real G;  return 2.*Pi* G2G(G) / 400.;
func real M2D;  real M;  return 360. * M2M(M) / 6400.;
func real M2G;  real M;  return 400. * M2M(M) / 6400.;
func real M2R;  real M;  return 2.*Pi* M2M(M) / 6400.;
func real R2D;  real R;  return 360. * R2R(R) / (2.*Pi);
func real R2G;  real R;  return 400. * R2R(R) / (2.*Pi);
func real R2M;  real R;  return 6400.* R2R(R) / (2.*Pi);

real Angle;  int I;
[Angle:=
[-2., -1., 0., 1., 2., 6.2831853, 16., 57.2957795, 359., 399., 6399., 1000000.];
Format(7, 7);
Text(0, "
     Degrees         Normalized      Gradians        Mils            Radians
");
for I:= 0 to N-1 do
    [RlOut(0, Angle(I));  ChOut(0, Tab);
    RlOut(0, D2D(Angle(I)));  ChOut(0, Tab);
    RlOut(0, D2G(Angle(I)));  ChOut(0, Tab);
    RlOut(0, D2M(Angle(I)));  ChOut(0, Tab);
    RlOut(0, D2R(Angle(I)));  CrLf(0);
    ];
Text(0, "
     Gradians        Normalized      Degrees         Mils            Radians
");
for I:= 0 to N-1 do
    [RlOut(0, Angle(I));  ChOut(0, Tab);
    RlOut(0, G2G(Angle(I)));  ChOut(0, Tab);
    RlOut(0, G2D(Angle(I)));  ChOut(0, Tab);
    RlOut(0, G2M(Angle(I)));  ChOut(0, Tab);
    RlOut(0, G2R(Angle(I)));  CrLf(0);
    ];
Text(0, "
     Mils            Normalized      Degrees         Gradians        Radians
");
for I:= 0 to N-1 do
    [RlOut(0, Angle(I));  ChOut(0, Tab);
    RlOut(0, M2M(Angle(I)));  ChOut(0, Tab);
    RlOut(0, M2D(Angle(I)));  ChOut(0, Tab);
    RlOut(0, M2G(Angle(I)));  ChOut(0, Tab);
    RlOut(0, M2R(Angle(I)));  CrLf(0);
    ];
Text(0, "
     Radians         Normalized      Degrees         Gradians        Mils
");
for I:= 0 to N-1 do
    [RlOut(0, Angle(I));  ChOut(0, Tab);
    RlOut(0, R2R(Angle(I)));  ChOut(0, Tab);
    RlOut(0, R2D(Angle(I)));  ChOut(0, Tab);
    RlOut(0, R2G(Angle(I)));  ChOut(0, Tab);
    RlOut(0, R2M(Angle(I)));  CrLf(0);
    ];
]
