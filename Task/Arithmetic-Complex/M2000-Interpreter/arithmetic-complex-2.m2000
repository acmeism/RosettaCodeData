module tstComplex {
	// Var one as complex=(1,0i), A as complex=(8, -3i)
	one=(1,0i)
	A=(8, -3i)
	Print "A=";A
	Print "     r=";Abs(A);" θ=";Arg(A);" rad"
	B=one/A
	Print "B=";B
	Print "     r=";Abs(B);" θ=";Arg(B);" rad"
	Print A;"*";B;"=";A*B
	Print one;"/";B;"=";one/B
	Print A;"/";A;"=";A/A
	Print A;"+";A;"=";A+A
	Print A;"-";A;"=";A-A
	Print "-"+A+"=";-A
	Print "(round exp to 13th decimal)"
	I=round(exp((0, pi i)),13)+1
	Print "e^(πi)+1=";i
	Print "(without rounding)"
	I=exp((0, pi i))+1
	Print "e^(πi)+1=";i
	Print type$(i) = "Complex"
	Dim a(10) as Complex=(1,0i)
	Print (a(3)+a(3))^2=(4, 0i)
	Print (a(3)+a(3))^2=4
	
	Print cos(a)
	Print sin(a)
	Print atn(tan(a))
	Print tan(atn(a))
	Print Polar(abs(a), arg(a))=(8, -3i)
	Print str$(a ,"0.00")
	Print str$((8,-3i) ,"0.00")
}
 tstComplex
