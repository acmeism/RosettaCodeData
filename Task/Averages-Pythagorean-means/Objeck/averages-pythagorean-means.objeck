class PythagMeans {
  function : Main(args : String[]) ~ Nil {
    array := [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
    arithmetic := ArithmeticMean(array);
    geometric := GeometricMean(array);
    harmonic := HarmonicMean(array);

    arith_geo := arithmetic >= geometric;
    geo_harm := geometric >= harmonic;

    "A = {$arithmetic}, G = {$geometric}, H = {$harmonic}"->PrintLine();
    "A >= G is {$arith_geo}, G >= H is {$geo_harm}"->PrintLine();
  }

  function : native : ArithmeticMean(numbers : Float[]) ~ Float {
    if(numbers->Size() = 0) { return -1.0; };

    mean := 0.0;
    each(i : numbers) {
      mean += numbers[i];
    };

    return mean / numbers->Size();
  }

  function : native : GeometricMean(numbers : Float[]) ~ Float {
    if(numbers->Size() = 0) { return -1.0; };

    mean := 1.0;
    each(i : numbers) {
      mean *= numbers[i];
    };

    return mean->Power(1.0 / numbers->Size());
  }

  function : native : HarmonicMean(numbers : Float[]) ~ Float {
    if(numbers->Size() = 0) { return -1.0; };

    mean := 0.0;
    each(i : numbers) {
      mean += (1.0 / numbers[i]);
    };

    return numbers->Size() / mean;
  }
}
