use Collection;

class MovingAverage {
  @window : FloatQueue;
  @period : Int;
  @sum : Float;

  New(period : Int) {
    @window := FloatQueue->New();
    @period := period;
  }

  method : NewNum(num : Float) ~ Nil {
    @sum += num;
    @window->Add(num);
    if(@window->Size() > @period) {
      @sum -= @window->Remove();
    };
  }

  method : GetAvg() ~ Float {
    if(@window->IsEmpty()) {
      return 0; # technically the average is undefined
    };

    return @sum / @window->Size();
  }

  function : Main(args : String[]) ~ Nil {
    testData := [1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0];
    windowSizes := [3.0, 5.0];

    each(i : windowSizes) {
      windSize := windowSizes[i];
      ma := MovingAverage->New(windSize);
      each(j : testData) {
        x := testData[j];
        ma->NewNum(x);
        avg := ma->GetAvg();
        "Next number = {$x}, SMA = {$avg}"->PrintLine();
      };
      IO.Console->PrintLine();
    };
  }
}
