module Babylonian_spiral (max=40) {
	declare math math
	const TAU=6.283185307179586
	dim sq()
	sq()=lambda (m)-> {
		for i=0 to m-1:data i*i:next
		=array([])
	}(max)
	xydeltas=((0&, 0&), (0&, 1&))
	def isqrt(n)=val(sqrt(n)->long)
	def pr(c)="("+c#str$(", ")+")"
	long δsquared = 1
	
	for L=0 to max-3
		(x,y)=xydeltas#val(len(xydeltas)-1)
		θ = @atan2(y, x)
		candidates=stack
		while len(candidates)=0
			δsquared++
			for i=0& to max-1
				a=sq(i)
				if a > δsquared/2& then exit for
				for j =isqrt(δsquared) + 1 to  1
					b = sq(j)
					if a + b < δsquared then exit for
					if a + b = δsquared then
						stack candidates {
							Data (i, j), (-i, j), (i, -j), (-i, -j), (j, i), (-j, i), (j, -i), (-j, -i)
						}
					end if
				next
			next
		end while	
		minimum=(,)
		minVal=TAU
		stack candidates {
			while not empty
			read candidate()
			val =  (θ - @atan2(candidate(1), candidate(0))) mod# TAU
			if val < minVal then minVal = val : minimum = candidate()
			end while
		}
		append xyDeltas, (minimum,)
	next
	for i=0 to len(xyDeltas)-2
		Return xyDeltas, i+1:=@add(xyDeltas#val(i+1), xyDeltas#val(i))
	
	next	
	Drawing 12000, 12000 {
			Cls, 0
			pen 0
			(m1, m2, s1)=(6000, 6000, twipsX*10)
			move m1, m2
			k=each(xyDeltas)
			dim b()
			while k
				b()=array(k)
				b=b()
				b*=s1
				draw to b(0)+m1, m2-b(1): circle fill 1, 30
			end while
	} as Drw
	image drw
	clipboard drw as "emf"
	Document Doc$
	for i=0 to len(xyDeltas)-2
		Doc$=pr(xyDeltas#val(i))+", "
	next
	Doc$=pr(xyDeltas#val(i))
	Print Doc$
	Save.Doc Doc$, "out.txt"
	function add(a(), b())
		=a(0)+b(0), a(1)+b(1)
	end function
	function atan2(y, x)
		method math, "atan2", y, x as ret
		=ret  // radians
	end function
}
Babylonian_spiral 40
