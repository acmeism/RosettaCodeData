include "cowgol.coh";

typedef B is uint32;
typedef I is intptr;

sub bellIndex(row: I, col: I): (addr: I) is
    addr := (row * (row - 1) / 2 + col) * @bytesof B;
end sub;

sub getBell(row: I, col: I): (bell: B) is
    bell := [LOMEM as [B] + bellIndex(row, col)];
end sub;

sub setBell(row: I, col: I, bell: B) is
    [LOMEM as [B] + bellIndex(row, col)] := bell;
end sub;

sub bellTriangle(n: I) is
    var length := n * (n + 1) / 2;
    var bytes := length * @bytesof B;

    if HIMEM - LOMEM < bytes then
        print("not enough memory\n");
        ExitWithError();
    end if;

    MemZero(LOMEM, bytes);

    setBell(1, 0, 1);
    var i: I := 2;
    while i <= n loop
        setBell(i, 0, getBell(i-1, i-2));
        var j: I := 1;
        while j < i loop
            var value := getBell(i, j-1) + getBell(i-1, j-1);
            setBell(i, j, value);
            j := j + 1;
        end loop;
        i := i + 1;
    end loop;
end sub;

const ROWS := 15;
bellTriangle(ROWS);
print("First fifteen Bell numbers:\n");
var i: I := 1;
while i <= ROWS loop
    print_i32(i as uint32);
    print(": ");
    print_i32(getBell(i, 0) as uint32);
    print_nl();
    i := i + 1;
end loop;

print("\nThe first ten rows of Bell's triangle:\n");
i := 1;
while i <= 10 loop
    var j: I := 0;
    loop
        print_i32(getBell(i, j) as uint32);
        j := j + 1;
        if j == i then break;
        else print(", ");
        end if;
    end loop;
    i := i + 1;
    print_nl();
end loop;
