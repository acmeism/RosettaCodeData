import cp.

main =>
  member(N,1..10),
  X = new_list(N),
  X :: 1..N,
  value_precede_chain(1..N,X),
  solve_all($[ff,split],X)=All,
  println(N=All.len),
  if N <= 4 then
    % convert to sets
    Set = {},
    foreach(Y in All)
      L = new_array(N),
      bind_vars(L,{}),
      foreach(I in 1..N)
        L[Y[I]] := L[Y[I]] ++ {I}
      end,
      Set := Set ++ { {E : E in L, E != {}} }
    end,
    println(Set)
  end,
  nl,
  fail,
  nl.

%
% Ensure that a value N+1 is placed in the list X not before
% all the value 1..N are placed in the list.
%
value_precede_chain(C, X) =>
  foreach(I in 2..C.length)
    value_precede(C[I-1], C[I], X)
  end.

value_precede(S,T,X) =>
   XLen = X.length,
   B = new_list(XLen+1),
   B :: 0..1,
   foreach(I in 1..XLen)
     Xis #= (X[I] #= S),
     (Xis #=> (B[I+1] #= 1))
     #/\ ((#~ Xis #= 1) #=> (B[I] #= B[I+1]))
     #/\ ((#~ B[I] #= 1) #=> (X[I] #!= T))
   end,
   B[1] #= 0.
