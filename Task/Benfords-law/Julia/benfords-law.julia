# Benford's Law
P(d) = log10(1+1/d)

function benford(numbers)
    firstdigit(n) = parse(Int, first(string(n)))
    counts = zeros(9)
    foreach(n -> counts[firstdigit(n)] += 1, numbers)
    counts ./ sum(counts)
end

struct Fibonacci end
Base.iterate(::Fibonacci, (a, b) = big.((0, 1))) = b, (b, a + b)

sample = Iterators.take(Fibonacci(), 1000)

observed = benford(sample) .* 100
expected = P.(1:9) .* 100

table = Real[1:9 observed expected]

using Plots
plot([observed expected]; title = "Benford's Law",
    seriestype = [:bar :line], linewidth = [0 5],
    xticks = 1:9, xlabel = "first digit", ylabel = "frequency %",
    label = ["1000 Fibonacci numbers" "P(d)=log10(1+1/d)"])

using Printf
println("Benford's Law\nFrequency of first digit\nin 1000 Fibonacci numbers")
println("digit observed  expected")
foreach(i -> @printf("%3d%9.2f%%%9.2f%%\n", table[i,:]...), 1:9)
