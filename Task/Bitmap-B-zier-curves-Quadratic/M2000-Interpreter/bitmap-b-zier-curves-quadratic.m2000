module bezier {
	Function Bitmap  {
	    def x as long, y as long, Import as boolean
	    If match("NN") then
	         Read x, y
	    else.if Match("N") Then
	          \\ is a file?
	          Read f as long
	          byte whitespace[0]
	          if not Eof(f) then
	                get #f, whitespace :P6$=chr$(whitespace[0])
	                get #f, whitespace : P6$+=chr$(whitespace[0])
	                boolean getW=true, getH=true, getV=true
	                long v
	                If p6$="P6" Then
	                      do
	                            get #f, whitespace
	                            select case whitespace[0]
	                            case 35
	                            {do get #f, whitespace
	                                until whitespace[0]=10
	                            }
	                            case 32, 9, 13, 10
	                            { if getW and x<>0 then
	                                        getW=false
	                                  else.if getH  and y<>0 then
	                                        getH=false
	                                  else.if getV and v<>0 then
	                                        getV=false
	                                  end if
	                            }
	                            case 48 to 57
	                            {if getW then
	                                       x*=10
	                                       x+=whitespace[0]-48
	                                  else.if getH then
	                                       y*=10
	                                       y+=whitespace[0]-48
	                                  else.if getV then
	                                       v*=10
	                                       v+=whitespace[0]-48
	                                  end if
	                            }
	                            End Select
	                            iF eof(f) then Error "Not a ppm file"
	                      until getV=false
	                else
	                    Error "Not a P6 ppm"
	                end if
	                Import=True
	          end if
	    else
	        Error "No proper arguments"
	    end if
	    if x<1 or y<1 then  Error "Wrong dimensions"
	    structure rgb {
	        red as byte
	        green as byte
	        blue as byte
	    }
	    m=len(rgb)*x mod 4
	    if m>0 then m=4-m  ' add some bytes to raster line
	    m+=len(rgb) *x
	    Structure rasterline {
	        {
	              pad as byte*m
	        }
	        hline as rgb*x
	    }
	    Structure Raster {
	        magic as integer*4
	        w as integer*4
	        h as integer*4
	        {
	              linesB as byte*len(rasterline)*y
	        }
	        lines as rasterline*y
	    }
	    Buffer Clear Image1 as Raster
	    Return Image1, 0!magic:="cDIB", 0!w:=Hex$(x,2), 0!h:=Hex$(y, 2)
	    if not Import then Return Image1, 0!lines:=String$(chrcode$(0xffff), Len(rasterline)*y div 2)
	    Buffer Clear Pad as Byte*4
	    SetPixel=Lambda Image1, Pad, aLines=Len(Raster)-Len(Rasterline), blines=-Len(Rasterline) (x, y, c) ->{
	          where=alines+3*x+blines*y
	          if c>0 then c=color(c)
	          c-!
	          Return Pad, 0:=c as long
	          Return Image1, 0!where:=Eval(Pad, 2) as byte, 0!where+1:=Eval(Pad, 1) as byte, 0!where+2:=Eval(Pad, 0) as byte
	    }
	    GetPixel=Lambda Image1,aLines=Len(Raster)-Len(Rasterline), blines=-Len(Rasterline) (x,y) ->{
	        where=alines+3*x+blines*y
	        =color(Eval(image1, where+2 as byte), Eval(image1, where+1 as byte), Eval(image1, where as byte))
	    }
	    StrDib$=Lambda$ Image1, Raster -> {
	        =Eval$(Image1, 0, Len(Raster))
	    }
	    CopyImage=Lambda Image1 (image$) -> {
	        if left$(image$,12)=Eval$(Image1, 0, 24 ) Then  {
	               Return Image1, 0:=Image$
	        } Else Error "Can't Copy Image"
	    }
	    Export2File=Lambda Image1, x, y (f) -> {
	        Print #f, "P6";chr$(10);"# Created using M2000 Interpreter";chr$(10);
	        Print #f, x;" ";y;" 255";chr$(10);
	        x2=x-1 :  where=0
	        x0=x*3
	        structure rgbP6 {
	              r as byte
	              g as byte
	              b as byte
	        }
	        buffer Pad as rgbP6*x*y
	        For y1=y-1 to 0 {
	              Return pad, x*y1:=eval$(image1, 0!linesB!where, x0)
	              where+=x0
	              m=where mod 4 : if m<>0 then where+=4-m
	        }
	        For x1=0 to x*y-1 {
	              Push Eval(pad, x1!b) : Return pad, x1!b:=Eval(pad, x1!r), x1!r:=Number
	        }
	        Put #f, pad
	    }
	    if Import then {
	        x0=x-1 : where=0
	        structure rgbP6 {
	            r as byte, g as byte, b as byte
	        }
	        buffer Pad1 as rgbP6*x*y
	        Get #f, Pad1
	        For x1=0 to x*y-1 {
	            Push Eval(pad1, x1!b) : Return pad1, x1!b:=Eval(pad1, x1!r), x1!r:=Number
	        }
	        x1=x*3
	        For y1=y-1 to 0 {
	            Return Image1, 0!linesB!where:=Eval$(Pad1, y1*x, x1)
	            where+=3*(x0+1)
	            m=where mod 4 : if m<>0 then where+=4-m
	        }
	    }
	    Group Bitmap {
	          type:Bitmap
	          SetPixel=SetPixel
	          GetPixel=GetPixel
	          Image$=StrDib$
	          Copy=CopyImage
	          ToFile=Export2File
	    }
	    =Bitmap
	}
	module bezier (&ppm as Bitmap, x1, y1, x2, y2, x3, y3, n, col=0){
		Group point_ {
		    long x,y
		}
		Long i
		Double t, t1, a, b, c, d
		Dim p(n+1)=point_
		For i = 0 To n
		    t = i / n
		    t1 = 1 - t
		    a = t1 ^ 2
		    b = t * t1 * 2
		    c = t ^ 2
		    p(i).x = Int(a * x1 + b * x2  + c * x3 + .5)
		    p(i).y = Int(a * y1 + b * y2  + c * y3 + .5)
		Next
		
		For i = 0 To n -1
		    Br_line(p(i).x, p(i).y, p(i +1).x, p(i +1).y, col)
		Next
		sub Br_line(x0 As Long, y0 As Long, x1 As Long, y1 As Long, Col=0)
			Local Long dx = Abs(x1 - x0), dy = Abs(y1 - y0)
			Local Long sx = If(x0 < x1-> 1, -1)
			Local Long sy = If(y0 < y1-> 1, -1)
			Local Long er = If(dx > dy-> dx, -dy) div  2, e2
			Do
				Call ppm.SetPixel(x0, y0, Col)
				If x0=x1 And y0=y1 Then Exit
				e2 = er
				If e2 > -dx Then Er -= dy : x0 += sx
				If e2 <  dy Then Er += dx : y0 += sy
			Always
		end sub
	}
	A=Bitmap(250, 250)
	bezier &A, 10, 100, 220, 310, 150, 20, 20
	move 3000,3000 : image A.Image$()
	Open "curve.ppm" for output as #f
		Call A.tofile(f)
	close #f
}
bezier
