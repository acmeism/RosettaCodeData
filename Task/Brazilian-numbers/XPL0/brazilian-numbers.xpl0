func SameDigits(N, B);
int  N, B, F;
[F:= rem(N/B);
N:= N/B;
while N > 0 do
    [if rem(N/B) # F then return false;
    N:= N/B;
    ];
return true;
];

func IsBrazilian(N);
int  N, B;
[if N < 7 then return false;
if rem(N/2) = 0 and N >= 8 then return true;
for B:= 2 to N-2 do
    if SameDigits(N, B) then return true;
return false;
];

func IsPrime(N);        \Return 'true' if N is prime
int  N, D;
[if N < 2 then return false;
if (N&1) = 0 then return N = 2;
if rem(N/3) = 0 then return N = 3;
D:= 5;
while D*D <= N do
    [if rem(N/D) = 0 then return false;
    D:= D+2;
    if rem(N/D) = 0 then return false;
    D:= D+4;
    ];
return true;
];

int I, C, N, Kinds;
[Kinds:= [" ", " odd ", " prime "];
for I:= 0 to 3-1 do
        [Text(0, "First 20");  Text(0, Kinds(I));
        Text(0, "Brazilian numbers:^m^j");
        C:= 0;  N:= 7;
        loop    [if IsBrazilian(N) then
                    [IntOut(0, N);  ChOut(0, ^ );
                    C:= C+1;
                    if C = 20 then
                        [CrLf(0);  CrLf(0);  quit];
                    ];
                case I of
                  0:    N:= N+1;
                  1:    N:= N+2;
                  2:    repeat N:= N+2 until IsPrime(N)
                other   [];
                ];
        ];
N:= 7;  C:= 0;
while C < 100_000 do
    [if IsBrazilian(N) then C:= C+1;
    N:= N+1;
    ];
Text(0, "The 100,000th Brazilian number: ");  IntOut(0, N-1);  CrLf(0);
]
