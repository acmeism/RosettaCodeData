func NumDigits(N);      \Return number of digits in N
int  N, Cnt;
[Cnt:= 0;
repeat  N:= N/10;
        Cnt:= Cnt+1;
until   N = 0;
return Cnt;
];

func Brilliant(N);      \Return 'true' if N is a brilliant number
int  N, Limit, Cnt, F;
int  A(3);
[Limit:= sqrt(N);
Cnt:= 0;  F:= 2;
loop    [if rem(N/F) = 0 then
                [A(Cnt):= F;
                Cnt:= Cnt+1;
                if Cnt > 2 then quit;
                N:= N/F;
                ]
        else    F:= F+1;
        if F > N then quit;
        if F > Limit then
                [A(Cnt):= N;
                Cnt:= Cnt+1;
                quit;
                ];
        ];
if Cnt # 2 then return false;
return NumDigits(A(0)) = NumDigits(A(1));
];

int Cnt, N, Mag;
[Format(5, 0);
Cnt:= 0;  N:= 4;
loop    [if Brilliant(N) then
            [RlOut(0, float(N));
            Cnt:= Cnt+1;
            if Cnt >= 100 then quit;
            if rem(Cnt/10) = 0 then CrLf(0);
            ];
        N:= N+1;
        ];
CrLf(0);  CrLf(0);
Format(7, 0);
Cnt:= 0;  N:= 4;  Mag:= 10;
loop    [if Brilliant(N) then
            [Cnt:= Cnt+1;
            if N >= Mag then
                [Text(0, "First >= ");
                RlOut(0, float(Mag));
                Text(0, " is ");
                RlOut(0, float(Cnt));
                Text(0, " in series: ");
                RlOut(0, float(N));
                CrLf(0);
                if Mag >= 1_000_000 then quit;
                Mag:= Mag*10;
                ];
            ];
        N:= N+1;
        ];
]
