F snakeToCamelCase(nam, sep = ‘[_]+’, lcmiddle = 0B)
   ‘ convert snake '_' separator case to camel case ’
   I nam == ‘’
      R nam
   V words = nam.trim(‘ ’).split(re:(sep))
   I lcmiddle
      words = words.map(w -> w.lowercase())
   words = [words[0]] [+] words[1..].filter(w -> w.len > 0).map(w -> w[0].uppercase()‘’w[1..])
   R words.join(‘’)

[(String, (String -> String))] funcs
funcs [+]= (‘snakeToCamelCase’, nam -> snakeToCamelCase(nam))
funcs [+]= (‘spaceToCamelCase’, nam -> snakeToCamelCase(nam, sep' ‘\s+’))
funcs [+]= (‘kebabToCamelCase’, nam -> snakeToCamelCase(nam, sep' ‘[\-]+’))
funcs [+]= (‘periodToCamelCase’, nam -> snakeToCamelCase(nam, sep' ‘[\.]+’))
funcs [+]= (‘allsepToCamelCase’, nam -> snakeToCamelCase(nam, sep' ‘[ \-_\.]+’))
funcs [+]= (‘lowermiddle_allsepToCamelCase’, nam -> snakeToCamelCase(nam, sep' ‘[ \-_\.]+’, lcmiddle' 1B))

F camel_to_snake_case(=nam, allsep = ‘[_]+’, sep = ‘_’, lcmiddle = 1B)
   ‘ convert camel case to snake case (separate with '_') ’
   nam = nam.trim((‘ ’, "\t", "\r", "\n")).replace(re:‘([A-Z]+)’, sep‘$1’)
   V sep1 = I sep == ‘.’ {‘\’sep} E sep
   I lcmiddle
      nam = (nam.split(sep1).filter(w -> w.len > 0).map(w -> w.lowercase())).join(sep)
   E
      nam = (nam.split(sep1).filter(w -> w.len > 0).map(w -> w[0].lowercase()‘’w[1..])).join(sep)
   R nam.replace(re:(allsep), sep)

funcs [+]= (‘camel_to_snake_case’, nam -> camel_to_snake_case(nam))
funcs [+]= (‘preserve_midcaps_camel_to_snake_case’, nam -> camel_to_snake_case(nam, lcmiddle' 0B))
funcs [+]= (‘allsep_to_snake_case’, nam -> camel_to_snake_case(nam, allsep' ‘[ \-\._]+’))
funcs [+]= (‘allsep_to_kebab_case’, nam -> camel_to_snake_case(nam, allsep' ‘[ \-\._]+’, sep' ‘-’))
funcs [+]= (‘allsep_to_space_case’, nam -> camel_to_snake_case(nam, allsep' ‘[ \-\._]+’, sep' ‘ ’))
funcs [+]= (‘allsep_to_period_case’, nam -> camel_to_snake_case(nam, allsep' ‘[ \-\._]+’, sep' ‘.’))
funcs [+]= (‘allsep_to_slash_case’, nam -> camel_to_snake_case(nam, allsep' ‘[ \-\._]+’, sep' ‘/’))

L(f_name, f) funcs
   print(‘Testing function ’f_name‘:’)
   L(teststring) [
      ‘snakeCase’,
      ‘snake_case’,
      ‘snake-case’,
      ‘snake case’,
      ‘snake CASE’,
      ‘snake.case’,
      ‘variable_10_case’,
      ‘variable10Case’,
      ‘ergo rE tHis’,
      ‘hurry-up-joe!’,
      ‘c://my-docs/happy_Flag-Day/12.doc’,
      ‘ spaces ’]
      print(teststring.rjust(36)‘  =>  ’f(teststring))
   print()
