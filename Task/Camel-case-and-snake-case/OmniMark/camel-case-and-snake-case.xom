define stream function to_snake_case (value stream txt) as
  local stream ls
  open ls as buffer
  repeat scan txt
    match white-space* value-end
      ; "trailing whitespace may be ignored"
    match value-start white-space*
      ; "leading ... whitespace may be ignored"
    match (lc | digit) => char1 uc => char2
      put ls '%x(char1)_%lx(char2)'
    match ('_' | space | "-" | '.')
      ; normalise to underscore and lowercase letter
      put ls '_'
    match any => char
      ; all other characters are lowercase
      put ls '%lx(char)'
  again
  close ls
  return ls

define stream function toCamelCase (value stream txt) as
  local stream ls
  open ls as buffer
  repeat scan txt
    match white-space* value-end
      ; "trailing whitespace may be ignored"
    match value-start white-space* letter+ => word1
      ; "leading ... whitespace may be ignored"
      put ls word1
    match ('_' | space | "-" | '.') any => makeUpper
      ; consume dividing underscore, space, hyphen or full stop
      put ls '%ux(makeUpper)'
    match ([digit] letter) => chars
      ; a letter preceded by a numeral should be uppercase
      put ls '%ux(chars)'
    match any => char
      ; all other characters are lowercase
      put ls '%lx(char)'
  again
  close ls
  return ls

process
  local stream ls variable initial {"snakeCase", "snake_case",
  "variable_10_case", "variable10Case",
  "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc",
  "  spaces  "}
  output 'to_snake_case%n'
  output '=============%n'
  repeat over ls
    output ls || ' => ' || to_snake_case(ls) || '%n'
  again
  output '%n'
  output 'toCamelCase%n'
  output '===========%n'
  repeat over ls
    output ls || ' => ' || toCamelCase(ls) || '%n'
  again
