$ include "seed7_05.s7i";

const func bitset: castOut (in integer: base, in integer: start, in integer: ending) is func
  result
    var bitset: casted is {};
  local
    var bitset: ran is {};
    var integer: x is 0;
    var integer: n is 0;
    var integer: k is 0;
    var boolean: finished is FALSE;
  begin
    for x range 0 to base - 2 do
      if x rem pred(base) = x ** 2 rem pred(base) then
        incl(ran, x);
      end if;
    end for;
    x := start div pred(base);
    repeat
      for n range ran until finished do
        k := pred(base) * x + n;
        if k >= start then
          if k > ending then
            finished := TRUE;
          else
            incl(casted, k);
          end if;
        end if;
      end for;
      incr(x);
    until finished;
  end func;

const proc: main is func
  begin
    writeln(castOut(16, 1, 255));
  end func;
