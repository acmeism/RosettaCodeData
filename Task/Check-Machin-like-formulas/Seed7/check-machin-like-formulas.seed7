$ include "seed7_05.s7i";
  include "bigint.s7i";
  include "bigrat.s7i";

const type: mTerms is array array bigInteger;

const array mTerms: testCases is [] (
    [] ([] ( 1_, 1_,   2_), [] ( 1_, 1_,   3_)),
    [] ([] ( 2_, 1_,   3_), [] ( 1_, 1_,   7_)),
    [] ([] ( 4_, 1_,   5_), [] (-1_, 1_, 239_)),
    [] ([] ( 5_, 1_,   7_), [] ( 2_, 3_,  79_)),
    [] ([] ( 1_, 1_,   2_), [] ( 1_, 1_,   5_), [] (  1_, 1_,    8_)),
    [] ([] ( 4_, 1_,   5_), [] (-1_, 1_,  70_), [] (  1_, 1_,   99_)),
    [] ([] ( 5_, 1_,   7_), [] ( 4_, 1_,  53_), [] (  2_, 1_, 4443_)),
    [] ([] ( 6_, 1_,   8_), [] ( 2_, 1_,  57_), [] (  1_, 1_,  239_)),
    [] ([] ( 8_, 1_,  10_), [] (-1_, 1_, 239_), [] ( -4_, 1_,  515_)),
    [] ([] (12_, 1_,  18_), [] ( 8_, 1_,  57_), [] ( -5_, 1_,  239_)),
    [] ([] (16_, 1_,  21_), [] ( 3_, 1_, 239_), [] (  4_, 3_, 1042_)),
    [] ([] (22_, 1_,  28_), [] ( 2_, 1_, 443_), [] ( -5_, 1_, 1393_), [] (-10_, 1_, 11018_)),
    [] ([] (22_, 1_,  38_), [] (17_, 7_, 601_), [] ( 10_, 7_, 8149_)),
    [] ([] (44_, 1_,  57_), [] ( 7_, 1_, 239_), [] (-12_, 1_,  682_), [] ( 24_, 1_, 12943_)),
    [] ([] (88_, 1_, 172_), [] (51_, 1_, 239_), [] ( 32_, 1_,  682_), [] ( 44_, 1_,  5357_), [] (68_, 1_, 12943_)),
    [] ([] (88_, 1_, 172_), [] (51_, 1_, 239_), [] ( 32_, 1_,  682_), [] ( 44_, 1_,  5357_), [] (68_, 1_, 12944_))
  );

const func bigRational: tanEval (in bigInteger: coef, in bigRational: f) is func
  result
    var bigRational: tanEval is bigRational.value;
  local
    var bigRational: a is bigRational.value;
    var bigRational: b is bigRational.value;
  begin
    if coef = 1_ then
      tanEval := f;
    elsif coef < 0_ then
      tanEval := -tanEval(-coef, f);
    else
      a := tanEval(coef div 2_, f);
      b := tanEval(coef - coef div 2_, f);
      tanEval := (a + b) / (1_/1_ - a * b);
    end if;
  end func;

const func bigRational: tans (in mTerms: terms) is func
  result
    var bigRational: tans is bigRational.value;
  local
    var bigRational: a is bigRational.value;
    var bigRational: b is bigRational.value;
  begin
    if length(terms) = 1 then
      tans := tanEval(terms[1][1], terms[1][2] / terms[1][3]);
    else
      a := tans(terms[.. length(terms) div 2]);
      b := tans(terms[succ(length(terms) div 2) ..]);
      tans := (a + b) / (1_/1_ - a * b);
    end if;
  end func;

const proc: main is func
  local
    var integer: index is 0;
    var array bigInteger: term is 0 times 0_;
  begin
    for key index range testCases do
      write(tans(testCases[index]) = 1_/1_ <& ": pi/4 = ");
      for term range testCases[index] do
        write([0] ("+", "-")[ord(term[1] < 0_)] <& abs(term[1]) <& "*arctan(" <& term[2] <& "/" <& term[3] <& ")");
      end for;
      writeln;
    end for;
  end func;
