func MulInv(A, B);              \Returns X where rem((A*X) / B) = 1
int  A, B;
int  B0, T, Q;
int  X0, X1;
[B0:= B;  X0:= 0;  X1:= 1;
if B = 1 then return 1;
while A > 1 do
    [Q:= A / B;
    T:= B;  B:= rem(A/B);  A:= T;
    T:= X0;  X0:= X1 - Q*X0;  X1:= T;
    ];
if X1 < 0 then X1:= X1 + B0;
return X1;
];

func ChineseRem(N, A, Len);
int  N, A, Len;
int  P, I, Prod, Sum;
[Prod:= 1;  Sum:= 0;
for I:= 0 to Len-1 do Prod:= Prod*N(I);
for I:= 0 to Len-1 do
   [P:= Prod / N(I);
   Sum:= Sum  +  A(I) * MulInv(P,N(I)) * P;
   ];
return rem(Sum/Prod);
];

int N, A;
[N:= [ 3, 5, 7 ];
 A:= [ 2, 3, 2 ];
 IntOut(0, ChineseRem(N, A, 3));  CrLf(0);
]
