processor ChurchZero
  templates apply&{f:}
    $ !
  end apply
end ChurchZero

def zero: $ChurchZero;

processor Successor
  def predecessor: $;
  templates apply&{f:}
    $ -> predecessor::apply&{f: f} -> f !
  end apply
end Successor

templates churchFromInt
  @: $zero;
  $ -> #
  when <=0> do $@!
  when <1..> do @: $@ -> Successor; $-1 -> #
end churchFromInt

templates intFromChurch
  templates add1
    $ + 1 !
  end add1
  def church: $;
  0 -> church::apply&{f: add1} !
end intFromChurch

def three: $zero -> Successor -> Successor -> Successor;
def four: 4 -> churchFromInt;

processor Add&{to:}
  def add: $;
  templates apply&{f:}
    $ -> add::apply&{f: f} -> to::apply&{f: f} !
  end apply
end Add

$three -> Add&{to: $four} -> intFromChurch -> '$;
' -> !OUT::write

processor Multiply&{by:}
  def multiply: $;
  templates apply&{f:}
    $ -> multiply::apply&{f: by::apply&{f: f}} !
  end apply
end Multiply

$three -> Multiply&{by: $four} -> intFromChurch -> '$;
' -> !OUT::write

processor Power&{exp:}
  def base: $;
  templates apply&{f:}
    processor Wrap&{f:}
      templates function
        $ -> f !
      end function
    end Wrap
    templates compose
      def p:$;
      $Wrap&{f: base::apply&{f: p::function}} !
    end compose
    def pow: $Wrap&{f: f} -> exp::apply&{f: compose};
    $ -> pow::function !
  end apply
end Power

$three -> Power&{exp: $four} -> intFromChurch -> '$;
' -> !OUT::write

$four -> Power&{exp: $three} -> intFromChurch -> '$;
' -> !OUT::write
