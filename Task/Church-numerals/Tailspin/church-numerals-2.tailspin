processor ChurchZero
  templates apply&{f:}
    $ !
  end apply
end ChurchZero

def zero: $ChurchZero;

processor Successor
  def predecessor: $;
  templates apply&{f:}
    $ -> predecessor::apply&{f: f} -> f !
  end apply
end Successor

templates churchFromInt
  @: $zero;
  $ -> #
  when <=0> do $@!
  when <1..> do @: $@ -> Successor; $-1 -> #
end churchFromInt

templates intFromChurch
  templates add1
    $ + 1 !
  end add1
  def church: $;
  0 -> church::apply&{f: add1} !
end intFromChurch

def three: $zero -> Successor -> Successor -> Successor;
def four: 4 -> churchFromInt;

templates add&{to:}
  $ -> to::apply&{f: Successor} !
end add

$three -> add&{to: $four} -> intFromChurch -> '$;
' -> !OUT::write

templates multiply&{by:}
  def m: $;
  $zero -> by::apply&{f: add&{to: $m}} !
end multiply

$three -> multiply&{by: $four} -> intFromChurch -> '$;
' -> !OUT::write

templates power&{exp:}
  def base: $;
  $zero -> Successor -> exp::apply&{f: multiply&{by: $base}} !
end power

$three -> power&{exp: $four} -> intFromChurch -> '$;
' -> !OUT::write

$four -> power&{exp: $three} -> intFromChurch -> '$;
' -> !OUT::write
