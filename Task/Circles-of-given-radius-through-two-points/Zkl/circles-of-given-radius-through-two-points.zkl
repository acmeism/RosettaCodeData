fcn findCircles(a,b, c,d, r){ //-->T(T(x,y,r) [,T(x,y,r)]))
   delta:=(a-c).hypot(b-d);
   switch(delta){	// could just catch MathError
      case(0.0){"singularity"}  // should use epsilon test
      case(r*2){T(T((a+c)/2,(b+d)/2,r))}
      else{
	 if(delta > 2*r) "Point delta > diameter";
	 else{
	    md:=(r.pow(2) - (delta/2).pow(2)).sqrt();
	    T(T((a+c)/2 + md*(b-d)/delta,(b+d)/2 + md*(c-b)/delta,r),
	      T((a+c)/2 - md*(b-d)/delta,(b+d)/2 - md*(c-b)/delta,r));
	  }
       }
    }
}

data:=T(
   T(0.1234, 0.9876,    0.8765, 0.2345,    2.0),
   T(0.0000, 2.0000,    0.0000, 0.0000,    1.0),
   T(0.1234, 0.9876,    0.1234, 0.9876,    2.0),
   T(0.1234, 0.9876,    0.8765, 0.2345,    0.5),
   T(0.1234, 0.9876,    0.1234, 0.9876,    0.0),
);

ppFmt:="(%2.4f,%2.4f)";
pprFmt:=ppFmt+" r=%2.1f";
foreach a,b, c,d, r in (data){
   println("Points: ",ppFmt.fmt(a,b),", ",pprFmt.fmt(c,d,r));
   print("   Circles: ");
   cs:=findCircles(a,b,c,d,r);
   if(List.isType(cs))
       print(cs.pump(List,'wrap(c){pprFmt.fmt(c.xplode())}).concat(", "));
   else print(cs);
   println();
}
