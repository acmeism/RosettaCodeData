;CONSTANTS
VFLIP equ %0001000000000000
HFLIP equ %0000100000000000
;Ram Variables
Cursor_X equ $00FF0000
Cursor_Y equ Cursor_X+1
temp_cursor_x equ $00FF0002
temp_cursor_y equ $00FF0003
;Video Ports
VDP_data	EQU	$C00000	; VDP data, R/W word or longword access only
VDP_ctrl	EQU	$C00004	; VDP control, word or longword writes only
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 					Traps
	DC.L	$FFFFFE00		;SP register value
	DC.L	ProgramStart	        ;Start of Program Code
	DS.L	7,IntReturn		; bus err,addr err,illegal inst,divzero,CHK,TRAPV,priv viol
	DC.L	IntReturn		; TRACE
	DC.L	IntReturn		; Line A (1010) emulator
	DC.L	IntReturn		; Line F (1111) emulator
	DS.L	4,IntReturn		; Reserverd /Coprocessor/Format err/ Uninit Interrupt
	DS.L	8,IntReturn		; Reserved
	DC.L	IntReturn		; spurious interrupt
	DC.L	IntReturn		; IRQ level 1
	DC.L	IntReturn		; IRQ level 2 EXT
	DC.L	IntReturn		; IRQ level 3
	DC.L	IntReturn		; IRQ level 4 Hsync
	DC.L	IntReturn		; IRQ level 5
	DC.L	IntReturn		; IRQ level 6 Vsync
	DC.L	IntReturn		; IRQ level 7
	DS.L	16,IntReturn	; TRAPs
	DS.L	16,IntReturn	; Misc (FP/MMU)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					Header
	DC.B	"SEGA GENESIS    "	;System Name
	DC.B	"(C)CHBI "			;Copyright
 	DC.B	"2019.JAN"			;Date
	DC.B	"ChibiAkumas.com                                 " ; Cart Name
	DC.B	"ChibiAkumas.com                                 " ; Cart Name (Alt)
	DC.B	"GM CHIBI001-00"	;TT NNNNNNNN-RR T=Type (GM=Game) N=game Num  R=Revision
	DC.W	$0000				;16-bit Checksum (Address $000200+)
	DC.B	"J               "	;Control Data (J=3button K=Keyboard 6=6button C=cdrom)
	DC.L	$00000000			;ROM Start
	DC.L	$003FFFFF			;ROM Length
	DC.L	$00FF0000,$00FFFFFF	;RAM start/end (fixed)
	DC.B	"            "		;External RAM Data
	DC.B	"            "		;Modem Data
	DC.B	"                                        " ;MEMO
	DC.B	"JUE             "	;Regions Allowed

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					Generic Interrupt Handler
IntReturn:
	rte
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					Program Start
ProgramStart:
	;initialize TMSS (TradeMark Security System)
	move.b ($A10001),D0		;A10001 test the hardware version
	and.b #$0F,D0
	beq	NoTmss				;branch if no TMSS chip
	move.l #'SEGA',($A14000);A14000 disable TMSS
NoTmss:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					Set Up Screen Settings

	lea VDPSettings,A5		;Initialize Screen Registers
	move.l #VDPSettingsEnd-VDPSettings,D1 ;length of Settings
	
	move.w (VDP_ctrl),D0	;C00004 read VDP status (interrupt acknowledge?)
	move.l #$00008000,d5	;VDP Reg command (%8rvv)
	
NextInitByte:
	move.b (A5)+,D5			;get next video control byte
	move.w D5,(VDP_ctrl)	;C00004 send write register command to VDP
		;   8RVV - R=Reg V=Value
	add.w #$0100,D5			;point to next VDP register
	dbra D1,NextInitByte	;loop for rest of block
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;					Set up palette and graphics
	
	move.l #$C0000000,d0	;Color 0
	move.l d0,VDP_Ctrl
	MOVE.W #$0A00,VDP_Data		;BLUE
	
	move.l #$C01E0000,d0	;Color 0
	move.l d0,VDP_Ctrl
	MOVE.W #$00EE,VDP_Data		;YELLOW
	
	lea Graphics,a0						;background tiles
	move.w #(GraphicsEnd-Graphics)-1,d1	;data size
	MOVEQ #0,D2							;start loading at tile 0 of VRAM
	jsr DefineTiles
	
	;Turn on screen
	move.w	#$8144,(VDP_Ctrl);C00004 reg 1 = 0x44 unblank display

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
Main:
	CLR.B Cursor_X
	CLR.B Cursor_Y
	
	LEA TestData,a3
	jsr PrintCistercian
	jsr PrintCistercian
	jsr PrintCistercian
	jsr PrintCistercian
	jsr PrintCistercian
	jsr PrintCistercian
	jsr PrintCistercian
	jsr PrintCistercian
	jmp *					;halt the cpu - we're done
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PrintCistercian:
	;input:A3 = address of test data.
	MOVE.B Cursor_X,temp_Cursor_X
	MOVE.B Cursor_Y,temp_Cursor_Y
	MOVE.L (A3)+,D1
	;thousands, hundreds, tens, ones
	
	;PRINT TENS PLACE
	MOVE.L D1,D0
	ROR.W #8,D0		;get tens place into low byte
	AND.W #$FF,D0
	OR.W #HFLIP,D0
	jsr doPrint
	
	addq.b #1,(Cursor_X)	;INC Xpos
	
	;PRINT ONES PLACE
	MOVE.L D1,D0
	AND.W #$FF,D0
	JSR doPrint
	
	
	MOVE.B temp_Cursor_X,Cursor_X
	ADDQ.B #1,cursor_Y
	
	;PRINT STICK CENTER
	MOVE.W #10,D0	;the center of the stick
	OR.W #HFLIP,D0
	jsr doPrint
	addq.b #1,(Cursor_X)	;INC Xpos
	MOVE.W #10,D0	;the center of the stick
	jsr doPrint
	
	MOVE.B temp_Cursor_X,Cursor_X
	ADDQ.B #1,cursor_Y
	
	;PRINT THOUSANDS PLACE
	MOVE.L D1,D0
	SWAP D0
	ROR.W #8,D0		;get thousands place into low byte
	AND.W #$FF,D0
	OR.W #(HFLIP|VFLIP),D0
	jsr doPrint
	
	addq.b #1,(Cursor_X)	;INC Xpos
	MOVE.L D1,D0
	SWAP D0
	AND.W #$FF,D0
	OR.W #(VFLIP),D0
	jsr doPrint	
	
	MOVE.B temp_Cursor_X,Cursor_X
	MOVE.B temp_Cursor_Y,Cursor_Y
	ADDQ.B #3,Cursor_X
	
	rts
doPrint:
;;; this code outputs the tile index in D0 to the Genesis's tilemap... don't worry if it doesn't make sense!
	Move.L  #$40000003,d5	
	clr.l d4			

	Move.B (Cursor_Y),D4	
	rol.L #8,D4				
	rol.L #8,D4
	rol.L #7,D4				
	add.L D4,D5				
	
	Move.B (Cursor_X),D4
	rol.L #8,D4				
	rol.L #8,D4
	rol.L #1,D4				
	add.L D4,D5				
	
	MOVE.L D5,(VDP_ctrl)	
	MOVE.W D0,(VDP_data)
	
	rts
TestData:
;I used 10 for zero since otherwise we'd have a bunch of sticks as the blank tile... not good!
	DC.B 10,10,10,10
	DC.B 10,10,10,1
	DC.B 10,10,2,10
	DC.B 10,3,10,10
	DC.B 4,10,10,10
	DC.B 5,5,5,5
	DC.B 6,7,8,9
	DC.B 1,2,3,4
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	
DefineTiles:						;Copy D1 bytes of data from A0 to VDP memory D2
	jsr prepareVram					;Calculate the memory location we want to write
.again:								; the tile pattern definitions to
		move.l (a0)+,(VDP_data)				
		dbra d1,.again
	rts
	
	
			
prepareVram:		
	;input: D2 = the vram memory address you want to write to.
										;To select a memory location D2 we need to calculate
										;the command byte... depending on the memory location
	MOVEM.L D0-D7/A0-A6,-(SP)							;$7FFF0003 = Vram $FFFF.... $40000000=Vram $0000
		move.l d2,d0
		and.w #%1100000000000000,d0		;Shift the top two bits to the far right
		rol.w #2,d0
		
		and.l #%0011111111111111,d2	    ; shift all the other bits left two bytes
		rol.l #8,d2		
		rol.l #8,d2
		
		or.l d0,d2						
		or.l #$40000000,d2				;Set the second bit from the top to 1
										;#%01000000 00000000 00000000 00000000
		move.l d2,(VDP_ctrl)
	MOVEM.L (SP)+,D0-D7/A0-A6
	rts
Graphics:
	;cistercian numerals
	DC.L 0,0,0,0,0,0,0,0	;padding - this determines the default background tile.
	dc.l $FFFFFFFF,$F0000000,$F0000000,$F0000000,$F0000000,$F0000000,$F0000000,$F0000000		;1
	dc.l $F0000000,$F0000000,$F0000000,$F0000000,$FFFFFFFF,$F0000000,$F0000000,$F0000000		;2
	dc.l $FF000000,$F0F00000,$F00F0000,$F000F000,$F0000F00,$F00000F0,$F000000F,$F0000000		;3
	dc.l $F0000000,$F000000F,$F00000F0,$F0000F00,$F000F000,$F00F0000,$F0F00000,$FF000000		;4
	dc.l $FFFFFFFF,$F00000F0,$F0000F00,$F000F000,$F00F0000,$F0F00000,$FF000000,$F0000000		;5
	dc.l $F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F		;6
	dc.l $FFFFFFFF,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F		;7
	dc.l $F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$FFFFFFFF		;8
	dc.l $FFFFFFFF,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$F000000F,$FFFFFFFF		;9
	DC.L $F0000000,$F0000000,$F0000000,$F0000000,$F0000000,$F0000000,$F0000000,$F0000000		;the "stick"
GraphicsEnd:
VDPSettings:
	DC.B $04 ; 0 mode register 1											---H-1M-
	DC.B $04 ; 1 mode register 2											-DVdP---
	DC.B $30 ; 2 name table base for scroll A (A=top 3 bits)				--AAA--- = $C000
	DC.B $3C ; 3 name table base for window (A=top 4 bits / 5 in H40 Mode)	--AAAAA- = $F000
	DC.B $07 ; 4 name table base for scroll B (A=top 3 bits)				-----AAA = $E000
	DC.B $6C ; 5 sprite attribute table base (A=top 7 bits / 6 in H40)		-AAAAAAA = $D800
	DC.B $00 ; 6 unused register											--------
	DC.B $00 ; 7 background color (P=Palette C=Color)						--PPCCCC
	DC.B $00 ; 8 unused register											--------
	DC.B $00 ; 9 unused register											--------
	DC.B $FF ;10 H interrupt register (L=Number of lines)					LLLLLLLL
	DC.B $00 ;11 mode register 3											----IVHL
	DC.B $81 ;12 mode register 4 (C bits both1 = H40 Cell)					C---SIIC
	DC.B $37 ;13 H scroll table base (A=Top 6 bits)							--AAAAAA = $FC00
	DC.B $00 ;14 unused register											--------
	DC.B $02 ;15 auto increment (After each Read/Write)						NNNNNNNN
	DC.B $01 ;16 scroll size (Horiz & Vert size of ScrollA & B)				--VV--HH = 64x32 tiles
	DC.B $00 ;17 window H position (D=Direction C=Cells)					D--CCCCC
	DC.B $00 ;18 window V position (D=Direction C=Cells)					D--CCCCC
	DC.B $FF ;19 DMA length count low										LLLLLLLL
	DC.B $FF ;20 DMA length count high										HHHHHHHH
	DC.B $00 ;21 DMA source address low										LLLLLLLL
	DC.B $00 ;22 DMA source address mid										MMMMMMMM
	DC.B $80 ;23 DMA source address high (C=CMD)							CCHHHHHH
VDPSettingsEnd:
	even
