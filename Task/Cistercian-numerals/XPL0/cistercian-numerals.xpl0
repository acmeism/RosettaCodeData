\ Cistercian numerals
code Rem=2, ChOut=8, CrLf=9, IntOut=11, Text=12;

define CanvasSize = 15;

\ BEGIN. Operations on the canvas (considered as an ADT).
procedure ClearCanvas(Canvas);
integer Canvas;
integer I, J;
begin
for I:= 0 to CanvasSize - 1 do
  for J:= 0 to CanvasSize - 1 do Canvas(I, J):= ^ ;
end; \ClearCanvas

procedure DrawLine(Canvas, R0, C0, Dist, DR, DC);
\ Draws a straight (vertical, horizontal, or diagonal) line
\ from Canvas(R0, C0) to Canvas(R0 + DR * Dist, C0 + DC * Dist)
integer Canvas, R0, C0, Dist, DR, DC;
integer C, R, I;
begin
if (DR # -1) and (DR # 0) and (DR # 1) then exit;
if (DC # -1) and (DC # 0) and (DC # 1) then exit;
R:= R0; C:= C0;
for I:= 0 to Dist do
  begin
  Canvas(R, C):= ^*;
  R:= R + DR; C:= C + DC;
  end
end; \DrawLine

procedure ShowCanvas(Canvas);
integer Canvas;
integer I, J;
begin
for I:= 0 to CanvasSize - 1 do
  begin
  for J:= 0 to CanvasSize - 1 do ChOut(0, Canvas(I, J));
  CrLf(0);
  end;
end; \ShowCanvas
\ END Operations on the canvas.

procedure DrawNumber(Canvas, V);
integer Canvas, V;
integer Thousands, Hundreds, Tens, Ones, RAxis, CAxis;
\ DrawDigit is part of the algorithm, so it is nested in DrawNumber.

  procedure DrawDigit(V, RS, CS);
  integer V, RS, CS;
  \ RS, CS are signs of rows and cols in in relation to the axis.
  \ They decide in which quadrant a digit is located.
  begin
  if (RS # -1) and (RS # 1) then exit;
  if (CS # -1) and (CS # 1) then exit;
  case V of
    1: DrawLine(Canvas, RAxis + RS * 7, CAxis + CS, 4, 0, CS);
    2: DrawLine(Canvas, RAxis + RS * 3, CAxis + CS, 4, 0, CS);
    3: DrawLine(Canvas, RAxis + RS * 7, CAxis + CS, 4, -RS, CS);
    4: DrawLine(Canvas, RAxis + RS * 3, CAxis + CS, 4, RS, CS);
    5: [DrawDigit(1, RS, CS); DrawDigit(4, RS, CS)];
    6: DrawLine(Canvas, RAxis + RS * 3, CAxis + CS * 5, 4, RS, 0);
    7: [DrawDigit(1, RS, CS); DrawDigit(6, RS, CS)];
    8: [DrawDigit(2, RS, CS); DrawDigit(6, RS, CS)];
    9: [DrawDigit(1, RS, CS); DrawDigit(8, RS, CS)]
  other [];
  end; \DrawDigit;

begin \DrawNumber
RAxis := (CanvasSize - 1) / 2;
CAxis := 5;
DrawLine(Canvas, 0, CAxis, CanvasSize - 1, 1, 0); \Draw 0 (or vertical axis)
Thousands:= V / 1000;
V:= Rem(V / 1000);
Hundreds:= V / 100;
V:= Rem(V / 100);
Tens:= V / 10;
Ones:= Rem(V / 10);
if Thousands > 0 then DrawDigit(Thousands, 1, -1);
if Hundreds > 0 then DrawDigit(Hundreds, 1, 1);
if Tens > 0 then DrawDigit(Tens, -1, -1);
if Ones > 0 then DrawDigit(Ones, -1, 1);
end; \DrawNumber

procedure Test(N);
integer N;
integer Canvas(CanvasSize, CanvasSize);
begin
IntOut(0, N); ChOut(0, ^:); CrLf(0);
ClearCanvas(Canvas);
DrawNumber(Canvas, N);
ShowCanvas(Canvas);
CrLf(0);
end;

begin
Test(0);
Test(1);
Test(20);
Test(300);
Test(4000);
Test(5555);
Test(6789);
Test(9999);
end
