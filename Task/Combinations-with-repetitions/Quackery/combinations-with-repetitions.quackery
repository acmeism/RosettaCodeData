( nextplain generates the next plaindrome in the
  current base by adding one to a given plaindrome,
  then replacing each trailing zero with the least
  significant non-zero digit of the number

  See: https://oeis.org/search?q=plaindromes

       4 base put
       -1
       10 times
         [ nextplain
           dup echo sp ]
       drop
       base release

        prints "0 1 2 3 11 12 13 22 23 33"
  i.e. decimal "0 1 2 3  5  6  7 10 11 15"

  Right padding the base 4 representations with
  zeros gives all the combinations with repetitions
  for selecting two doughnuts in a store selling
  four types  of doughnut, numbered 0, 1, 2, and 3.

     00 01 02 03 11 12 13 22 23 33                      )

  [ 1+ dup 0 = if done
    0 swap
    [ base share /mod
      dup 0 = while
      drop dip 1+
      again ]
    swap rot 1+ times
      [ base share * over + ]
    nip ]                      is nextplain (   n --> n )

  [ dup base put
    swap ** 1 -
    [] swap -1
    [ 2dup > while
      nextplain
      rot over join
      unrot
      again ]
    base release
    2drop ]                    is kcombnums ( n n --> [ )

  [ [] unrot times
     [ base share /mod
       rot join swap ]
    drop ]                     is ndigits   ( n n --> [ )

  [ [] unrot
    witheach
      [ dip dup peek
        nested rot swap join
        swap ]
    drop ]                     is [peek]    ( [ [ --> [ )

  [ dup temp put
    size dup base put
    dip dup kcombnums
    [] unrot witheach
      [ over ndigits
        temp share swap [peek]
        nested rot swap join
        swap ]
    temp release
    base release
    drop ]                     is kcombs    ( n [ --> [ )

  2
  $ "jam iced plain" nest$
  kcombs
  witheach
    [ witheach
        [ echo$ sp ] cr ]
  cr
  3 10 kcombnums size echo
