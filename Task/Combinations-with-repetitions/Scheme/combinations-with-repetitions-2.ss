(define (combs-with-rep m lst)
  (define arr (make-vector (+ m 1) '()))
  (vector-set! arr 0 '(()))
  (for-each (lambda (x)
	      (do ((i 1 (+ i 1)))
		  ((> i m))
		(vector-set! arr i (append (vector-ref arr i)
					   (map (lambda (xs) (cons x xs))
						(vector-ref arr (- i 1)))))
		)
	      ) lst)
  (vector-ref arr m))

(display (combs-with-rep 2 (list "iced" "jam" "plain"))) (newline)
(display (length (combs-with-rep 3 '(1 2 3 4 5 6 7 8 9 10)))) (newline)
