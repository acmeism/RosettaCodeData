Module CheckIt {
      Function Equal(Strings){
            k=Each(Strings, 2, -1)
            a$=Array$(Strings, 0)
            =True
            While k {
                  =False
                  if a$<>array$(k) then exit
                  =True
            }
      }
      Function LessThan(Strings){
            =True
            if len(Strings)<2 then exit
            k=Each(Strings, 2)
            a$=Array$(Strings, 0)
            While k {
                  =False
                  if a$>=array$(k) then exit
                  a$=array$(k)
                  =True
            }
      }

      Print Equal(("alfa","alfa","alfa", "alfa"))=True
      Print Equal(("alfa",))=True
      Dim A$(10)="alfa"
      Print Equal(A$())=True
      Print Equal(("alfa1","alfa2","alfa3", "alfa4"))=False

      Print LessThan(("alfa1","alfa2","alfa3", "alfa4"))=True
      Print LessThan(("alfa1",))=true
      alfa$=Lambda$ k=1 ->{=String$("*", k) : k++}
      Dim A$(20)<<alfa$()
      Print LessThan(A$())=True
      A$(5)=""
      Print LessThan(A$())=False
}
Checkit
MODULE UsingLambdaFunctionAndFold {
	equ=LAMBDA ->{
		=LAMBDA p$, c=0 -> {
			IF c=0 THEN
				p$=LETTER$: PUSH 1=1 : c++
			ELSE
				READ q$
				IF STACKITEM() THEN
					DROP
					PUSH p$=q$
					p$=q$
				END IF
			END IF
		}
	}
	LessThan=LAMBDA ->{
		=LAMBDA p$, c=0 -> {
			IF c=0 THEN
				p$=LETTER$: PUSH 1=1 : c++
			ELSE
				READ q$
				IF STACKITEM() THEN
					DROP
					PUSH p$<q$
					p$=q$
				END IF
			END IF
		}
	}
	PRINT ("alfa","alfa","alfa", "alfa")#FOLD(equ())=True
	PRINT ("alfa","alfa","alfa", "alfa*")#FOLD(equ())=False
	PRINT ("alfa1","alfa2","alfa3", "alfa4")#FOLD(LessThan())=True
	PRINT ("alfa1","alfa2","alfa", "alfa4")#FOLD(LessThan())=False
}
UsingLambdaFunctionAndFold
