MODULE COMPARE_STRING_LENGTH {
	A = "I am string"
	B = {I am string too}
	PRINT A<B   ' True
	' COMPARE() WORKS ONLY FOR VARIABLES (-1,0,1):
	PRINT COMPARE(A, B) = -1 ' A<B
	' <=> WORKS FOR EXPRESSIONS (-1,0,1)
	PRINT A <=> B = -1  ' A<B
	' WE CAN SET TEXT COMPARE
	SET SWITCHES "+TXT"
	A="Alfa"
	B="ALFA"
	PRINT A=B  ' TRUE
	' WE CAN RESET TO BINARY COMPARE
	SET SWITCHES "-TXT"
	PRINT LEN(STR$("ABC"))=1.5   ' 1.5 Words = 3 bytes  'ANSI using LOCALE value as LCID
	PRINT CHR$(STR$("ABC"))="ABC"
	PRINT LEN("ABC")=3 ' 3 Words = 6 Bytes  ' UTF16LE
	PRINT LEN(STRING$("ABC αβγ" AS UTF8enc))=5 ' 5 Words = 10Bytes ' UTF8
	PRINT STRING$(STRING$("ABC αβγ" AS UTF8enc) AS UTF8dec)="ABC αβγ"
	PRINT LEN(STRING$("ABC αβγ" AS Encode64))=20 ' 20 Words 40bytes ' utf16le to Base64
	PRINT STRING$(STRING$("ABC αβγ" AS Encode64) AS Decode64)="ABC αβγ"
}
COMPARE_STRING_LENGTH
a=("abcd","123456789","abcdef","1234567")
map1=lambda (a$)-> {
	PUSH STRING$("*",LEN(a$))+CHR$(9)+a$
}
map2=lambda-> {
	PUSH RIGHTPART$(LETTER$, CHR$(9))
}
CLIPBOARD a#MAP(map1)#SORT(-1)#MAP(map2)#STR$()
PRINT CLIPBOARD$
' like Python's advance solution
b=a#MAP(map1)#SORT(-1)#MAP(map2)
c=LEN(b)-1
d=EACH(b)
WHILE d
	PRINT QUOTE$(ARRAY$(d));" has length ";LEN(ARRAY$(d));
	IF d^=0 THEN
		PRINT " and is the longest string"
	ELSE.IF d^<c THEN
		PRINT " and is neither the longest nor the shortest string"
	ELSE
		PRINT " and is the shortest string"
	END IF
END WHILE
