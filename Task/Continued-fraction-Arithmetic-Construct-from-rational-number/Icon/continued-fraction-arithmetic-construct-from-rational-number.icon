procedure main ()
  write_r2cf (1, 2)
  write_r2cf (3, 1)
  write_r2cf (23, 8)
  write_r2cf (13, 11)
  write_r2cf (22, 7)
  write_r2cf (-151, 77)
  write_r2cf (14142, 10000)
  write_r2cf (141421, 100000)
  write_r2cf (1414214, 1000000)
  write_r2cf (14142136, 10000000)

  # Decimal expansion of sqrt(2): https://oeis.org/A002193
  write_r2cf (141421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157,
              100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

  write_r2cf (31, 10)
  write_r2cf (314, 100)
  write_r2cf (3142, 1000)
  write_r2cf (31428, 10000)
  write_r2cf (314285, 100000)
  write_r2cf (3142857, 1000000)
  write_r2cf (31428571, 10000000)
  write_r2cf (314285714, 100000000)

  # 22/7 = 3 + 1/7 = 3 + 0.142857...
  write_r2cf (3142857142857142857142857142857142857142857142857142857142857142857142857142857142857142857142857,
              1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
end

procedure write_r2cf (N1, N2)
  local sep, digit

  writes (N1, "/", N2, " => ")
  sep := "["
  every digit := r2cf (N1, N2) do {
    writes (sep, digit)
    sep := (if sep == "[" then "; " else ", ")
  }
  write ("]")
end

procedure r2cf (N1, N2)
  local q, r
  while N2 ~= 0 do {
    # We will use Icon's native version of integer division, which
    # rounds quotients towards zero, and so may return a negative
    # remainder.
    q := N1 / N2
    r := N1 % N2
    N1 := N2
    N2 := r
    suspend q
  }
end
