# This implementation assumes the I/O facilities of gfortran, and so
# is not suited to f2c as the FORTRAN77 compiler.

function r2cf (N1, N2)
  implicit none

  integer N1, N2
  integer r2cf

  integer r

  # We will use division with rounding towards zero, which is the
  # native integer division method of FORTRAN77.
  r2cf = N1 / N2
  r = mod (N1, N2)

  N1 = N2
  N2 = r
end

subroutine wrr2cf (N1, N2)      # Write r2cf results.
  implicit none

  integer N1, N2
  integer r2cf
  integer digit, M1, M2
  integer sep

  write (*, '(I0, "/", I0, " => ")', advance = "no") N1, N2

  M1 = N1
  M2 = N2
  sep = 0
  while (M2 != 0)
    {
      digit = r2cf (M1, M2)
      if (sep == 0)
        {
          write (*, '("[", I0)', advance = "no") digit
          sep = 1
        }
      else if (sep == 1)
        {
          write (*, '("; ", I0)', advance = "no") digit
          sep = 2
        }
      else
        {
          write (*, '(", ", I0)', advance = "no") digit
        }
    }
    write (*, '("]")', advance = "yes")
end

program demo
  implicit none

  call wrr2cf (1, 2)
  call wrr2cf (3, 1)
  call wrr2cf (23, 8)
  call wrr2cf (13, 11)
  call wrr2cf (22, 7)
  call wrr2cf (-151, 77)

  call wrr2cf (14142, 10000)
  call wrr2cf (141421, 100000)
  call wrr2cf (1414214, 1000000)
  call wrr2cf (14142136, 10000000)

  call wrr2cf (31, 10)
  call wrr2cf (314, 100)
  call wrr2cf (3142, 1000)
  call wrr2cf (31428, 10000)
  call wrr2cf (314285, 100000)
  call wrr2cf (3142857, 1000000)
  call wrr2cf (31428571, 10000000)
  call wrr2cf (314285714, 100000000)
end
