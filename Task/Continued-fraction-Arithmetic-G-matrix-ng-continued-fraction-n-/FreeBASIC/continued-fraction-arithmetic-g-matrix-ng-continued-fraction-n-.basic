Type NG
    As Integer a1, a, b1, b

    Declare Constructor(a1 As Integer, a As Integer, b1 As Integer, b As Integer)
    Declare Sub ingress(n As Integer)
    Declare Function needterm() As Integer
    Declare Function egress() As Integer
    Declare Function egress_done() As Integer
    Declare Function done() As Integer
End Type

Constructor NG(a1 As Integer, a As Integer, b1 As Integer, b As Integer)
    This.a1 = a1
    This.a = a
    This.b1 = b1
    This.b = b
End Constructor

Sub NG.ingress(n As Integer)
    Dim As Integer temp_a = This.a
    This.a = This.a1
    This.a1 = temp_a + This.a1 * n

    Dim As Integer temp_b = This.b
    This.b = This.b1
    This.b1 = temp_b + This.b1 * n
End Sub

Function NG.needterm() As Integer
    If (This.b = 0 Or This.b1 = 0) Then Return True
    If Not ((This.a \ This.b) = (This.a1 \ This.b1)) Then Return True
    Return False
End Function

Function NG.egress() As Integer
    Dim As Integer n = This.a \ This.b
    Dim As Integer temp_a = This.a
    This.a = This.b
    This.b = temp_a - This.b * n

    Dim As Integer temp_a1 = This.a1
    This.a1 = This.b1
    This.b1 = temp_a1 - This.b1 * n
    Return n
End Function

Function NG.egress_done() As Integer
    If This.needterm() Then
        This.a = This.a1
        This.b = This.b1
    End If
    Return This.egress()
End Function

Function NG.done() As Integer
    Return (This.b = 0 And This.b1 = 0)
End Function

Function divmod(n1 As Integer, n2 As Integer) As Integer Ptr
    Static result(1) As Integer
    result(0) = n1 \ n2
    result(1) = n1 Mod n2
    Return @result(0)
End Function

Function r2cf(n1 As Integer, n2 As Integer) As Integer Ptr
    Static result(99) As Integer
    Dim As Integer cnt = 0

    While n2 <> 0
        Dim As Integer Ptr t1_n2 = divmod(n1, n2)
        n1 = n2
        n2 = t1_n2[1]
        result(cnt) = t1_n2[0]
        cnt += 1
    Wend

    result(cnt) = -1 ' Mark end of array
    Return @result(0)
End Function

' Test cases
Type TestCase
    Dim As String expr
    Dim As Integer a1, a, b1, b, r1, r2

    Declare Constructor()
    Declare Constructor(e As String, _a1 As Integer, _a As Integer, _b1 As Integer, _b As Integer, _r1 As Integer, _r2 As Integer)
End Type

Constructor TestCase(e As String, _a1 As Integer, _a As Integer, _b1 As Integer, _b As Integer, _r1 As Integer, _r2 As Integer)
    This.expr = e
    This.a1 = _a1
    This.a = _a
    This.b1 = _b1
    This.b = _b
    This.r1 = _r1
    This.r2 = _r2
End Constructor

Dim As TestCase tests(2) => { _
TestCase("[1;5,2] + 1/2", 2, 1, 0, 2, 13, 11), _
TestCase("[3;7] + 1/2", 2, 1, 0, 2, 22, 7), _
TestCase("[3;7] divided by 4", 1, 0, 0, 4, 22, 7) }

For i As Integer = 0 To 2
    Print Right(Space(20) + tests(i).expr, 20); " -> ";

    Dim op As NG = NG(tests(i).a1, tests(i).a, tests(i).b1, tests(i).b)
    Dim As Integer Ptr cf = r2cf(tests(i).r1, tests(i).r2)

    Dim As Integer j = 0
    While cf[j] <> -1
        If Not op.needterm() Then Print op.egress();
        op.ingress(cf[j])
        j += 1
    Wend

    Do
        Print op.egress_done();
        If op.done() Then Exit Do
    Loop
    Print
Next

Sleep
