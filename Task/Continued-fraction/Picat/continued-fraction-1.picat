go =>

  % square root 2
  continued_fraction(200, sqrt_2_ab, V1),
  printf("sqrt(2) = %w (diff: %0.15f)\n", V1, V1-sqrt(2)),

  % napier
  continued_fraction(200, napier_ab, V2),
  printf("e       = %w (diff: %0.15f)\n", V2, V2-math.e),

  % pi
  continued_fraction(200, pi_ab, V3),
  printf("pi      = %w (diff: %0.15f)\n", V3, V3-math.pi),
  % get a better precision
  continued_fraction(20000, pi_ab, V3b),
  printf("pi      = %w (diff: %0.15f)\n", V3b, V3b-math.pi),
  nl.

continued_fraction(N, Compute_ab, V) ?=>
  continued_fraction(N,  Compute_ab, 0, V).

continued_fraction(0,  Compute_ab, Temp, V) ?=>
  call(Compute_ab, 0, A, _),
  V = A + Temp.

continued_fraction(N, Compute_ab, Tmp, V) =>
  call(Compute_ab, N, A, B),
  Tmp1 = B / (A + Tmp),
  N1 = N - 1,
  continued_fraction(N1, Compute_ab, Tmp1, V).

% definitions for square root of 2
sqrt_2_ab(0, 1, 1).
sqrt_2_ab(_, 2, 1).

% definitions for napier
napier_ab(0, 2, _).
napier_ab(1, 1, 1).
napier_ab(N, N, V) :-
	V is N - 1.

% definitions for pi
pi_ab(0, 3, _).
pi_ab(N, 6, V) :-
	V is (2 * N - 1)*(2 * N - 1).
