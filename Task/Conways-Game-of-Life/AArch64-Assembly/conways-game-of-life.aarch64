/* ARM assembly AARCH64 Raspberry PI 3B */
/*  program Conway's Game of Life   */

/*******************************************/
/* Constantes                              */
/*******************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeConstantesARM64.inc"
.equ SIZE, 3
/*******************************************/
/* macros                             */
/*******************************************/
//.include "../../ficmacros64.inc"            // for developper debugging

/*********************************/
/* Initialized data              */
/*********************************/
.data
szMessDebutPgm:       .asciz "Program 64 bits start. \n"
szCarriageReturn:     .asciz "\n"
szMessFinOK:          .asciz "Program normal end. \n"

/*********************************/
/* UnInitialized data            */
/*********************************/
.bss
sAreaConv:        .skip 24
startArea:        .skip SIZE *SIZE
runArea:          .skip SIZE *SIZE
.align 4

/*********************************/
/*  code section                 */
/*********************************/
.text
.global main
main:
    ldr x0,qAdrszMessDebutPgm
    bl affichageMess            // start message

    ldr x0,qAdrstartArea
    mov x1,1
    mov x2,1
    mov x3,0
    mov x5,SIZE                // init game
    mul x4,x5,x2
    strb w1,[x0,x4]           // 1 in position 0,1
    add x4,x4,1
    strb w1,[x0,x4]           // 1 in position 1,1
    add x4,x4,1
    strb w1,[x0,x4]           // 1 in position 2,1
    ldr x0,qAdrstartArea
    bl displayGame
    ldr x0,qAdrstartArea
    ldr x1,qAdrrunArea
    bl generer                // generate new area game
    ldr x0,qAdrrunArea
    bl displayGame
    ldr x0,qAdrrunArea
    ldr x1,qAdrstartArea
    bl generer                // generate new area game
    ldr x0,qAdrstartArea
    bl displayGame

    ldr x0,qAdrszMessFinOK
    bl affichageMess

100:
   mov x8,EXIT
    svc #0                      // system call
qAdrszMessDebutPgm:          .quad szMessDebutPgm
qAdrszMessFinOK:             .quad szMessFinOK
qAdrszCarriageReturn:        .quad szCarriageReturn
qAdrsAreaConv:               .quad sAreaConv
qAdrstartArea:               .quad startArea
qAdrrunArea:                 .quad runArea
/******************************************************************/
/*            display area game                                      */
/******************************************************************/
/* x0 contains address area game  */
/* x1 contains address result area */
generer:
    stp x1,lr,[sp,-16]!
    mov x6,x0
    mov x9,x1
    mov x7,SIZE
    mov x4,0             // Y
1:
    mov x5,0             // X
2:
    mov x0,x6
    mov x1,x5
    mov x2,x4
    bl computeCell       // compute cell value
    mul x8,x4,x7
    add x8,x8,x5
    ldrb w1,[x6,x8]      // read status cell
    mov x2,1
    cmp x0,2             // 2 -> live
    csel x0,x1,x0,eq
    beq 3f
    cmp x0,3             // 3 -> live or birth
    csel x0,x2,x0,eq
    beq 3f
    mov x0,0             // else dead
3:
    strb w0,[x9,x8]      // store new status cell

    add x5,x5,1
    cmp x5,SIZE
    blt 2b
    add x4,x4,1
    cmp x4,SIZE
    blt 1b


100:
    ldp x1,lr,[sp],16         // TODO: a completer
    ret

/******************************************************************/
/*            display area game                                      */
/******************************************************************/
/* x0 contains address area game  */
displayGame:
    stp x1,lr,[sp,-16]!
    mov x8,SIZE+2
    lsr x8,x8,4
    add x8,x8,1
    lsl x8,x8,4
    sub sp,sp,x8
    mov fp,sp
    mov x6,x0
    mov x1,0
    mov x3,SIZE
    mov x7,'.'
    mov x9,'X'
1:
    mov x2,0
2:
    mul x4,x1,x3
    add x4,x4,x2
    ldrb w5,[x6,x4]
    cmp w5,0
    csel x5,x7,x9,eq
    strb w5,[fp,x2]
    add x2,x2,1
    cmp x2,SIZE
    blt 2b
    mov x5,'\n'
    strb w5,[fp,x2]
    add x2,x2,1
    strb wzr,[fp,x2]         // 0 final
    mov x0,fp
    bl affichageMess
    add x1,x1,1
    cmp x1,SIZE
    blt 1b
    ldr x0,qAdrszCarriageReturn
    bl affichageMess

100:
    add sp,sp,x8             // free reserved area
    ldp x1,lr,[sp],16
    ret
/******************************************************************/
/*            compute cell score                                      */
/******************************************************************/
/* x0 contains address game area   */
/* x1 contains position X  */
/* x2 contains position Y  */
computeCell:
    stp x1,lr,[sp,-16]!
    stp x2,x3,[sp,-16]!
    stp x4,x5,[sp,-16]!
    stp x6,x7,[sp,-16]!
    stp x8,x9,[sp,-16]!
    mov x10,0          // score
    mov x9,SIZE
    cmp x2,0           // y =0
    beq 2f
    cmp x1,0           // x = 0
    beq 1f
    sub x3,x1,1         // pos X - 1
    sub x4,x2,1         // pos Y -1
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
1:
    mov x3,x1           // pos X pos y -1
    sub x4,x2,1         // pos Y -1
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
    cmp x1,SIZE-1
    beq 2f
    sub x4,x2,1         // pos Y -1
    add x3,x1,1         // pos X+1 pos y -1
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
2:
    cbz x1,3f
    sub x3,x1,1
    mov x4,x2           // pos X-1 pos y
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
 3:
    cmp x1,SIZE-1
    beq 4f
    add x3,x1,1
    mov x4,x2           // pos X+1 pos y
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
4:
    cmp x2,SIZE-1
    beq 6f
    cbz x1,5f
    sub x3,x1,1
    add x4,x2,1           // pos X-1 pos y+1
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
 5:
    mov x3,x1
    add x4,x2,1           // pos X pos y+1
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
    cmp x1,SIZE-1
    beq 6f
    add x3,x1,1
    add x4,x2,1           // pos X+1 pos y+1
    mul x5,x4,x9
    add x5,x5,x3        // compute indice
    ldrb w6,[x0,x5]
    add x10,x10,x6
6:
    mov x0,x10          // return total

100:
    ldp x8,x9,[sp],16
    ldp x6,x7,[sp],16
    ldp x4,x5,[sp],16
    ldp x2,x3,[sp],16
    ldp x1,lr,[sp],16
    ret

/***************************************************/
/*      ROUTINES INCLUDE                 */
/***************************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeARM64.inc"
