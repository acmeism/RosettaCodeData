(import std.List)
(import std.String)
(import std.Switch)

(let board [0 0 0 1 1 1 0 0 0])
(let width 3)
(let height 3)
(let dead 0)
(let alive 1)

(let get (fun (board_ x y)
  (if (and (>= x 0) (>= y 0) (< x width) (< y height))
    (@ board_ (+ x (* y width)))
    dead)))

(let neigh (fun (board_ index) {
  (let x (math:floor (mod index width)))
  (let y (math:floor (/ index width)))
  (+
    (get board_ (- x 1) y)
    (get board_ (+ x 1) y)
    (get board_ x (- y 1))
    (get board_ x (+ y 1))
    (get board_ (- x 1) (- y 1))
    (get board_ (+ x 1) (- y 1))
    (get board_ (- x 1) (+ y 1))
    (get board_ (+ x 1) (+ y 1))) }))

(let indices (list:iota 0 (* height width)))
(let update (fun (board) {
  (mut copy (list:fill (* height width) dead))

  (list:forEach indices
    (fun (i) {
      (let neighs (neigh board i))
      (switch neighs
        2 (@= copy i (@ board i))
        3 (@= copy i alive)
        _ (@= copy i dead)) }))

  copy }))

(let display (fun (board width height)
  (print (string:join
    (list:map
      (list:chunkBy
        (list:map board
          (fun (cell)
            (if (= alive cell) "x" "â€¢")))
        3)
      (fun (sublist)
        (string:join sublist "")))
    "\n"))))

(print "initial board:")
(display board width height)

(print "\ngen 2:")
(mut new (update board))
(display new width height)

(print "\ngen 3:")
(set new (update new))
(display new width height)

(print "\ngen 4:")
(set new (update new))
(display new width height)
