import extensions;
import system'threading;
import system'text;
import cellular;

const int maxX = 48;
const int maxY = 28;

const int DELAY = 50;

sealed class Model
{
   Space   _space;
   RuleSet _ruleSet;
   bool    _started;

   Func<Space, object> OnUpdate : event;

   constructor newRandomset(RuleSet transformSet)
   {
      _space := IntMatrixSpace.allocate(maxY, maxX, randomSet);

      _ruleSet := transformSet;

      _started := false
   }

   private onUpdate()
   {
      OnUpdate.?(_space)
   }

   run()
   {
      if (_started)
      {
         _space.update(_ruleSet)
      }
      else
      {
         _started := true
      };

      self.onUpdate()
   }
}

singleton gameOfLifeRuleSet : RuleSet
{
   int proceed(Space s, int x, int y)
   {
      int cell := s.at(x, y);
      int number := s.LiveCell(x, y, 1); // NOTE : number of living cells around the self includes the cell itself

      if (cell == 0 && number == 3)
      {
         ^ 1
      }
      else if (cell == 1 && (number == 4 || number == 3))
      {
         ^ 1
      }
      else
      {
         ^ 0
      }
   }
}

public extension presenterOp : Space
{
   print()
   {
      Console.setCursorPosition(0, 0);

      int columns := self.Columns;
      int rows := self.Rows;

      auto line := new TextBuilder();
      for(int i := 0; i < rows; i += 1)
      {
         line.clear();
         for(int j := 0; j < columns; j += 1)
         {
            int cell := self.at(i, j);

            line.write((cell == 0).iif(" ","o"));
         };

         Console.writeLine(line.Value)
      }
   }
}

public program()
{
    auto model := Model.newRandomset(gameOfLifeRuleSet);
    Console.clear();

    model.OnUpdate := (Space sp){ sp.print() };

    until (Console.KeyAvailable)
    {
        model.run();

        threadControl.sleep(DELAY)
    };

    Console.readChar()
}
