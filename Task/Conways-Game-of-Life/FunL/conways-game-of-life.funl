import lists.zipWithIndex
import util.Regex

data Rule( birth, survival )

val Mirek = Regex( '([0-8]+)/([0-8]+)' )
val Golly = Regex( 'B([0-8]+)/S([0-8]+)' )

def decode( rule ) =
  def makerule( b, s ) = Rule( [int(d) | d <- b], [int(d) | d <- s] )

  case rule
    Mirek( s, b ) -> makerule( b, s )
    Golly( b, s ) -> makerule( b, s )
    _ -> error( "unrecognized rule: $rule" )

def fate( state, crowding, rule ) = crowding in rule( int(state) )

def crowd( buffer, x, y ) =
  res = 0

  def neighbour( x, y ) =
    if x >= 0 and x < N and y >= 0 and y < N
      res += int( buffer(x, y) )

  for i <- x-1..x+1
    neighbour( i, y - 1 )
    neighbour( i, y + 1 )

  neighbour( x - 1, y )
  neighbour( x + 1, y )
  res

def display( buffer ) =
  for j <- 0:N
    for i <- 0:N
      print( if buffer(i, j) then '*' else '\u00b7' )

    println()

def generation( b1, b2, rule ) =
  for i <- 0:N, j <- 0:N
    b2(i, j) = fate( b1(i, j), crowd(b1, i, j), rule )

def pattern( p, b, x, y ) =
  for (r, j) <- zipWithIndex( list(WrappedString(p).stripMargin().split('\n')).drop(1).dropRight(1) )
    for i <- 0:r.length()
      b(x + i, y + j) = r(i) == '*'

var current = 0
val LIFE = decode( '23/3' )
val N = 4
val buffers = (array( N, N, (_, _) -> false ), array( N, N ))

def reset =
  for i <- 0:N, j <- 0:N
    buffers(0)(i, j) = false

  current = 0

def iteration =
  display( buffers(current) )
  generation( buffers(current), buffers(current = (current + 1)%2), LIFE )
  println( 5'-' )

// two patterns to be tested
blinker = '''
  |
  |***
  '''

glider = '''
  | *
  |  *
  |***
  '''

// load "blinker" pattern and run for three generations
pattern( blinker, buffers(0), 0, 0 )

repeat 3
  iteration()

// clear grid, load "glider" pattern and run for five generations
reset()
pattern( glider, buffers(0), 0, 0 )

repeat 5
  iteration()
