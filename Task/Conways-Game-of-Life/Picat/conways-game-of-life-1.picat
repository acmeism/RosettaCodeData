go =>
   Rows = 3,
   Cols = 3,
   println(blinker),
   pattern(blinker, Pattern,I,J),
   life(fill(Rows,Cols,Pattern,I,J)),
   nl.

fill(Rows, Cols, Obj) = fill(Rows, Cols, Obj,1,1).
fill(Rows, Cols, Obj,OffsetI,OffsetJ) = Grid =>
   Grid = new_array(Rows,Cols), bind_vars(Grid,0),
   foreach(I in 1..Obj.length, J in 1..Obj[1].length)
     Grid[I+OffsetI-1,J+OffsetJ-1] := Obj[I,J]
   end.

% We stop whenever a fixpoint/cycle is detected
life(S) =>
    Rows = S.length,
    Cols = S[1].length,
    println([rows=Rows, cols=Cols]),
    print_grid(S),
    Seen = new_map(), % detect fixpoint and cycle
    Count = 0,
    while (not Seen.has_key(S))
       Seen.put(S,1),
       T = new_array(Rows,Cols),
       foreach(I in 1..Rows, J in 1..Cols)
           Sum = sum([S[I+A,J+B] : A in -1..1,B in -1..1,
                                   I+A > 0, J+B > 0,
                                   I+A =< Rows, J+B =< Cols]) - S[I,J],
           C = rules(S[I,J], Sum),
           T[I,J] := C
       end,
       print_grid(T),
       S := T,
       Count := Count + 1
    end,
    printf("%d generations\n", Count).

print_grid(G) =>
  foreach(I in 1..G.length)
     foreach(J in 1..G[1].length)
        if G[I,J] == 1 then print("#") else print(".") end
     end,
     nl
  end,
  nl.

% The Rules of Life
rules(This,Sum) = 1, (This == 1, member(Sum,[2,3]); This == 0, Sum == 3) => true.
rules(_This, _Sum) = 0 => true.

%
% The patterns
%   pattern(Name, Pattern, OffsetI, OffsetJ)
% where Offset* is the recommended offsets in a grid.
%

% For the task
pattern(blinker, Pattern,I,J) ?=>
   Pattern = [[0,0,0],
              [1,1,1],
              [0,0,0]],
   I=1,J=1.
