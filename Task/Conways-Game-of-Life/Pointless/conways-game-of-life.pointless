-----------------------------------------------------------
-- Print 100 simulated states of conway's game of life
-- for a glider starting pattern on a wrapping grid
-- Print generation number along with cells

output =
  initCells
  |> iterate(updateCells)
  |> take(130)
  |> enumerate
  |> map(showPair)
  |> printFrames

initCells =
 [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]

width  = length(initCells[0])
height = length(initCells)

positions =
  for y in range(0, height - 1)
  for x in range(0, width - 1)
  yield (x, y)

-----------------------------------------------------------
-- Update each cell in the grid according to its position,
-- and convert the resulting list back to a 2D array

updateCells(cells) =
  positions
  |> map(tick(cells))
  |> toNDArray((height, width))

-----------------------------------------------------------
-- Get the new value for a cell at a give position
-- based on the current cell values in the grid

tick(cells, pos) = toInt(survive or birth) where {
  survive = cells[y][x] == 1 and count in {2, 3}
  birth   = cells[y][x] == 0 and count == 3
  count   = getCount(x, y, cells)
  (x, y)  = pos
}

-----------------------------------------------------------
-- Get the number of live neighbors of a given position

getCount(x, y, cells) = sum(
  for dx in [-1, 0, 1]
  for dy in [-1, 0, 1]
  when (dx != 0 or dy != 0)
  yield getNeighbor(x + dx, y + dy, cells)
)

getNeighbor(x, y, cells) = cells[y % height][x % width]

-----------------------------------------------------------
-- Print the board and generation number given pairs
-- of (gen, cells) from the enumerate function

showPair(pair) =
  format("{}\ngeneration: {}", [showCells(cells), gen])
  where (gen, cells) = pair

showCells(cells) =
  toList(cells)
  |> map(showRow)
  |> join("\n")

showRow(row) =
  format("|{}|", [map(showCell, toList(row)) |> join("")])

showCell(cell) =
  if cell == 1 then "*" else " "
