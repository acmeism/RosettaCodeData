boolean play = true;
int cellSize = 10;
int cols, rows;
int lastCell = 0;
int sample = 10;
// Game of life board
int[][] grid;

void setup() {
  size(800, 500);
  noStroke();
  // Calculate cols, rows and init array
  cols = width/cellSize;
  rows = height/cellSize;
  grid = new int[cols][rows];
  init(-1); // randomized start

  println("Press 'space' to start/stop");
  println("'e' to clear all cells");
  println("'b' demonstrate 'blinker'");
  println("'g' demonstrate glider");
  println("'r' to randomize grid");
  println("'+'  and '-' to change speed");

}

void draw() {
  background(0);

  for ( int i = 0; i < cols; i++) {
    for ( int j = 0; j < rows; j++) {
      if ((grid[i][j] == 1)) fill(255);
      else fill(0);
      rect(i*cellSize, j*cellSize, cellSize, cellSize);
    }
  }
  if (play && frameCount%sample==0 && !mousePressed) {
    generate();
  }
}

void generate() {
  int[][] nextGrid = new int[cols][rows];
  for (int x = 0; x < cols; x++) {
    for (int y = 0; y < rows; y++) {
      int ngbs = countNgbs(x, y);
      // the classic Conway rules
      if      ((grid[x][y] == 1) && (ngbs <  2)) nextGrid[x][y] = 0; // solitude
      else if ((grid[x][y] == 1) && (ngbs >  3)) nextGrid[x][y] = 0; // crowded
      else if ((grid[x][y] == 0) && (ngbs == 3)) nextGrid[x][y] = 1; // cell born
      else                              nextGrid[x][y] = grid[x][y]; // keep
    }
  }
  grid = nextGrid;
}

int countNgbs(int x, int y) {
  int ngbCount = 0;
  for (int i = -1; i <= 1; i++) {
    for (int j = -1; j <= 1; j++) {
      // 'united' borders
      ngbCount += grid[(x+i+cols)%cols][(y+j+rows)%rows];
    }
  }
  // cell taken out of count
  ngbCount -= grid[x][y];
  return ngbCount;
}

void init(int option) {
  int state;
  for (int x = 0; x < cols; x++) {
    for (int y = 0; y < rows; y++) {
      if (option == -1) {
        state = int(random(2));
      } else {
        state = option;
      }
      grid[x][y] = state;
    }
  }
}

void keyReleased() {
  if (key == 'r') {
    init(-1); // randomize grid
  }
  if (key == 'e') {
    init(0); // empty grid
  }
  if (key == 'g') {
    int glider[][] = {
      {0, 1, 0},
      {0, 0, 1},
      {1, 1, 1}};
    setNine(10, 10, glider);
  }
  if (key == 'b') {
    int blinker[][] = {
      {0, 1, 0},
      {0, 1, 0},
      {0, 1, 0}};
    setNine(10, 10, blinker);
  }
  if (key == ' ') {
    play = !play;
  }
  if (key == '+' || key == '=') {
    sample=max(sample-1, 1);
  }
  if (key == '-') {
    sample++;
  }
}

void setNine(int x, int y, int nine[][]) {
  for (int i = 0; i <= 2; i++) {
    for (int j = 0; j <= 2; j++) {
      grid[(x+i+cols)%cols][(y+j+rows)%rows] = nine[i][j];
    }
  }
}

void mousePressed() {
  paint();
}
void mouseDragged() {
  paint();
}

void paint() {
  int x = mouseX/cellSize;
  int y = mouseY/cellSize;
  int p = y*cols + x;
  if (p!=lastCell) {
    lastCell=p;
    int states[] = {1, 0};
    grid[x][y] = states[grid[x][y]]; // invert
  }
}
