  [ [] 95 times
    [ i^ space +
      join ] ]         constant is alphabet     (         --> $       )

  [ [ 2dup != while
      -1 split drop
      swap 1 split
      unrot drop again ]
    drop size ]                 is overlap      (     [ [ --> n       )

  [ temp put [] swap
    alphabet witheach
      [ over -1 poke
        over overlap
        dup temp share
        = if negate
        swap dip join ]
    drop temp release ]         is eachend      (     [ n --> [       )

  [ [] swap
    dup temp put
    size times
      [ temp share
        i 1+ split drop
        temp share size eachend
        nested swap join ]
    temp release ]              is buildfsm     (       $ --> [       )

  [ dup [] = iff -1
    else
      [ behead
        dup carriage = if
          [ drop space ]
        space - ]
    swap ]                      is nextcharn    (       $ --> n $     )

  [ swap dup size
    swap temp put
    swap 0
    [ over swap peek
      temp take
      nextcharn
      temp put
      dup 0 < iff
        [ 2drop 0 ] done
      peek
      dup 0 < until ]
    nip
    temp take size - + ]        is usefsm       (     $ [ --> n       )

  [ over size 0 = iff
      [ 2drop 0 ]
    else
      [ swap buildfsm
        usefsm ] ]              is find$        (     $ $ --> n       )
