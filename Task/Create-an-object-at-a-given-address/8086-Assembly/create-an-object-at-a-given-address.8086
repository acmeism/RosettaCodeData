.model small                             ;specify memory model to use
.stack 1024                              ;set up stack

.data                                    ;data segment

UserRam BYTE 256 DUP (0)                 ;allocate 256 bytes of user RAM, initialized to zero.

tempByte equ UserRam                     ;define a few labels for clarity
tempWord equ UserRam+2
tempLong_LoWord equ UserRam+4
tempLong_HiWord equ UserRam+6

.code                                    ;code segment

mov ax, @data
mov ds, ax

mov ax, @code
mov es, ax                               ;load segment registers with the appropriate segments.

; now there is no need to use "mov ax, seg UserRam" since we've already loaded the data segment into DS


;store an integer value into memory

mov ax, 1000h                            ;load the value 0x1000 into AX
mov word ptr [ds:tempLong_LoWord],ax     ;store 0x1000 into tempLong_LoWord
mov ax, 0040h                            ;the 8086 is 16-bit so we have to load the pieces separately.
mov word ptr [ds:tempLong_HiWord],ax     ;store 0x0040 into tempLong_HiWord

;get the address of a variable
mov ax, tempLong_LoWord                  ;without "word ptr" and brackets, the assembler interprets a label as a constant.
