V digits = ‘0123456789’

F deBruijn(k, n)
   V alphabet = :digits[0 .< k]
   V a = [Byte(0)] * (k * n)
   [Byte] seq

   F db(Int t, Int p) -> N
      I t > @n
         I @n % p == 0
            @seq.extend(@a[1 .< p + 1])
      E
         @a[t] = @a[t - p]
         @db(t + 1, p)
         V j = @a[t - p] + 1
         L j < @k
            @a[t] = j [&] F'F
            @db(t + 1, t)
            j++

   db(1, 1)
   V buf = ‘’
   L(i) seq
      buf ‘’= alphabet[i]

   R buf‘’buf[0 .< n - 1]

F validate(db)
   V found = [0] * 10'000
   [String] errs

   L(i) 0 .< db.len - 3
      V s = db[i .< i + 4]
      I s.is_digit()
         found[Int(s)]++

   L(i) 10'000
      I found[i] == 0
         errs [+]= ‘    PIN number #04 missing’.format(i)
      E I found[i] > 1
         errs [+]= ‘    PIN number #04 occurs #. times’.format(i, found[i])

   I errs.empty
      print(‘  No errors found’)
   E
      V pl = I errs.len == 1 {‘’} E ‘s’
      print(‘  ’String(errs.len)‘ error’pl‘ found:’)
      L(err) errs
         print(err)

V db = deBruijn(10, 4)

print(‘The length of the de Bruijn sequence is ’db.len)
print("\nThe first 130 digits of the de Bruijn sequence are: "db[0.<130])
print("\nThe last 130 digits of the de Bruijn sequence are: "db[(len)-130..])

print("\nValidating the deBruijn sequence:")
validate(db)

print("\nValidating the reversed deBruijn sequence:")
validate(reversed(db))

db[4443] = ‘.’
print("\nValidating the overlaid deBruijn sequence:")
validate(db)
