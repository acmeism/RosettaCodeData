; Linear congruential random number generator
make "_lcg_state 0

to seed_lcg :seed
  make "_lcg_state :seed
end

to sample_lcg
  make "_lcg_state modulo sum product 214013 :_lcg_state 2531011 2147483648
  output int quotient :_lcg_state 65536
end

; FreeCell
to card_from_number :number
  output word item sum 1 int quotient :number 4 "A23456789TJQK item sum 1 modulo :number 4 "CDHS
end

to generate_deal :number
  (local "deck "size "index "deal)
  seed_lcg :number
  make "deck []
  repeat 52 [
    make "deck lput difference # 1 :deck
  ]
  make "deck listtoarray :deck
  make "deal []
  repeat 52 [
    make "size difference 53 #
    make "index sum 1 modulo sample_lcg :size
    make "deal lput item :index :deck :deal
    setitem :index :deck item :size :deck
  ]
  output :deal
end

to print_deal :number
  (local "deal "i "j "index)
  make "deal generate_deal :number
  repeat 7 [
    make "i difference # 1
    repeat (ifelse [equal? :i 6] 4 8) [
      make "j difference # 1
      make "index (sum 1 product :i 8 :j)
      type (word (card_from_number item :index :deal) "| |)
    ]
    print "||
  ]
end

print [Game #1]
print_deal 1
print "||
print [Game #617]
print_deal 617
print "||
bye
