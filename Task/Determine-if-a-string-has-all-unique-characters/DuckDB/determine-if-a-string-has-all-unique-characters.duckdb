create or replace table strings as values
  (''),
  ('.'),
  ('abcABC'),
  ('XYZ ZYX'),
  ('1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ'),
  ('😍😀🙌💃😍🙌') ;

create or replace function list_all_distinct(lst) as (
  length(lst) = length(list_distinct(lst))
);

# Return {n, m} where n and m are respectively the first and second indices of the
# first non-unique character in str, IO=1, else NULL
create or replace function describe_first_duplicate(str) as (
  with recursive cte as (
    select str[1] as c, 2 as n, 0 as m
    union all
    select str[n] as c, n+1 as n, position(c in str[n:]) as m
    from cte
    where m = 0 and n <= length(str)
  )
  select {n: (n-2), m: (m+n-2)}
  from cte where m != 0
  limit 1
);

## The task:
WITH cte as (
  select string, describe_first_duplicate(string) as first_duplicate
  from strings t(string)
  )
  select string,
         length(string) as length,
         if(first_duplicate is null, null, string[first_duplicate['n']]) as "duplicated",
         if(first_duplicate is null, null, hex(string[first_duplicate['n']])) as "hex",
         first_duplicate as "first two indices"
  from cte;
