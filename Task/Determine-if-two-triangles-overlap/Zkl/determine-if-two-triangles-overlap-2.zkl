fcn toTri(ax,ay,bx,by,cx,cy){ //-->( (ax,ay),(bx,by),(cx,cy) )
   vm.arglist.apply("toFloat").pump(List,Void.Read)
}
triangles:=T(	// pairs of triangles
   T(toTri(0,0, 5,0, 0,  5), toTri(  0,0,  5,   0,  0,6)),
   T(toTri(0,0, 0,5, 5,  0), toTri(  0,0,  0,   5 , 5,0)),
   T(toTri(0,0, 5,0, 0,  5), toTri(-10,0, -5,   0, -1,6)),
   T(toTri(0,0, 5,0, 2.5,5), toTri(  0,4,  2.5,-1,  5,4)),
   T(toTri(0,0, 1,1, 0,  2), toTri(  2,1,  3,   0,  3,2)),
   T(toTri(0,0, 1,1, 0,  2), toTri(  2,1,  3,  -2,  3,4))
);

  // Expect: overlap, overlap (reversed), no overlap, overlap, no overlap, no overlap
foreach t1,t2 in (triangles){
   reg r, reversed=False;
   try{ r=triTri2D(t1,t2) }
   catch(AssertionError){ r=triTri2D(t1,t2,0.0,True); reversed=True; }
   print(t1,"\n",t2," ");
   println(r and "overlap" or "no overlap", reversed and " (reversed)" or "");
   println();
}

c1,c2 := toTri(0,0, 1,0, 0,1), toTri(1,0, 2,0, 1,1);
println("Corner case (barely touching): ",triTri2D(c1,c2,0.0,False,True));  // True
println("Corner case (barely touching): ",triTri2D(c1,c2,0.0,False,False)); // False
