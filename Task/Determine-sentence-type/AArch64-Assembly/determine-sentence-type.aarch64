/* ARM assembly AARCH64 Raspberry PI 3B */
/*  program detertype64.s   */


/*******************************************/
/* Constantes                              */
/*******************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeConstantesARM64.inc"

.equ BUFFERSIZE,    160
.equ SENTENCESTART,  3
/*******************************************/
/*   Macros                              */
/*******************************************/
//.include "../../ficmacros64.inc"            // for developer debugging

/*********************************/
/* Initialized data              */
/*********************************/
.data
szMessDebutPgm:   .asciz "Program 64 bits start. \n"
szCarriageReturn: .asciz "\n"
szMessFinOK:      .asciz "Program normal end. \n"
szMessErreur:     .asciz "Error  !!!\n"
szSpace1:         .asciz " "

szPhrase1:          .ascii "hi there, how are you today?"
                    .ascii "I'd like to present to you the washing machine 9001."
                    .ascii " You have been nominated to win one of these!"
                    .asciz " Just make sure you don't break it"
.equ LGPHRASE1,  . -  szPhrase1 - 1


/*********************************/
/* UnInitialized data            */
/*********************************/
.bss
.align 4

/*********************************/
/*  code section                 */
/*********************************/
.text
.global main
main:
    ldr x0,qAdrszMessDebutPgm
    bl affichageMess               // start message
    sub sp,sp,#BUFFERSIZE
    mov x7,sp
    ldr x4,qAdrszPhrase1            // load phrase adress
    mov x5,#0
    mov x6,#SENTENCESTART
1:
    ldrb w1,[x4,x5]
    strb w1,[x7,x6]
    add x6,x6,#1
    cmp x1,#0
    beq 10f
    cmp x1,#'.'
    mov x2,#'S'
    beq 2f
    cmp x1,#'?'
    mov x2,#'Q'
    beq 2f
    cmp x1,#'!'
    mov x2,#'E'
    beq 2f

    add x5,x5,#1
    b 1b
 2:
    mov x0,x7
    mov x1,x6
    bl traitResult
    mov x6,#SENTENCESTART
    add x5,x5,#1
    b 1b

10:
    cmp x6,#SENTENCESTART
    beq 11f
    mov x0,x7
    mov x2,#'N'
    sub x1,x6,#1
    bl traitResult
11:
    ldr x0,qAdrszMessFinOK
    bl affichageMess
    b 100f
99:
    ldr x0,qAdrszMessErreur        // error
    bl affichageMess
    mov x0, #1                     // return code error
    b 100f
100:
    add sp,sp,#BUFFERSIZE
    mov x8,EXIT
    svc #0                         // system call
qAdrszMessDebutPgm:          .quad szMessDebutPgm
qAdrszMessFinOK:             .quad szMessFinOK
qAdrszMessErreur:            .quad szMessErreur
qAdrszPhrase1:               .quad szPhrase1
/***************************************************/
/*   display result                  */
/***************************************************/
/* x0 contains buffer address  */
/* x1 contains buffer length */
/* x2 contains characters type */
traitResult:
    stp x3,lr,[sp,-16]!         // save  registers
    mov x3,#0x0A        // return line
    strb w3,[x0,x1]
    add x1,x1,#1
    mov x3,#0
    strb w3,[x0,x1]     // final zero
    strb w2,[x0]        // store character type
    mov x3,#':'
    strb w3,[x0,#1]
    mov x3,#' '
    strb w3,[x0,#2]
    bl affichageMess

 100:                   // end function
    ldp x3,lr,[sp],16         // restaur  registers
    ret

/***************************************************/
/*      ROUTINES INCLUDE                 */
/***************************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeARM64.inc"
