/* ARM assembly Raspberry PI  */
/*  program detertype.s   */

/* REMARK 1 : this program use routines in a include file
   see task Include a file language arm assembly
   for the routine affichageMess conversion10
   see at end of this program the instruction include */

/*******************************************/
/* Constantes                              */
/*******************************************/
.include "../constantes.inc"

.equ BUFFERSIZE,    200
.equ SENTENCESTART,  3
/*******************************************/
/*   Macros                              */
/*******************************************/
//.include "../../ficmacros32.inc"            @ for developer debugging

/*********************************/
/* Initialized data              */
/*********************************/
.data
szMessDebutPgm:   .asciz "Program 32 bits start. \n"
szCarriageReturn: .asciz "\n"
szMessFinOK:      .asciz "Program normal end. \n"
szMessErreur:     .asciz "Error  !!!\n"
szSpace1:         .asciz " "

szPhrase1:          .ascii "hi there, how are you today?"
                    .ascii "I'd like to present to you the washing machine 9001."
                    .ascii " You have been nominated to win one of these!"
                    .asciz " Just make sure you don't break it"
.equ LGPHRASE1,  . -  szPhrase1 - 1


/*********************************/
/* UnInitialized data            */
/*********************************/
.bss
.align 4

/*********************************/
/*  code section                 */
/*********************************/
.text
.global main
main:
    ldr r0,iAdrszMessDebutPgm
    bl affichageMess               @ start message
    sub sp,sp,#BUFFERSIZE
    mov r7,sp
    ldr r4,iAdrszPhrase1            @ load phrase adress
    mov r5,#0
    mov r6,#SENTENCESTART
1:
    ldrb r1,[r4,r5]
    strb r1,[r7,r6]
    add r6,r6,#1
    cmp r1,#0
    beq 10f
    cmp r1,#'.'
    moveq r2,#'S'
    beq 2f
    cmp r1,#'?'
    moveq r2,#'Q'
    beq 2f
    cmp r1,#'!'
    moveq r2,#'E'
    beq 2f

    add r5,r5,#1
    b 1b
 2:
    mov r0,r7
    mov r1,r6
    bl traitResult
    mov r6,#SENTENCESTART
    add r5,r5,#1
    b 1b

10:
    cmp r6,#SENTENCESTART
    beq 11f
    mov r0,r7
    mov r2,#'N'
    sub r1,r6,#1
    bl traitResult
11:
    ldr r0,iAdrszMessFinOK
    bl affichageMess
    b 100f
99:
    ldr r0,iAdrszMessErreur        @ error
    bl affichageMess
    mov r0, #1                     @ return code error
    b 100f
100:
    add sp,sp,#BUFFERSIZE
    mov r7,#EXIT                   @ program end
    svc #0                         @ system call
iAdrszMessDebutPgm:          .int szMessDebutPgm
iAdrszMessFinOK:             .int szMessFinOK
iAdrszMessErreur:            .int szMessErreur
iAdrszPhrase1:               .int szPhrase1
/***************************************************/
/*   display result                  */
/***************************************************/
/* r0 contains buffer address  */
/* r1 contains buffer length */
/* r2 contains characters type */
traitResult:
    push {r3,lr}        @ save registers
    mov r3,#0x0A        @ return line
    strb r3,[r0,r1]
    add r1,r1,#1
    mov r3,#0
    strb r3,[r0,r1]     @ final zero
    strb r2,[r0]        @ store character type
    mov r3,#':'
    strb r3,[r0,#1]
    mov r3,#' '
    strb r3,[r0,#2]
    bl affichageMess

 100:                   @ end function
    pop {r3,pc}         @ restaur registers

/***************************************************/
/*      ROUTINES INCLUDE                 */
/***************************************************/
.include "../affichage.inc"
