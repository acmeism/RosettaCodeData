include "cowgol.coh";

sub pow(base: uint8, exp: uint8): (power: uint32) is
    power := 1;
    while exp > 0 loop
        power := power * base as uint32;
        exp := exp - 1;
    end loop;
end sub;

sub digit_power_sum(n: uint32): (dps: uint32) is
    var digits: uint8[10]; # 2**32 has 10 digits
    var digit := &digits[0];
    var length: uint8 := 0;

    while n > 0 loop
        [digit] := (n % 10) as uint8;
        digit := @next digit;
        length := length + 1;
        n := n / 10;
    end loop;

    dps := 0;
    var power: uint8 := 1;
    while power <= length loop
        digit := @prev digit;
        dps := dps + pow([digit], power);
        power := power + 1;
    end loop;
end sub;

var amount: uint8 := 19;
var candidate: uint32 := 0;
while amount > 0 loop
    if digit_power_sum(candidate) == candidate then
        amount := amount - 1;
        print_i32(candidate);
        print_nl();
    end if;
    candidate := candidate + 1;
end loop;
