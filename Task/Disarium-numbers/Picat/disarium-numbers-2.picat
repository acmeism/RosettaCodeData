import sat.
% import cp.

main =>
  D = [],
  Limit = 19,
  Base = 10,
  foreach(Len in 1..20, D.len < Limit)
     Nums = disarium_number_cp(Len,Base),
     if Nums.len > 0 then
       foreach(Num in Nums)
         B = to_radix_string(Num,Base),
         D := D ++ [B]
       end
     end
  end,
  printf("The first %d Disarius numbers in base %d:\n",D.len, Base),
  println(D[1..Limit]),
  nl.

% Find all Disarium of a certain length
disarium_number_cp(Len,Base) = findall(N,disarium_number_cp(Len,Base,N)).sort.

% Find a Disarium number of a certain length
disarium_number_cp(Len,Base,N) =>
  X = new_list(Len),
  X :: 0..Base-1,
  N :: Base**(Len-1)-1..Base**Len-1,
  N #= sum([X[I]**I : I in 1..Len]),
  to_num(X,Base,N), % convert X <=> N
  solve($[],X++[N]).

% Converts a number Num to/from a list of integer List given a base Base
to_num(List, Base, Num) =>
   Len = length(List),
   Num #= sum([List[I]*Base**(Len-I) : I in 1..Len]).
