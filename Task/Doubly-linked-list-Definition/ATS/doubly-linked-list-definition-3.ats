#include "share/atspre_staload.hats"

staload "dllist.sats"
staload _ = "dllist.dats"

(* Using macdefs as follows, rather than implementing compiled
   functions in terms of the templates, means the templates will be
   expanded each time you call the macro. You may or may not wish
   this. You *might* get big code that optimizes well. *)

typedef dl_t = dllist_t int

macdef dlmake = dllist_t_make<int>

macdef insert_before = dllist_t_insert_before<int>
macdef insert_after = dllist_t_insert_after<int>
macdef remove = dllist_t_remove<int>

macdef get_root = dllist_t_root<int>
macdef get_prev = dllist_t_previous<int>
macdef get_next = dllist_t_next<int>

macdef is_root = dllist_t_is_root<int>
macdef isnot_root = dllist_t_isnot_root<int>

macdef get_element = dllist_t_element<int>

macdef make_generator = dllist_t_make_generator<int>
macdef dl2list = dllist_t_to_list<int>
macdef list2dl = list_to_dllist_t<int>

fn
print_forwards (dl : dl_t) =
  let
    val gen = make_generator (dl, 1)
    var xopt : Option int
    var separator : string = ""
  in
    for (xopt := gen (); option_is_some xopt; xopt := gen ())
      case+ xopt of
      | Some x =>
        begin
          print! separator;
          print! x;
          separator := " "
        end
  end

fn
print_backwards (dl : dl_t) =
  let
    val gen = make_generator (dl, ~1)
    var xopt : Option int
    var separator : string = ""
  in
    for (xopt := gen (); option_is_some xopt; xopt := gen ())
      case+ xopt of
      | Some x =>
        begin
          print! separator;
          print! x;
          separator := " "
        end
  end

implement
main0 () =
  {
    val dl = list2dl ($list{int} (10, 20, 30, 40, 50))
    val _ = print! ("doubly linked list: ")
    val _ = print_forwards dl
    val _ = println! ()

    val _ = print! ("conversion to a regular list: ")
    val _ = println! (dl2list dl)

    val _ = print! ("traversal backwards: ")
    val _ = print_backwards dl
    val _ = println! ()

    val _ = print! ("traversal forwards, given a non-root node: ")
    val _ = print_forwards (get_prev (get_prev dl))
    val _ = println! ()

    val _ = print! ("traversal backwards, given a non-root node: ")
    val _ = print_backwards (get_prev (get_prev dl))
    val _ = println! ()

    val _ = print! ("insertion after the root: ")
    val _ = insert_after (dl, 5)
    val _ = print_forwards dl
    val _ = println! ()

    val _ = print! ("insertion before the root: ")
    val _ = insert_before (dl, 55)
    val _ = print_forwards dl
    val _ = println! ()

    val _ = print! ("insertion after the second element: ")
    val _ = insert_after (get_next (get_next dl), 15)
    val _ = print_forwards dl
    val _ = println! ()

    val _ = print! ("insertion before the second from last element: ")
    val _ = insert_before (get_prev (get_prev dl), 45)
    val _ = print_forwards dl
    val _ = println! ()

    val _ = print! ("removal of the element 30: ")
    val _ =
      let
        var p : dl_t
      in
        for (p := get_next dl; get_element p <> 30; p := get_next p)
          ();
        remove p
      end
    val _ = print_forwards dl
    val _ = println! ()
  }
