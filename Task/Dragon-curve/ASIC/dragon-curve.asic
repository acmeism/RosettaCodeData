REM Dragon curve
DIM S@(7)
DIM C@(7)
DIM R(27)
REM SIN, COS in arrays for PI/4 multipl.
DATA 0@, 0.70711@, 1@,  0.70711@,  0@, -0.70711@, -1@, -0.70711@
DATA 1@, 0.70711@, 0@, -0.70711@, -1@, -0.70711@,  0@,  0.70711@
Sqrt2@ = 1.41421@
FOR I = 0 TO 7
  READ S@(I)
NEXT I
FOR I = 0 TO 7
  READ C@(I)
NEXT I
Level = 17
Insize@ = 256
REM Insize@ = 2^WHOLE_NUM looks fine
X@ = 224
Y@ = 124
RotQPi = 0
RQ = 1
SCREEN 9
GOSUB Dragon:
LOCATE 20, 1
PRINT "Press any key to exit."
Loop:
  X$=INKEY$
  IF X$="" THEN Loop:
SCREEN 0
END

Dragon:
RotQPi = RotQPi MOD 8
WHILE RotQPi < 0
  RotQPi = RotQPi + 8
WEND
IF Level <= 1 THEN
  YN@ = S@(RotQPi) * Insize@
  YN@ = YN@ + Y@
  XN@ = C@(RotQPi) * Insize@
  XN@ = XN@ + X@
  GOSUB DrawLine:
  X@ = XN@
  Y@ = YN@
ELSE
  Insize@ = Insize@ * Sqrt2@
  Insize@ = Insize@ / 2@
  RotQPi = RotQPi + RQ
  RotQPi = RotQPi MOD 8
  WHILE RotQPi < 0
    RotQPi = RotQPi + 8
  WEND
  Level = Level - 1
  R(Level) = RQ
  RQ = 1
  GOSUB Dragon:
  RLevelM2 = R(Level) * 2
  RotQPi = RotQPi - RLevelM2
  RotQPi = RotQPi MOD 8
  WHILE RotQPi < 0
    RotQPi = RotQPi + 8
  WEND
  RQ = -1
  GOSUB Dragon:
  RQ = R(Level)
  RotQPi = RotQPi + RQ
  RotQPi = RotQPi MOD 8
  WHILE RotQPi < 0
    RotQPi = RotQPi + 8
  WEND
  Level = Level + 1
  Insize@ = Insize@ * Sqrt2@
ENDIF
RETURN

DrawLine:
REM Draw a line from (X@, Y@) to (XN@, YN@)
REM Coordinates decimal, but converted in PSET.
DX@ = XN@ - X@
DY@ = YN@ - Y@
AbsDX@ = ABS(DX@)
AbsDY@ = ABS(DY@)
IF AbsDX@ <= AbsDY@ THEN
  REM More vertical line
  IF AbsDY@ <= 1@ THEN
    REM The same pixel or neighboring ones, because AbsDX@ <= AbsDY@ <= 1.
    PSET (Y@, X@), 10
    PSET (YN@, XN@), 10
  ELSE
    REM There are pixels in between.
    A@ = DX@ / DY@
    IF YN@ >= Y@ THEN
      D@ = 1@
    ELSE
      D@ = -1@
    ENDIF
    CoordY@ = Y@
    WHILE CoordY@ <= YN@
      CoordX@ = CoordY@ - Y@
      CoordX@ = A@ * CoordX@
      CoordX@ = X@ + CoordX@
      PSET (CoordY@, CoordX@), 10
      CoordY@ = CoordY@ + D@
    WEND
  ENDIF
ELSE
  REM More horizontal line
  IF AbsDX@ <= 1@ THEN
    REM The same pixel or neighboring ones, because AbsDY@ < AbsDX@ <= 1.
    PSET (Y@, X@), 10
    PSET (YN@, XN@), 10
  ELSE
    REM There are pixels in between.
    A@ = DY@ / DX@
    IF XN@ >= X@ THEN
      D@ = 1@
    ELSE
      D@ = -1@
    ENDIF
    CoordX@ = X@
    WHILE CoordX@ <= XN@
      CoordY@ = CoordX@ - X@
      CoordY@ = A@ * CoordY@
      CoordY@ = Y@ + CoordY@
      PSET (CoordY@, CoordX@), 10
      CoordX@ = CoordX@ + D@
    WEND
  ENDIF
ENDIF
RETURN
