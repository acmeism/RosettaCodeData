println(0'|<?xml version='1.0' encoding='utf-8' standalone='no'?>|"\n"
   0'|<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN'|"\n"
   0'|'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>|"\n"
   0'|<svg width='100%' height='100%' version='1.1'|"\n"
   0'|xmlns='http://www.w3.org/2000/svg'>|);

order:=13.0; # akin to number of recursion steps
d_size:=1000.0; # size in pixels
pi:=(1.0).pi;
turn_angle:=pi/2; # turn angle of each segment, 90 degrees for the canonical dragon

angle:=pi - (order * (pi/4)); # starting angle
len:=(d_size/1.5) / (2.0).sqrt().pow(order); # size of each segment
x:=d_size*5/6; y:=d_size*1/3; # starting point

foreach i in ([0 .. (2.0).pow(order-1)]){
   # find which side to turn based on the iteration
   angle += i.bitAnd(-i).shiftLeft(1).bitAnd(i) and -turn_angle or turn_angle;

   dx:=x + len * angle.sin(); dy:=y - len * angle.cos();
   println("<line x1='",x,"' y1='",y,"' x2='",dx,"' y2='",dy,
           "' style='stroke:rgb(0,0,0);stroke-width:1'/>");
   x=dx; y=dy;
}
println("</svg>");
