; We'll just use words for the balls
make "colors {red white blue}

; to get a mapping from colors back to a numeric value,
; we make variables out of the color names (e.g. the variable
; "red" has value "1").
foreach arraytolist :colors [
  make ? #
]

; Make a random list of a given size
to random_balls :n
  local "balls
  make "balls array n
  repeat n [
    setitem # :balls pick :colors
  ]
  output :balls
end

; Test for Dutchness
to dutch? :array
   output dutchlist? arraytolist :array
end

; List is easier than array to test
to dutchlist? :list
  output cond [
    [(less? count :list 2) "true]
    [(greater? thing first :list thing item 2 :list) "false ]
    [else dutchlist? butfirst :list]
  ]
end

; But array is better for sorting algorithm
to dutch :array
  local "lo
  make "lo 0
  local "hi
  make "hi sum 1 count :array
  local "i
  make "i 1
  while [:i < :hi] [
    case (item :i :array) [
      [[red]
         make "lo sum :lo 1
         swap :array :lo :i
         make "i sum :i 1
      ]
      [[white]
         make "i sum :i 1
      ]
      [[blue]
         make "hi difference :hi 1
         swap :array :hi :i
      ]
    ]
  ]
  output :array
end

; utility routine to swap array elements
to swap :array :a :b
  local "temp
  make "temp item :a :array
  setitem :a :array item :b :array
  setitem :b :array :temp
end
