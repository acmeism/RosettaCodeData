function Dutch_national_flag_problem {
	enum bands {red=1, white, blue}
	s=red
	check_in_order=lambda s, (a as array) ->{
		boolean true=@true, false
		k=each(a)
		m=s
		Z=S
		=true
		while k
			z=array(k)
			if m=z else
				if m=blue then
					=false
					break
				else
					m++
					if m=z else =false : break
				end if
			end if
		end while
	}
	SortElse=lambda (m(), &swaps,  &compares)->{
		long t=len(m())
		dim c(1 to 3)=t
		c=1
		for i=0 to len(m())-1
			rem ? "pos:";i;" ";
			w=m(i)
			if w<c then
			 	compares++
				rem ?
				k=c
				j=i
				rem ? "before swapped array :", m()#str$()
				while k-w>0
					if c(k)=t then k-- : continue
					if m(j)<m(c(k)) then
						compares++
						if c(m(j))>c(k) then c(m(j))=c(k)
						rem ? "swap:";m(j);" at pos "+j;" with ";m(c(k)); " at pos ";c(k)
						swap m(j), m(c(k))
						rem ? "just swapped array :", m()#str$()
						rem ? "c()", c()#str$()
						swaps++
						j=c(k)
						c(k)++
					end if
					k--
					rem ? "k=";k, c(k)
				end while
			else.if w>c then
				c=w
				if i-c(c)>1 else 	c(c)=i
			end if
		next
		=m()
	}
	random_band=lambda->random(1, 3)
	n=random(10, 20)
	if n<3 then exit  ' need at least 3 colors for the flag - although n now didn't get value 3 we place it to remember it later
	do
		do
			dim balls(n)<<random_band()
		until balls()#have(1) and balls()#have(2) and balls()#have(3)
	until not check_in_order(balls())
	Rem Sort balls()   ' we can sort using Sort statement
	Rem boolean skip
	Rem balls()=(1,1,3,3,1,1,1,2,1,1) : skip=true
	Print "unsort:";balls()#str$(" ")
	many=0
	comp=0
	dim unsorted()
	unsorted()=balls()
	balls()=SortElse(balls(), &many, &comp)
	sorted=check_in_order(balls())
	Print "sort checked:";sorted
	Rem if skip else if not sorted then clipboard unsorted()#str$(",") : ? "clipboard copied"
	Print "swaps:";many,"  compares:";comp
	Print "sort:";balls()#str$(" ")
	=sorted
}
for i=1 to 100
	if not Dutch_national_flag_problem() then 200
next
print"GOOD"
exit
200 print "BAD"
