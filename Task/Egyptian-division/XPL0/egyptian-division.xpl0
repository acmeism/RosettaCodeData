include xpllib; \for Print

proc EgyptianDivide(Dividend, Divisor, AddrQuotient, AddrRemainder);
int  Dividend, Divisor, AddrQuotient, AddrRemainder;
int  PowersOfTwo(100), Doublings(100), Doubling, Accumulator, I;
[if Dividend < Divisor then
        [AddrQuotient(0):= 0;  AddrRemainder(0):= Dividend;  return];
PowersOfTwo(0):= 1;  Doublings(0):= Divisor;  Doubling:= Divisor;  I:= 1;
loop    [Doubling:= Doubling*2;
        if Doubling > Dividend then quit;
        PowersOfTwo(I):= PowersOfTwo(I-1)*2;
        Doublings(I):= Doubling;
        I:= I+1;
        ];
AddrQuotient(0):= 0;  Accumulator:= 0;
for I:= I-1 downto 0 do
    [if Accumulator + Doublings(I) <= Dividend then
        [Accumulator:= Accumulator + Doublings(I);
        AddrQuotient(0):= AddrQuotient(0) + PowersOfTwo(I);
        if Accumulator = Dividend then I:= 0;
        ];
    ];
AddrRemainder(0):= Dividend - Accumulator;
];

int  Dividend, Divisor, Quotient, Remainder;
[Dividend:= 580;  Divisor:= 34;
EgyptianDivide(Dividend, Divisor, @Quotient, @Remainder);
Print("%d / %d = %d with remainder %d.\n", Dividend, Divisor, Quotient, Remainder);
]
