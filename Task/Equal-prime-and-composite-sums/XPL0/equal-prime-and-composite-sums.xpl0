func IsPrime(N);        \Return 'true' if N is prime
int  N, I;
[if N <= 2 then return N = 2;
if (N&1) = 0 then \even >2\ return false;
for I:= 3 to sqrt(N) do
    [if rem(N/I) = 0 then return false;
    I:= I+1;
    ];
return true;
];

int Cnt, N, M, SumP, SumC, NumP, NumC;
[Cnt:= 0;
N:= 1;  M:= 1;
NumP:= 2;  NumC:= 4;
SumP:= 2;  SumC:= 4;
Format(8, 0);
Text(0, "     sum     prime  composit
");
loop    [if SumC > SumP then
            [repeat NumP:= NumP+1 until IsPrime(NumP);
            SumP:= SumP + NumP;
            N:= N+1;
            ];
        if SumP > SumC then
            [repeat NumC:= NumC+1 until not IsPrime(NumC);
            SumC:= SumC + NumC;
            M:= M+1;
            ];
        if SumP = SumC then
            [RlOut(0, float(SumP));
            RlOut(0, float(N));
            RlOut(0, float(M));  CrLf(0);
            Cnt:= Cnt+1;
            if Cnt >= 6 then quit;
            repeat NumC:= NumC+1 until not IsPrime(NumC);
            SumC:= SumC + NumC;
            M:= M+1;
            ];
        ];
]
