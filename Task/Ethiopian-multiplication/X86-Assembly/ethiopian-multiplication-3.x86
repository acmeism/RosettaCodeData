;calling program

 1BDC:0100 6A11           PUSH   11  ;17  Put operands on the stack
 1BDC:0102 6A22           PUSH   22  ;34
 1BDC:0104 E80900         CALL   0110  ; call the mulitplcation routine
;putting some space in, (not needed)
 1BDC:0107 90             NOP
 1BDC:0108 90             NOP
 1BDC:0109 90             NOP
 1BDC:010A 90             NOP
 1BDC:010B 90             NOP
 1BDC:010C 90             NOP
 1BDC:010D 90             NOP
 1BDC:010E 90             NOP
 1BDC:010F 90             NOP
;mulitplication routine starts here
 1BDC:0110 89E5           MOV    BP,SP      ; prepare to get operands off stack
 1BDC:0112 8B4E02         MOV    CX,[BP+02] ; Get the first operand
 1BDC:0115 8B5E04         MOV    BX,[BP+04] ; get the second oerand
 1BDC:0118 31C0           XOR    AX,AX      ; zero out the result
 1BDC:011A F7C10100       TEST   CX,0001     ; are we odd
 1BDC:011E 7402           JZ     0122       ; no skip the next instruction
 1BDC:0120 01D8           ADD    AX,BX     ; we are odd so add to the result
 1BDC:0122 D1E3           SHL    BX,1      ; multiply by 2
 1BDC:0124 D1E9           SHR    CX,1      ; divide by 2 (if zr flag is set, we are done)
 1BDC:0126 75F2           JNZ    011A      ; cx not 0, go back and do it again
 1BDC:0128 C3             RET              ; return with the result in AX

;pretty small, just 24 bytes
