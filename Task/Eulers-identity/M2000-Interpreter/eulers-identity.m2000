Class Complex {
private:	
	double vr, vi
	final pidivby180=pi/180
	final e=2.71828182845905
public:
	property real {
		value {link parent vr to vr : value=vr}
	}
	property imaginary {
		value {link parent vi to vi : value=vi}
	}
	property toString {
		value { clear 'so a new clear as string created after
			link parent vr, vi to vr, vi
			if vi then
				if vr then
					if vi>0 then
						value="("+vr+"+"+vi+"i)"
					else
						value="("+vr+""+vi+"i)"
					end if
				else
					value="("+vi+"i)"
				end if
			else
				value="("+vr+")"
			end if
		}
	}
	function exp {
            double exp = .e^.vr
            c=this
            c.vr<=exp * cos(.vi/.pidivby180)
            c.vi<=exp * sin(.vi/.pidivby180)
            =c
       }
	function conj {
		c=this : c.vi-! : =c
	}
	function absc {
		c=this*.conj() : =sqrt(c.vr)
	}
	operator "+" {
		read k as Complex : .vr+= k.vr : 	.vi+= k.vi
	}
	operator "-" {
		read k as Complex : .vr-= k.vr : .vi-= k.vi
	}
	operator "*" {
		read k as Complex
		double ivr = .vr*k.vr-.vi*k.vi
		.vi <= .vi*k.vr+.vr*k.vi
		.vr <= ivr
	}
	operator "/" {
		read k as Complex
		k1=k*k.conj()
		acb = this*k.conj()
		.vr <= acb.vr/k1.vr
		.vi <= acb.vi/k1.vr
	}
class:
	module Complex (.vr, .vi) {}	
}
module Check (filename$="") {
	const MAXITER=12&
	long i, k = 2
	pii=Complex(0, pi)
	pii2 = pii*pii
	B0 = Complex(2)
	A0 = Complex(2)
	B1 = Complex(2) - pii
	A1 = B0*B1 + Complex(2)*pii
	open filename$ for output as #f
	printc(A0/B0)
	print #f, "     Absolute error = ";@absc(A0/B0)
	printc(A1/B1)
	print #f, "     Absolute error = ";@absc(A1/B1)
	for i = 1 to MAXITER
	    k += 4
	    A2 = Complex(k)*A1 + pii2*A0
	    B2 = Complex(k)*B1 + pii2*B0
	    try ok {curr = A2/B2}
	    if not ok then exit for
	    A0 = A1
	    A1 = A2
	    B0 = B1
	    B1 = B2
	    printc(curr)
	    print #f,  "     Absolute error = "; curr.absc()
	next i
	r=pii.exp()+Complex(1)
	Print #f, "e^(Ï€i)+1 = ";r.toString
	close#f	
	if f<>-2 and exist(dir$+filename$) then win "notepad", dir$+filename$
	end
	sub printc(c as Complex)
		Print  #f, c.toString
	end sub
	function absc(c as complex)
		=c.absc()
	end function
}
Check     ' use Check "out.txt"
