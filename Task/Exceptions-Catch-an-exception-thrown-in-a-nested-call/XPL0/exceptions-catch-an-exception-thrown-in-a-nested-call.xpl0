func U0;        \Exception caused by square root of negative value
real X;
X:= Sqrt(-42.);

func U1;        \Exception caused by opening a non-existent file for input
int  F;
F:= FOpen("unobtainium.txt", 0);

func Baz;
int  CallNo;
[CallNo:= [1];          \static-like variable
if CallNo(0) = 1 then   \first time Baz is called
        [CallNo(0):= 2;
        Text(0, "Calling U0^m^j");
        Trap(false);    \turn off error trapping to prevent program abort
        U0;
        Restart;
        ]
else                    \second time Baz is called
        [Text(0, "Calling U1^m^j");
        U1;             \error trapping is still disabled
        ];
];

func Bar;
Baz;

func Foo;
Bar;

int Err;
[Err:= GetErr;          \get the exception error after the program is restarted
if Err then             \reading GetErr resets any error number to 0, = no error
    [Text(0, "Error ");  IntOut(0, Err);  Text(0, " detected^m^j")];
Foo;
Text(0, "Finished^m^j");
]                       \second exception is pending, and it will be displayed
