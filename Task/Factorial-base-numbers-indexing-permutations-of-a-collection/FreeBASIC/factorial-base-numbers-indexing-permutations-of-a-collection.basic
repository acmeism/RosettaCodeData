Type Sequence
    longi As Integer
    dato(1000) As Integer
End Type

Sub printSequence(s As Sequence)
    Print "  ";
    For i As Integer = 1 To s.longi
        Print Chr(8) & s.dato(i);
        If i < s.longi Then Print ".";
    Next i
    Print
End Sub

Function factorial(n As Integer) As Longint
    If n <= 1 Then Return 1
    Return n * factorial(n - 1)
End Function

Function tagset(n As Integer) As Sequence
    Dim As Sequence result
    result.longi = n
    For i As Integer = 1 To n
        result.dato(i) = i
    Next i
    Return result
End Function

Sub showCards(s As Sequence)
    Const cards = "AKQJT98765432"
    Const suits = "SHDC"

    For i As Integer = 1 To s.longi
        Dim As Integer c = s.dato(i) - 1
        Dim As String card = Mid(cards, (c Mod 13) + 1, 1) + Mid(suits, (c \ 13) + 1, 1)
        Print card; Iif(((i Mod 13) = 0 Or i = s.longi), Chr(10), " ");
    Next i
    Print
End Sub

Function fperm(fbn As Sequence, omega As Sequence) As Sequence
    Dim As Integer i, g, tmp, j, m = 0
    Dim As Sequence result = omega

    For i = 1 To fbn.longi
        g = fbn.dato(i)
        If g > 0 Then
            tmp = result.dato(m + g + 1)
            For j = m + g + 1 To m + 2 Step -1
                result.dato(j) = result.dato(j - 1)
            Next j
            result.dato(m + 1) = tmp
        End If
        m += 1
    Next i

    result.longi = omega.longi
    Return result
End Function

Function factorialBaseNumbers(size As Integer, cntOnly As Integer) As Sequence
    Dim As Sequence results
    Dim As Integer res(1000)
    Dim As Integer cnt, n, radix, k, i

    results.longi = 0
    cnt = 0
    n = 0
    Do
        radix = 2
        k = n
        For i = 1 To size
            res(i) = 0
        Next i

        While k > 0
            If cntOnly = 0 Andalso radix <= size + 1 Then
                res(size - radix + 2) = k Mod radix
            End If
            k \= radix
            radix += 1
        Wend

        If radix > size + 2 Then Exit Do

        cnt += 1
        If cntOnly = 0 Then
            results.longi += 1
            For i = 1 To size
                results.dato((results.longi - 1) * size + i) = res(i)
            Next i
        End If
        n += 1
    Loop

    If cntOnly Then
        results.longi = 1
        results.dato(1) = cnt
    End If

    Return results
End Function

' Generate random factorial base number sequence
Function randFBN51() As Sequence
    Dim As Sequence fbn51
    fbn51.longi = 51
    For i As Integer = 1 To 51
        fbn51.dato(i) = Int(Rnd * (52 - i)) + 1
    Next i
    Return fbn51
End Function

' Main program
Randomize Timer
Dim As Integer i, j

Dim As Sequence fbns = factorialBaseNumbers(3, 0)
Dim As Sequence omega
omega.longi = 4
For i = 0 To 3
    omega.dato(i + 1) = i
Next i

For i = 1 To fbns.longi
    For j = 1 To 3
        Print fbns.dato((i-1)*3 + j) & ".";
    Next j
    Print Chr(8) & " ->";

    Dim As Sequence tmp
    tmp.longi = 3
    For j = 1 To 3
        tmp.dato(j) = fbns.dato((i-1)*3 + j)
    Next j

    Dim As Sequence result = fperm(tmp, omega)
    printSequence(result)
Next i

Print
Dim As Sequence cnt = factorialBaseNumbers(10, 1)
Print "Permutations generated ="; cnt.dato(1)
Print " compared to 11! which ="; factorial(11)

Print
Dim As Sequence fbn51s(3)

' First predefined sequence
fbn51s(1).longi = 51
Data 39,49,7,47,29,30,2,12,10,3,29,37,33,17,12,31,29,34,17,25,2,4,25,4,1,14,20,6,21,18,1,1,1,4,0,5,15,12,4,3,10,10,9,1,6,5,5,3,0,0,0
For i = 1 To 51: Read fbn51s(1).dato(i): Next

' Second predefined sequence
fbn51s(2).longi = 51
Data 51,48,16,22,3,0,19,34,29,1,36,30,12,32,12,29,30,26,14,21,8,12,1,3,10,4,7,17,6,21,8,12,15,15,13,15,7,3,12,11,9,5,5,6,6,3,4,0,3,2,1
For i = 1 To 51: Read fbn51s(2).dato(i): Next

' Third random sequence
fbn51s(3) = randFBN51()

' Show all card arrangements
For i = 1 To 3
    showCards(fperm(fbn51s(i), tagset(52)))
Next i

Sleep
