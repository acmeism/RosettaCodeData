(do ;;; find some factorial primes - primes that are f - 1 or f + 1 for some factorial f

    (fn is-prime [p]
        (if   (or (<= p 1) (= 0 (% p 2)))
              (= p 2)
        ;else
              (do (var (prime i root-p) (values true 3 (math.floor (math.sqrt p))))
                  (while (and (<= i root-p) prime)
                         (set (prime i) (values (not= 0 (% p i)) (+ i 1)))
                  )
                  prime
              )
        )
    )

    (var (f fp-count n) (values 1 0 1))
    (while (< fp-count 10)
           (set f (* f n))
           (var fp-op "-")
           (for [fp (- f 1) (+ f 1) 2]
                (when (is-prime fp)
                      (set fp-count (+ fp-count 1))
                      (io.write (string.format "%2d:%4d! %s 1 = %d\n" fp-count n fp-op fp))
                )
                (set fp-op "+")
           )
           (set n (+ n 1))
    )

)
