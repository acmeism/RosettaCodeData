[Factors of an integer, from Rosetta Code website.]
[EDSAC program, Initial Orders 2.]
[2024-12-25 (1) Fixed bug in print subroutine
            (2) Added factors of more integers.

[The numbers to  be factorized are read in by library subroutine R2
  (Wilkes, Wheeler and Gill, 1951 edition, pp.96-97, 148).]
[The address of the integers is placed in location 46, so they can be
  referred to by the N parameter (or we could have used 45 and H, etc.)]
          T46K
          P600F           [address of integers]
[Subroutine R2]
GKT20FVDL8FA40DUDTFI40FA40FS39FG@S2FG23FA5@T5@E4@E13Z
          T#N             [pass address of integers to R2]
[Integers, separated by 'F' and terminated by '#TZ', as R2 requires.]
420F42000F420000F99999F999999F0#
          TZ              [resume normal loading]

 [Modified library subroutine P7.
  Prints signed integer; up to 10 digits, left-justified.
  Input: 0D = integer
  52 locations. Load at even address. Workspace 4D.]
          T56K
GKA3FT42@A47@T31@ADE10@T31@A46@T31@SDTDH44#@NDYFLDT4DS43@TF
H17@S17@A43@G23@UFS43@T1FV4DAFG48@SFLDUFXFOFFFSFL4FT4DA47@
T31@A1FA43@G20@XFT44#ZPFT43ZP1024FP610D@524DO26@XFSFL8FT4DE39@

 [Division subroutine for positive long integers.
  35-bit dividend and divisor (max 2^34 - 1)
  returning quotient and remainder.
  Input:  dividend at 4D, divisor at 6D
  Output: remainder at 4D, quotient at 6D.
  37 locations; working locations 0D, 8D.]
          T110K
GKA3FT35@A6DU8DTDA4DRDSDG13@T36@ADLDE4@T36@T6DA4DSDG23@
T4DA6DYFYFT6DT36@A8DSDE35@T36@ADRDTDA6DLDT6DE15@EFPF

  [********************** ROSETTA CODE TASK **********************]
 [Subroutine to find and print factors of a positive integer.
  Input: 0D = integer, maximum 10 decimal digits.
  Load at even address.]
          T148K
          GK
          A3F             [form and plant link for return]
          T55@
          AD              [load integer whose factors are to be found]
          T56#@           [store]
          A62#@           [load 1]
          T58#@           [possible factor := 1]
          S65@            [negative count of items per line]
          T64@            [initialize count]

          [Start of loop round possible factors]
    [8]   TF              [clear acc]
          A56#@           [load integer]
          T4D             [to 4D for division]
          A58#@           [load possible factor]
          T6D             [to 6D for division]
          A13@            [for return from next]
          G110F           [do division; clears acc]
          A6D             [save quotient (6D may be changed below)]
          T60#@
          S4D             [load negative of remainder]
          G44@            [skip if remainder > 0]

          [Here if m is a factor of n.]
          [Print m and the quotient together]
          TF              [clear acc]
          A64@            [test count of items per line]
          G26@            [skip if not start of line]
          S65@            [start of line, reset count]
          T64@
          O70@            [and print CR, LF]
          O71@
   [26]   TF              [clear acc]
          O67@            [print '(']
          A58#@           [load factor]
          TD              [to 0D for printing]
          A30@            [for return from next]
          G56F            [print factor; clears acc]
          O69@            [print comma]
          A60#@           [load quotient]
          TD              [to 0D for printing]
          A35@            [for return from next]
          G56F            [print quotient; clears acc]
          O68@            [print ')']
          A64@            [negative counter for items per line]
          A2F             [inc]
          E43@            [skip if end of line]
          O66@            [not end of line, print 2 spaces]
          O66@
   [43]   T64@            [update counter]

          [Common code after testing possible factor]
   [44]   TF              [clear acc]
          A58#@           [load possible factor]
          A62#@           [inc by 1]
          U58#@           [store back]
          S60#@           [compare with quotient]
          G8@             [loop if (new factor) < (old quotient)]

          [Here when found all factors]
          O70@            [print CR, LF twice]
          O71@
          O70@
          O71@
          TF              [exit with acc = 0]
   [55]   EF              [(planted) return to caller]
          [--------------]
   [56]   PF PF           [number whose factors are to be found]
   [58]   PF PF           [possible factor]
   [60]   PF PF           [integer part of (number/factor)]
          T62#Z           [clear whole of 35-bit constant, including sandwich bit]
          PF
          T62Z            [resume normal loading]
   [62]   PD PF           [35-bit constant 1]
   [64]   PF              [negative counter for items per line]
   [65]   P4F             [items per line, in address field]
   [66]   !F              [space]
   [67]   KF
   [68]   LF
   [69]   NF              [comma, in figure shift]
   [70]   @F              [carriage return]
   [71]   &F              [line feed]

  [Main routine for demonstrating subroutine.]
          T400K
          GK
    [0]   #F              [figure shift]
    [1]   K4096F          [null char]
    [2]   S#N             [order to load negative first number]
    [3]   P2F             [to inc address by 2 for next number]

          [Enter with acc = 0]
    [4]   O@              [set teleprinter to figures]
          A2@             [load order for first integer]
    [6]   T7@             [plant in next order]
    [7]   SD              [load negative of 35-bit integer]
          E17@            [exit if number is 0]
          TD
          SD              [convert to positive]
          TD              [pass to subroutine]
          A12@            [call subroutine to find and print factors]
          G148F
          A7@             [modify order above, for next integer]
          A3@
          E6@             [always jump, since S = 12 > 0]
   [17]   O1@             [done, print null to flush printer buffer]
          ZF              [stop]
          E4Z             [define entry point]
          PF              [acc = 0 on entry
