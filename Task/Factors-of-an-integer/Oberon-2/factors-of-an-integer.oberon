MODULE Factors;
IMPORT Out,SYSTEM;
TYPE	
	LIPool = POINTER TO ARRAY OF LONGINT;
	LIVector= POINTER TO LIVectorDesc;
	LIVectorDesc = RECORD
		cap: INTEGER;
		len: INTEGER;
		LIPool: LIPool;
	END;
	
	PROCEDURE New(cap: INTEGER): LIVector;
	VAR
		v: LIVector;
	BEGIN
		NEW(v);
		v.cap := cap;
		v.len := 0;
		NEW(v.LIPool,cap);
		RETURN v
	END New;
	
	PROCEDURE (v: LIVector) Add(x: LONGINT);
	VAR
		newLIPool: LIPool;
	BEGIN
		IF v.len = LEN(v.LIPool^) THEN
			(* run out of space *)
			v.cap := v.cap + (v.cap DIV 2);
			NEW(newLIPool,v.cap);
			SYSTEM.MOVE(SYSTEM.ADR(v.LIPool^),SYSTEM.ADR(newLIPool^),v.cap * SIZE(LONGINT));
			v.LIPool := newLIPool
		END;
		v.LIPool[v.len] := x;
		INC(v.len)
	END Add;
	
	PROCEDURE (v: LIVector) At(idx: INTEGER): LONGINT;
	BEGIN
		RETURN v.LIPool[idx];
	END At;
	
	
PROCEDURE Factors(n:LONGINT): LIVector;
VAR
	j: LONGINT;
	v: LIVector;
BEGIN
	v := New(16);
	FOR j := 1 TO n DO
		IF (n MOD j) = 0 THEN v.Add(j) END;
	END;
	RETURN v
END Factors;

VAR
	v: LIVector;
	j: INTEGER;
BEGIN
	v := Factors(123);
	FOR j := 0 TO v.len - 1 DO
		Out.LongInt(v.At(j),4);Out.Ln
	END;
	Out.Int(v.len,6);Out.String(" factors");Out.Ln
END Factors.
