module CreateLibComplexPack {
	prototype {
		class ComplexPack {
			function final complexPolar(a, b) {
				method .m, "cxPolar", a, b as ret
				=ret
			}
			function final complex(a, b) {
				method .m, "cxNew", a, b as ret
				=ret
			}
			function final mul(a, b) {
				method .m, "cxMul", a, b as ret
				=ret
			}
			function final add(a, b) {
				method .m, "cxAdd", a, b as ret
				=ret
			}
			function final sub(a, b) {
				method .m, "cxSub", a, b as ret
				=ret
			}
			Module final  FFT(buf, out, begin as Long, stp as Long, N as Long) {
				If stp < N Then
					call .FFT, out, buf, begin, 2 * stp, N
					call .FFT, out, buf, begin + stp, 2 * stp, N
					var i as long, t as variant
					for i=0 to N-1 step 2*stp
						t= .mul(.complexPolar(1, -pi* i / N), out[begin + i + stp])
						buf[begin + i  div 2]= .add(out[begin + i], t)
						buf[begin + (i + N)  div 2]= .sub(out[begin + i], t)
					next
				End If
			}
		private:
			declare m math2
		public:
			property zero {value}
		class:
			module ComplexPack{
				method .m,"cxzero" as z
				.[zero]<=z
			}	
		}
	} as ComplexPack
	const UTF8=2&
	document Export$=ComplexPack
	Save.Doc Export$, "ComplexPack.gsb", UTF8
}
CreateLibComplexPack
