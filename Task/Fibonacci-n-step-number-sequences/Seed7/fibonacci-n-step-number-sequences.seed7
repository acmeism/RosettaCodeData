$ include "seed7_05.s7i";

const func array integer: bonacci (in array integer: start, in integer: arity, in integer: length) is func
  result
    var array integer: bonacciSequence is 0 times 0;
  local
    var integer: sum is 0;
    var integer: index is 0;
  begin
    bonacciSequence := start[.. length];
    while length(bonacciSequence) < length do
      sum := 0;
      for index range max(1, length(bonacciSequence) - arity + 1) to length(bonacciSequence) do
        sum +:= bonacciSequence[index];
      end for;
      bonacciSequence &:= [] (sum);
    end while;
  end func;

const proc: print (in string: name, in array integer: sequence) is func
  local
    var integer: index is 0;
  begin
    write((name <& ":") rpad 12);
    for index range 1 to pred(length(sequence)) do
      write(sequence[index] <& ", ");
    end for;
    writeln(sequence[length(sequence)]);
  end func;

const proc: main is func
  begin
    print("Fibonacci",  bonacci([] (1, 1), 2, 10));
    print("Tribonacci", bonacci([] (1, 1), 3, 10));
    print("Tetranacci", bonacci([] (1, 1), 4, 10));
    print("Lucas",      bonacci([] (2, 1), 2, 10));
  end func;
