var [const] BN=Import("zklBigNum");  // libGMP
fcn largest_lefty_prime(base){
   primes,p:=List(),BN(1); while(p.nextPrime()<base){ primes.append(p.copy()) }
   b,biggest := BN(1),0;
   while(primes){
      b*=base;  // base,base^2,base^3... gets big
      ps:=List();
      foreach p,n in (primes,[1..base-1]){
         if((z:=(p + b*n)).probablyPrime()){
	    ps.append(z);
	    if(z>biggest) biggest=z;
	 }
      }
      primes=ps;  // the number of lists is small
   }
   biggest
}

foreach n in ([3..17]){ println("%2d %s".fmt(n,largest_lefty_prime(n))) }
