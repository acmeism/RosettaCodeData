(defun binop (numop x y)
  (typecase x
    (number (typecase y
              (number [numop x y])
              (fun (caseql (fun-fixparam-count y)
                     (0 [numop x [y]])
                     (1 (ret [numop x [y @1]]))
                     (2 (ret [numop x [y @1 @2]]))
                     (t (error "~s: right argument has too many params"
                               %fun% y))))
              (t (error "~s: right argument must be function or number"
                        %fun% y))))
    (fun (typecase y
           (number (caseql (fun-fixparam-count x)
                     (0 [numop [x] y])
                     (1 (ret [numop [x @1] y]))
                     (2 (ret [numop [x @1 @2] y]))
                     (t (error "~s: left argument has too many params"
                               %fun% x))))
           (fun (macrolet ((pc (x-param-count y-param-count)
                                ^(+ (* 3 ,x-param-count) ,y-param-count)))
                   (caseql* (pc (fun-fixparam-count x) (fun-fixparam-count y))
                     (((pc 0 0)) [numop [x] [y]])
                     (((pc 0 1)) (ret [numop [x] [y @1]]))
                     (((pc 0 2)) (ret [numop [x] [y @1 @2]]))
                     (((pc 1 0)) (ret [numop [x @1] [y]]))
                     (((pc 1 1)) (ret [numop [x @1] [y @1]]))
                     (((pc 1 2)) (ret [numop [x @1] [y @1 @2]]))
                     (((pc 2 0)) (ret [numop [x @1 @2] [y]]))
                     (((pc 2 1)) (ret [numop [x @1 @2] [y @1]]))
                     (((pc 2 2)) (ret [numop [x @1 @2] [y @1 @2]]))
                     (t (error "~s: one or both arguments ~s and ~s\ \
                               have excess arity" %fun% x y)))))))
      (t (error "~s: left argument must be function or number"
              %fun% y))))

(defun f+ (x y) [binop + x y])
(defun f- (x y) [binop - x y])
(defun f* (x y) [binop * x y])
(defun f/ (x y) [binop / x y])
