(defstruct (series (:constructor series (coeffs)) (:conc-name))
  coeffs)

(defgeneric negate (f)
  (:method (f)
   (cl:- f))
  (:method ((f series))
   (series (maplar 'negate (coeffs f)))))

(defgeneric + (f g)
  (:method (f g)
   (cl:+ f g))
  (:method (f (g series))
   (series (lons (+ f (lar (coeffs g))) (ldr (coeffs g)))))
  (:method ((f series) g)
   (+ g f))
  (:method ((f series) (g series))
   (series (maplar '+ (coeffs f) (coeffs g)))))

(defun - (f g)
  (+ f (negate g)))

(defun series-* (f g)
  (with-lons (f ft) (coeffs f)
    (with-lons (g gt) (coeffs g)
      (series (lons (* f g)
                    (coeffs (+ (* (series ft)
                                  (series gt))
                               (* f (series gt)))))))))

(defgeneric * (f g)
  (:method (f g)
   (cl:* f g))
  (:method ((f series) g)
   (series (maplar #'(lambda (x) (* x g)) (coeffs f))))
  (:method (f (g series))
   (* g f))
  (:method ((f series) (g series))
   (series-* f g)))

(defun series-/ (f g)
  (with-lons (f ft) (coeffs f)
    (with-lons (g gt) (coeffs g)
      (let ((qs nil))
        (setf qs (lons (/ f g)
                       (maplar #'(lambda (x) (/ x g))
                               (coeffs (- (series ft)
                                          (* (series qs)
                                             (series gt)))))))))))

(defgeneric / (f g)
  (:method (f g)
   (cl:/ f g))
  (:method ((f series) g)
   (series (maplar #'(lambda (x) (/ x g)) (coeffs f))))
  (:method (f (g series))
   (/ (series (lons f (repeat 0))) g))
  (:method ((f series) (g series))
   (series-/ f g)))

(defun int (f)
  (series (lons 0 (maplar '/ (coeffs (force f)) (up-from 1)))))

(defun diff (f)
  (series (maplar '* (ldr (coeffs f)) (up-from 1))))
