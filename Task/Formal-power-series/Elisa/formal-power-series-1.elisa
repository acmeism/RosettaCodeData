component FormalPowerSeries(Number);
  type PowerSeries;
       PowerSeries(Size = integer) -> PowerSeries;

       + PowerSeries -> PowerSeries;
       - PowerSeries -> PowerSeries;

       PowerSeries + PowerSeries -> PowerSeries;
       PowerSeries - PowerSeries -> PowerSeries;
       PowerSeries * PowerSeries -> PowerSeries;

       Integral(PowerSeries)     -> PowerSeries;
       Differential(PowerSeries) -> PowerSeries;

       Zero -> PowerSeries;
       One  -> PowerSeries;

       Array(PowerSeries) -> array(Number);
 begin
       PowerSeries(Size) = PowerSeries:[T = array(Number, Size); Size];

       + A = A;

       - A = [ C = PowerSeries(A.Size);
		       [ i = 1 .. A.Size; C.T[i] := - A.T[i] ];
		     C];

       A + B = [ if A.Size > B.Size then return(B + A);
		         C = PowerSeries(B.Size);
		         [ i = 1 .. A.Size; C.T[i] := A.T[i] + B.T[i] ];
		         [ i = (A.Size +1) .. B.Size;  C.T[i] := B.T[i] ];
		       C];

       A - B = A + (- B );

       A * B = [ C = PowerSeries(A.Size + B.Size - 1);
 	         [ i = 1 .. A.Size;
		     [j = 1.. B.Size;
		         C.T[i + j - 1] := C.T[i + j - 1] + A.T[i] * B.T[j] ] ];
	          C];

      Integral(A) = [ if A.Size == 0 then return (A);
 		      C = PowerSeries(A.Size + 1);
		      [ i = 1 .. A.Size; C.T[i +1] := A.T[i] / Number( i )];
		      C.T[1]:= Number(0);
		      C ];

      Differential(A) = [ if A.Size == 1 then return (A);
		          C = PowerSeries(A.Size - 1);
		          [ i = 1 .. C.Size; C.T[i] := A.T[i + 1] * Number( i )];
		          C ];

      Zero = [ C = PowerSeries (1); C.T[1]:= Number(0);  C];	
      One =  [ C = PowerSeries (1); C.T[1]:= Number(1);  C];	

      Array(PowerSeries) -> array(Number);
      Array(TS) = TS.T;

end component FormalPowerSeries;
