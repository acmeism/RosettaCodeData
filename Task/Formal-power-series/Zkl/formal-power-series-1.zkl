class IPS{
   var [protected] w;   // the coefficients of the infinite series
   fcn init(w_or_a,b,c,etc){  // IPS(1,2,3) --> (1,2,3,0,0,...)
      switch [arglist]{
	 case(Walker)		{ w=w_or_a.tweak(Void,0) }
	 else			{ w=vm.arglist.walker().tweak(Void,0) }
      }
   }
   fcn __opAdd(ipf){   //IPS(1,2,3)+IPS(4,5)-->IPS(5,6,3,0,...), returns modified self
      switch[arglist]{
         case(1){ addConst(ipf) }         // IPS + int/float
	 else   { w=w.zipWith('+,ipf.w) } // IPS + IPS
      }
      self
   }
   fcn __opSub(ipf){ w=w.zipWith('-,ipf.w); self } // IPS - IPSHaskell
   fcn __opMul(ipf){ }  // stub
   fcn __opDiv(x){ w.next().toFloat()/x } // *IPS/x, for integtate()
   fcn __opNegate  { w=w.tweak(Op("--")); self }
   // integtate: b0 = 0 by convention, bn = an-1/n
   fcn integrate{ w=w.zipWith('/,[1..]).push(0.0); self }
   fcn diff     { w=w.zipWith('*,[1..]); 	   self }
   fcn facts{ (1).walker(*).tweak(fcn(n){ (1).reduce(n,'*,1) }) } // 1!,2!...
   fcn walk(n){ w.walk(n) }
   fcn value(x,N=15){ ns:=[1..]; w.reduce(N,'wrap(s,an){ s + an*x.pow(ns.next()) }) }
   fcn cons(k){ w.push(k); self }  //--> k, a0, a1, a2, ...
   // addConst(k) --> k + a0, a1, a2, ..., same as k + IPS
   fcn addConst(k){ (w.next() + k) : w.push(_); self }
}
