Module Check {,
      \\ make an event object
      \\ with a prototype signature
      \\ first parameter  is numeric/object by value, and second is by reference
      Event Alfa {
            Read x, &z
      }

      \\ make a function with same signature
      \\ but here prepared to used with current module visibility
      m=0
      Function ServiceAlfa {
            \ this code "see" m variable
            \\ we have to use new, to make new a, b for sure
            read new a, &b
            b+=a
            m++
      }

      \\ add function to event, making reference as local to module
      Event Alfa new Lazy$(&ServiceAlfa())

      \\ call event in this module
      var=30
      Call Event Alfa,  10, &var
      Print var=40
      \\ make a local module, and pass event by value
      Module checkinside (ev) {
            \\ ev is a copy of Alfa
            m=10
            call event ev, 4, &m
            Print m=14
            \\ clear functions from ev
            Event ev Clear
            \\ we can call it again, but nothing happen
            call event ev, 4, &m
            Print m=14
      }
      checkinside Alfa
      \\ so now we call Alfa
      Call Event Alfa,  10, &var
      Print var=50
      Event Alfa Hold
      \\ calling do nothing, because of Hold state
      Call Event Alfa,  10, &var
      Event Alfa Release
      Call Event Alfa,  10, &var
      Print var=60
      Print m=4  ' 4 times called ServiceAlfa
}
Check
