Module Gauss_Jordan_matrix_inversion (there$="") {
	open there$ for output as #f
	dim matrix(1 to 3, 2 to 4) as Double
	matrix(1,2)=2, -1, 0, -1, 2, -1, 0, -1, 2
	print #f, "Matrix 3x3:"
	disp(matrix())
	print #f, "Inverse:"
	disp(@inverse(matrix()))
	dim matrix2(2 to 4, 3 to 5) as single
	matrix2(2, 3)=1, 2, 3, 4, 1, 6, 7, 8, 9
	print #f,"Matrix 3x3:"
	disp(matrix2())
	print #f,"Inverse:"	
	disp(@inverse(matrix2()))
	dim matrix3(1 to 4,1 to 4) as Currency, matrix4()
	matrix3(1,1)=-1,-2,3,2,-4,-1,6,2,7,-8,9,1,1,-2,1,3
	print #f,"Matrix 4x4:"
	disp(matrix3())
	matrix4()=@inverse(matrix3())
	Rem Print Type$(matrix4(1,1))="Currency"
	print #f,"Inverse:"	
	disp(matrix4())
	close #f
	function inverse(a())
		if dimension(a())<>2 then Error "Not 2 Dimensions Matrix"
		if not dimension(a(),1)=dimension(a(),2) then Error "Not Square Matrix"
		Local aug()  // this is an empty array (type of variant)
		aug()=a()  // so we get the same type from a()
		dim aug(dimension(a(),1), dimension(a(),1)*2)=0
		Rem gosub disp(aug())
		Local long bi=dimension(a(), 1, 0), bj=dimension(a(), 2, 0)
		Local long bim=dimension(a(), 1)-1, bjm=dimension(a(), 2)-1
		Local long i, j
		for i=0 to bim
			for j=0 to bjm
				aug(i,j)=a(i+bi,j+bj)
			next
			aug(i, i+bjm+1)=1
		next
		aug()=@ToReducedRowEchelonForm(aug())
		for i=0 to bim
			for j=0 to bjm
				a(i+bi,j+bj)=aug(i,j+bjm+1)
			next
		next
		Rem : Print type$(aug(0,0))
		=a()
	end function
	function ToReducedRowEchelonForm(a())
		Local long bi=dimension(a(), 1, 0), bj=dimension(a(), 2, 0)
		Local long rowcount=dimension(a(), 1), columncount=dimension(a(), 2)
		Local long lead=bj, r, i, j
	
		for r=bi to rowcount-1+bi {
			if columncount<=lead then exit
			i=r
			while A(i,lead)=0 {
				i++
				if rowcount=i then i=r : lead++ : if columncount<lead then exit
			}
		
			for c =bj to columncount-1+bj {swap A(i, c), A(r, c)}
		
			if A(r, lead)<>0 then
				div1=A(r,lead)
				For c =bj to columncount-1+bj {A(r, c)/=div1}
			end if
			for i=bi to rowcount-1+bi {
				if i<>r then {
					mult=A(i,lead)
					for j=bj to columncount-1+bj {A(i,j)-=A(r,j)*mult}
				}
			}
			lead++
		}
		=a()
	End function
	sub disp(a())
		local long i, j, c=8 // column width plus 1 space
		for i=dimension(a(), 1, 0) to dimension(a(), 1, 1)
			for j=dimension(a(), 2, 0) to dimension(a(), 2, 1)
				Print #f, format$("{0:-"+c+"} ",str$(round(A(i, j), 5),1033));
			Next
			// if pos>0 then print  // not used here
			Print #f, ""
		Next
		Print #f, ""
	End sub
}
Gauss_Jordan_matrix_inversion  // to screen
Gauss_Jordan_matrix_inversion "out.txt"
win "notepad", dir$+"out.txt"
