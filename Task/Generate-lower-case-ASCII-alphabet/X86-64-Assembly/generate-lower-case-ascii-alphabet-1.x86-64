; compile with:
; nasm -f elf64 alpha.asm -o alpha.o
; ld -z noexecstack -no-pie -s alpha.o -o alpha

global _start

section .text
_start:
    xor  rax,    rax
  .loop:
    mov  dil,    'a'                ;Our character
    add  dil,    al                 ;add number in rax/al
    mov  byte[alphabet + rax], dil  ;store character to memory
    inc  rax                        ;increment rax
    cmp  rax,    26                 ;is rax less than 26?
    jl   .loop                      ;yes? jump to .loop
  .print:
    mov  byte[alphabet + rax], 0x0a ;Make the last character an lf.
    mov  rax,    1                  ;write to
    mov  rdi,    1                  ;stdout
    mov  rsi,    alphabet           ;pointer to string
    mov  rdx,    27                 ;the number of characters
    syscall                         ;print it!
  .exit:
    mov  rax,    60                 ;exit
    xor  rdi,    rdi                ;exit code zero
    syscall

section .bss
alphabet: resb 27
