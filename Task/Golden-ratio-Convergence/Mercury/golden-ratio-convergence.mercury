%%% -*- mode: mercury; prolog-indent-width: 2; -*-

:- module golden_ratio_convergence_mercury.

:- interface.
:- import_module io.
:- pred main(io::di, io::uo) is det.

:- implementation.
:- import_module float.
:- import_module int.
:- import_module math.
:- import_module string.

:- pred iterate(float::in, float::out, int::in, int::out) is det.
iterate(!Phi, !N) :-
  Phi1 = (1.0 + (1.0 / !.Phi)),
  N1 = !.N + 1,
  (if (abs(Phi1 - !.Phi) =< 1.0e-5)
   then (!:Phi = Phi1, !:N = N1)
   else (iterate(Phi1, !:Phi, N1, !:N))).

main(!IO) :-
  iterate(1.0, Phi, 0, N),
  print("Result: ", !IO),
  print(from_float(Phi), !IO),
  print(" after ", !IO),
  print(from_int(N), !IO),
  print(" iterations", !IO),
  nl(!IO),
  print("The error is approximately ", !IO),
  print(from_float(Phi - (0.5 * (1.0 + (sqrt(5.0))))), !IO),
  nl(!IO).

:- end_module golden_ratio_convergence_mercury.
