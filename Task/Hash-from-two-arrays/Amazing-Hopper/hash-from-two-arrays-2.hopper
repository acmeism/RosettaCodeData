/* macros HASH */
#defn createhash(_X_)        _X__KEY={#VOID},_X__HASH={#VOID}
#synon createhash            newhash
#defn addhash(_X_,_K_,_H_)   {_H_}push(_X__HASH),{_K_}push(_X__KEY)
#defn getvalue(_X_,_Y_)      _Y_03Rx0W91=0,{_X_,_Y__KEY},array(1),dup,zero?do{{"getvalue: key not found"}throw(2000)}\
                             mov(_Y_03Rx0W91),[_Y_03Rx0W91]get(_Y__HASH),clearmark,
#defn getkey(_X_,_Y_)        _Y_03Rx0W91=0,{_X_,_Y__HASH},array(1),dup,zero?do{{"getkey: value not found"}throw(2001)}\
                             mov(_Y_03Rx0W91),[_Y_03Rx0W91]get(_Y__KEY),clearmark,
#defn modvalue(_K_,_H_,_X_)  _Y_03Rx0W91=0,{_K_,_X__KEY},array(1),dup,zero?do{{"modvalue: key not found"}throw(2002)}\
                             mov(_Y_03Rx0W91),[_Y_03Rx0W91]{_H_}put(_X__HASH),clearmark,
#defn modkey(_H_,_K_,_X_)    _Y_03Rx0W91=0,{_H_,_X__HASH},array(1),dup,zero?do{{"modkey: value not found"}throw(2003)}\
                             mov(_Y_03Rx0W91),[_Y_03Rx0W91]{_K_}put(_X__KEY),clearmark,
#defn putaftervalue(_H_,_K_,_V_,_X_)   _X_03Rx0W91=0,{_H_,_X__HASH},array(1),dup,zero?do{{"putaftervalue: value not found"}throw(2006)}\
                                       plus(1),mov(_X_03Rx0W91),{_K_}{_X_03Rx0W91,_X__KEY}array(3),\
                                       {_V_}{_X_03Rx0W91,_X__HASH}array(3)
#defn putvalue(_H_,_K_,_V_,_X_)   _X_03Rx0W91=0,{_H_,_X__HASH},array(1),dup,zero?do{{"putvalue: value not found"}throw(2006)}\
                                  mov(_X_03Rx0W91),{_K_}{_X_03Rx0W91,_X__KEY}array(3),\
                                  {_V_}{_X_03Rx0W91,_X__HASH}array(3),
#defn putafterkey(_H_,_K_,_V_,_X_)   _X_03Rx0W91=0,{_H_,_X__KEY},array(1),dup,zero?do{{"putafterkey: key not found"}throw(2007)}\
                                     plus(1),mov(_X_03Rx0W91),{_K_}{_X_03Rx0W91,_X__KEY}array(3),\
                                     {_V_}{_X_03Rx0W91,_X__HASH}array(3),

#defn putkey(_H_,_K_,_V_,_X_)  _X_03Rx0W91=0,{_H_,_X__KEY},array(1),dup,zero?do{{"putkey: value not found"}throw(2008)}\
                               mov(_X_03Rx0W91),{_K_}{_X_03Rx0W91,_X__KEY}array(3),\
                               {_V_}{_X_03Rx0W91,_X__HASH}array(3),

#defn delbyvalue(_H_,_X_)    {_H_,_X__HASH},array(1),dup,zero?do{{"delbyvalue: value not found"}throw(2004)},\
                             {_X__KEY},keep,array(4),{_X__HASH},array(4),clearstack

#defn delbykey(_K_,_X_)      {_K_,_X__KEY},array(1),dup,zero?do{{"delbykey: key not found"}throw(2005)},\
                             {_X__KEY},keep,array(4),{_X__HASH},array(4),clearstack

#defn sorthash(_X_)          #RAND,_LEN_#RNDV=0,_DUP_H#RNDV=_X__HASH,_DUP_K#RNDV=_X__KEY,\
                             {_X__KEY}keep,length,mov(_LEN_#RNDV),array(0),\
                             _POS_#RNDV=0,_HASH_LOOP_#RNDV:,[_LEN_#RNDV]get(_X__KEY),{_DUP_K#RNDV}array(1),\
                             mov(_POS_#RNDV),[_POS_#RNDV]get(_DUP_H#RNDV),[_LEN_#RNDV]put(_X__HASH),\
                             --_LEN_#RNDV,{_LEN_#RNDV},jnz(_HASH_LOOP_#RNDV),clear(_DUP_H#RNDV),clear(_DUP_K#RNDV)

#defn lenhash(_X_)           {_X__HASH}length,
#defn hash(_X_)              #RAND,_TMP_#RNDV=0,{_X__HASH,_X__KEY}catcol(_TMP_#RNDV),{_TMP_#RNDV},clear(_TMP_#RNDV),

/* Other... */
/* TRY/CATCH */
#defn try                  swtrap( #CATCH ),
#defn raise(_ERR_,_M_)     {_M_}, throw(_ERR_),
#defn catch(_X_)           jmp(#ENDCATCH), %CATCH:, clearstack,_X_=0, gettry(_X_),  // gettry hace poptry internamente?
#defn finish               %ENDCATCH:, popcatch

/* print... */
#defn println(_X_)        #ATOM #CMPLX,{"\n"} print
#define println           {"\n"}print
