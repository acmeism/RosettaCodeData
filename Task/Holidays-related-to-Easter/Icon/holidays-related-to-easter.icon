link printf

procedure main()
   printf("Christian holidays, related to Easter, for each centennial from 400 to 2100 CE:\n")
   every year := 400 to 2100 by 100 do
      OutputHolidays(year)

   printf("\nChristian holidays, related to Easter, for years from 2010 to 2020 CE:\n")
      every year := 2010 to 2020 do
          OutputHolidays(year)
end

procedure OutputHolidays(year)
static ho,hoo,monL,dayL
initial {
   ho := table()
   ho["Easter"] := 0
   ho["Ascension"] := 39
   ho["Pentecost"] := 49
   ho["Trinity"] := 56
   ho["Corpus"] := 60
   hoo := ["Easter","Ascension","Pentecost","Trinity","Corpus"] # order
   monL := ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
             "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
   dayL := ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri","Sat"]
   }

   easter := CalculateEaster(year)
   printf("%d ",year)
   every d := Add2Easter(easter,ho[k := !hoo]) do
      printf("%d: %s %d %s ", k, dayL[d.wday], d.day, monL[d.month])
   printf("\n")
end

record daterec(year,month,day,wday)

procedure CalculateEaster(year)  #: Calculates Gregorian Easter
   a := year % 19
   b := year / 100
   c := year % 100
   d := b / 4
   e := b % 4
   f := (b + 8) / 25
   g := (b - f + 1) / 3
   h := (19 * a + b - d - g + 15) % 30
   i := c / 4
   k := c % 4
   l := (32 + 2 * e + 2 * i - h - k) % 7
   m := (a + 11 * h + 22 * l) / 451
   n := h + l - 7 * m + 114
   return daterec(year, n / 31, (n % 31) + 1,1)  # year,month, day, "Sun"=1
end

procedure Add2Easter(dr,days)    #: very limited date addition
static dom
initial dom := [,,31,30,31,30,]  # limited days per month
   dr := copy(dr)
   dr.day +:= days
   dr.wday := (dr.wday + days - 1 ) % 7 + 1 # rely upon Easter=Sunday
   while dr.day > dom[dr.month] do {
      dr.day   -:= dom[dr.month]
      dr.month +:= 1
      }
   return dr
end
