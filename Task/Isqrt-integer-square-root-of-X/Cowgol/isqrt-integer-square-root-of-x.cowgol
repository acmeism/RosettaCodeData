include "cowgol.coh";

# Integer square root
sub isqrt(x: uint32): (x0: uint32) is
    x0 := x >> 1;
    if x0 == 0 then
        x0 := x;
        return;
    end if;
    loop
        var x1 := (x0 + x/x0) >> 1;
        if x1 >= x0 then
            break;
        end if;
        x0 := x1;
    end loop;
end sub;

# Power
sub pow(x: uint32, n: uint8): (r: uint32) is
    r := 1;
    while n > 0 loop
        r := r * x;
        n := n - 1;
    end loop;
end sub;

# Print integer square roots of 0..65
var n: uint32 := 0;
var col: uint8 := 11;
while n <= 65 loop
    print_i32(isqrt(n));
    col := col - 1;
    if col == 0 then
        print_nl();
        col := 11;
    else
        print_char(' ');
    end if;
    n := n + 1;
end loop;

# Cowgol only supports 32-bit integers out of the box, so only powers of 7
# up to 7^11 are printed
var x: uint8 := 0;
while x <= 11 loop
    print("isqrt(7^");
    print_i8(x);
    print(") = ");
    print_i32(isqrt(pow(7, x)));
    print_nl();
    x := x + 1;
end loop;
