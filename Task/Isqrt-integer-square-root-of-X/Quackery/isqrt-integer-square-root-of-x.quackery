  [ dup size 3 / times
      [ char , swap
        i 1+ -3 * stuff ]
    dup 0 peek char , =
    if [ behead drop ] ]  is +commas (   $ --> $   )

  [ over size -
    space swap of
    swap join ]           is justify ( $ n --> $   )

  [ 1
    [ 2dup < not while
      2 << again ]
    0
    [ over 1 > while
      dip
        [ 2 >>
          2dup - ]
      dup 1 >>
      unrot -
      dup 0 < iff drop
      else
        [ 2swap nip
          rot over + ]
      again ]
    nip swap ]            is sqrt    (   n --> n n )

( sqrt returns the integer square root and remainder )
( i.e. isqrt of 28 is 5 remainder 3 as (5^2)+3 = 28  )
( To make it task compliant change the last line to  )
( "nip nip ]             is sqrt    (   n --> n   )" )

  66 times [ i^ sqrt drop echo sp ] cr cr

  73 times
    [ 7 i^ 1+ ** sqrt drop
      number$ +commas 41 justify
      echo$ cr
      2 step ]
