$ include "seed7_05.s7i";
  include "bigint.s7i";

const func string: commatize (in bigInteger: bigNum) is func
  result
    var string: stri is "";
  local
    var integer: index is 0;
  begin
    stri := str(bigNum);
    for index range length(stri) - 3 downto 1 step 3 do
      stri := stri[.. index] & "," & stri[succ(index) ..];
    end for;
  end func;

const func bigInteger: isqrt (in bigInteger: x) is func
  result
    var bigInteger: r is 0_;
  local
    var bigInteger: q is 1_;
    var bigInteger: z is 0_;
    var bigInteger: t is 0_;
  begin
    while q <= x do
      q *:= 4_;
    end while;
    z := x;
    while q > 1_ do
      q := q mdiv 4_;
      t := z - r - q;
      r := r mdiv 2_;
      if t >= 0_ then
        z := t;
        r +:= q;
      end if;
    end while;
  end func;

const proc: main is func
  local
    var integer: number is 0;
    var bigInteger: pow7 is 7_;
  begin
    writeln("The integer square roots of integers from 0 to 65 are:");
    for number range 0 to 65 do
      write(isqrt(bigInteger(number)) <& " ");
    end for;
    writeln("\n\nThe integer square roots of powers of 7 from 7**1 up to 7**73 are:");
    writeln("power                                    7 ** power                                                integer square root");
    writeln("----- --------------------------------------------------------------------------------- -----------------------------------------");
    for number range 1 to 73 step 2 do
        writeln(number lpad 2 <& commatize(pow7) lpad 85 <& commatize(isqrt(pow7)) lpad 42);
        pow7 *:= 49_;
    end for;
  end func;
