;; JSON standard types : strings, numbers, and arrays (vectors)
(export-json #(6 7 8 9))  â†’   "[6,7,8,9]"
(export-json #("alpha" "beta" "gamma"))  â†’   "["alpha","beta","gamma"]"

(json-import "[6,7,8,9]")  â†’   #( 6 7 8 9)
(json-import #<< ["alpha","beta","gamma"] >>#)  â†’   #( "alpha" "beta" "gamma")

;; EchoLisp types : dates, rational, complex, big int
(export-json 3/4)  â†’   "{"_instanceof":"Rational","a":3,"b":4}"
(json-import #<< {"_instanceof":"Rational","a":666,"b":42} >>#)  â†’   111/7

;; Symbols
(export-json 'Simon-Gallubert)  â†’   "{"_instanceof":"Symbol","name":"Simon-Gallubert"}"
(json-import #<< {"_instanceof":"Symbol","name":"Antoinette-de-Gabolde"} >>#)
    â†’   Antoinette-de-Gabolde

;; Lists
(define my-list
    (export-json '( 43 4 5 ( 6 7 ( 8 9 )))))
    â†’    "{"_instanceof":"List" ,"array":[43,4,5,{"_instanceof":"List",
    "array":[6,7,{"_instanceof":"List",
    "array":[8,9],"circular":false}],"circular":false}],"circular":false}"

(json-import my-list)  â†’   (43 4 5 (6 7 (8 9)))

;; Structures
(struct Person (name pict))  â†’   #struct:Person [name pict]
(define antoinette (Person "antoinette" "ðŸ‘°"))   â†’   # (antoinette ðŸ‘°)

(export-json antoinette)  â†’
    "{"_instanceof":"Struct", "struct":"Person","id":17,"fields":["antoinette","ðŸ‘°"]}"
(json-import
    #<< {"_instanceof":"Struct","struct":"Person","id":18,"fields":["simon","ðŸŽ©"]} >>#)
	â†’   # (simon ðŸŽ©)
