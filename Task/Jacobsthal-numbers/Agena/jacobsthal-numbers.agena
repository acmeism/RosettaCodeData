scope # find some Jacobsthal and related Numbers
    local constant maxJacobsthal        # highest Jacobsthal number we will find
        , constant maxOblong            # highest Jacobsthal oblong number we will find
        , constant maxJPrime            # number of Jacobsthal primes we will find
                := 29, 20, 10;
    local constant j                    # will hold Jacobsthal numbers
        , constant jl                   # will hold Jacobsthal-Lucas numbers
        , constant jo                   # will hold Jacobsthal oblong numbers
                := seq(), seq(), seq();
    # calculate the Jacobsthal Numbers and related numbers
    # Jacobsthal      : J0  = 0, J1  = 1, Jn  = Jn-1  + 2 × Jn-2
    # Jacobsthal-Lucas: JL0 = 2, JL1 = 1, JLn = JLn-1 + 2 × JLn-2
    # Jacobsthal oblong: JOn = Jn x Jn-1
    # but Agena sequences are indexed from 1, so J0 is in j[ 1 ], JL0 is in jl[ 1 ], etc.
    # but JO1 is in jo[ 1 ], however - also the sequence elements must be added in order
    j[ 1 ] := 0; j[ 2 ] := 1; jl[ 1 ] := 2; jl[ 2 ] := 1; jo[ 1 ] := 0;
    for n from 2 to maxJacobsthal do
        j[  n + 1 ] := j[  n ] + ( 2 * j[  n - 1 ] );
        jl[ n + 1 ] := jl[ n ] + ( 2 * jl[ n - 1 ] )
    od;
    for n to maxOblong do
        jo[ n ] := j[ n + 1 ] * j[ n ]
    od;

    local procedure showNumbers( legend :: string, numbers :: sequence )
        local nCount := 0;
        printf( "First %d %s\n", size numbers, legend );
        for n to size numbers do
            printf( " %11.0f", numbers[ n ] );    # using %11.0f and not %11d as some values will...
            nCount +:= 1;                         #                        ...be larger than 2^32
            if nCount mod 5 = 0 then print() fi
        od
    end;

    # show the various numbers numbers
    showNumbers( "Jacobsthal Numbers:",        j  );
    showNumbers( "Jacobsthal-Lucas Numbers:",  jl );
    showNumbers( "Jacobsthal oblong Numbers:", jo );
    # find some prime Jacobsthal numbers
    local jn1, jn2, pCount := j[ 2 ], j[ 1 ], 0;
    printf( "First %d Jacobstal primes:\n   n  Jn\n", maxJPrime );
    for n from 2 while pCount < maxJPrime do
        local constant jn := jn1 + ( 2 * jn2 );
        jn2, jn1 := jn1, jn;
        if numtheory.isprime( jn ) then
            pCount +:= 1;
            printf( "%4d: %d\n", n, jn )
        fi
    od
end
