	org	100h
	jmp	demo
	;;;	Count jewels.
	;;;	Input: BC = jewels, DE = stones.
	;;;	Output: BC = count
	;;;	Destroyed: A, DE, HL
jewel:	lxi	h,jarr	; Zero out the page of memory
	xra	a
jzero:	mov	m,a
	inr	l
	jnz	jzero
jrjwl:	ldax	b	; Get jewel
	inx	b
	mov	l,a	; Mark the corresponding byte in the array
	inr	m
	ana	a	; If 'jewel' is 0, we've reached the end
	jnz	jrjwl	; Otherwise, do next jewel
	lxi	b,0	; BC = count (we no longer need the jewel string)
jrstn:	ldax	d	; Get stone
	inx	d
	ana	a	; If zero, we're done
	rz
	mov	l,a	; Get corresponding byte in array
	mov	a,m
	ana	a
	jz	jrstn	; If zero, it is not a jewel
	inx	b	; But otherwise, it is a jewel
	jmp	jrstn
	;;;	Demo code
demo:	lxi	b,jewels	; Set up registers
	lxi	d,stones
	call	jewel		; Call the function
	;;;	Print the number
	lxi	h,num	; Pointer to number string
	push	h	; Push to stack
	mov	h,b	; HL = number to print
	mov	l,c
	lxi	b,-10	; Divisor
dgt:	lxi	d,-1	; Quotient
dgtlp:	inx	d	; Divide using trial subtraction
	dad	b
	jc	dgtlp
	mvi	a,'0'+10
	add	l	; HL = remainder-10
	pop	h	; Get pointer
	dcx	h	; Decrement pointer
	mov	m,a	; Store digit
	push	h	; Put pointer back
	xchg		; Go on with new quotient
	mov	a,h	; If 0, we're done
	ana	l
	jnz	dgt	; If not 0, next digit
	pop	d	; Get pointer and put it in DE
	mvi	c,9	; CP/M syscall to print string
	jmp	5
	db	'*****'	; Placeholder for ASCII number output
num:	db	'$'
	;;;	Example from the task
jewels:	db	'aA',0
stones:	db	'aAAbbbb',0
	;;;	Next free page of memory is used for the jewel array
jpage:	equ	$/256+1
jarr:	equ	jpage*256
