	cpu	8086
	bits	16
	org	100h
section	.text
	jmp	demo
	;;;	Count jewels.
	;;;	Input: DS:SI = jewels, DS:DX = stones
	;;;	Output: CX = how many stones are jewels
	;;;	Destroyed: AX, BX, SI, DI
jewel:	xor	ax,ax
	mov	cx,128		; Allocate 256 bytes (128 words) on stack
.zloop:	push	ax		; Set them all to zero
	loop	.zloop
	mov	di,sp		; DI = start of array
	xor	bh,bh
.sjwl:	lodsb			; Get jewel
	mov	bl,al
	inc	byte [ss:di+bx]	; Set corresponding byte
	test	al,al		; If not zero, there are more jewels
	jnz	.sjwl
	mov	si,dx		; Read stones
.sstn:	lodsb			; Get stone
	mov	bl,al		; Get corresponding byte
	mov	bl,[ss:di+bx]
	add	cx,bx		; Add to count (as word)
	test	al,al		; If not zero, there are more stones
	jnz	.sstn
	add	sp,256		; Otherwise, we are done - free the array
	dec	cx		; The string terminator is a 'jewel', so remove
	ret
	;;;	Demo
demo:	mov	si,jewels	; Set up registers
	mov	dx,stones
	call	jewel		; Call the function
	;;;	Print number
	mov	ax,10		; Result is in CX
	xchg	ax,cx		; Set AX to result and CX to divisor (10)
	mov	bx,num		; Number pointer
dgt:	xor	dx,dx
	div	cx		; Divide AX by 10
	add	dl,'0'		; Remainder is in DX - add ASCII 0
	dec	bx		; Store digit in string
	mov	[bx],dl
	test	ax,ax		; Any more digits?
	jnz	dgt		; If so, next digit
	mov	dx,bx		; When done, print string
	mov	ah,9
	int	21h
	ret
section	.data
	db	'*****'		; Placeholder for ASCII number output
num:	db	'$'
stones:	db	'aAAbbbb',0	; Example from the task
jewels:	db	'aA',0
