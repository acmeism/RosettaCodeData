local
  val base = 10;
  fun kaprekar
        (num, numSquared, numDiv, numRem, power) where (base ^ power >= numSquared) = ()

    |   (num, numSquared, numDiv, numRem, power) where ((numDiv = 0) or (numRem = 0))=
          kaprekar (num, numSquared, numSquared div (base ^ power ), numSquared rem (base ^ power), power + 1)

    |   (num, numSquared, numDiv, numRem, power) =
          if ((numDiv + numRem) = num) then
            num
          else
            kaprekar (num, numSquared, numSquared div (base ^ power ), numSquared rem (base ^ power), power + 1)

    |   num =
          if (num = 1) then
            num
          else
            kaprekar (num, num * num, (num * num) div base, (num * num) rem base, 1)

in
  fun kaprekar_list
       ([], collector) = rev collector
    |  (num :: nums, collector ) =
         let
           val k = kaprekar num
         in
           if (k = ()) then
             kaprekar_list (nums, collector)
           else
             kaprekar_list (nums, num :: collector)
         end
    |  (num :: nums) = kaprekar_list (num :: nums, [])
end
;
