go =>
  println(base=10),
  println(kaprekar_number(10,10000)),
  nl,
  println("Testing 1000000:"),

  K10 = kaprekar_number(10,1000000),
  % println(K10),
  nl,
  println(base=16),
  K16 = [I.to_hex_string() : I in kaprekar_number(16,1000000)],
  % println(K16),
  nl,

  println(base=17),
  K17 = [to_radix_string(I,17).to_lowercase : I in  kaprekar_number(17,1000000)],
  % println(K17),
  nl,

  println(base=36),
  K36 = [to_radix_string(I,36) : I in  kaprekar_number(36,1000000)],
  % println(K36),

  nl.

kaprekar_number(Base,Limit) = Ks =>
  N = ceiling(log(Base,Limit)),
  PaddyCnt = 0,
  Ks = [],
  foreach(Nz in 1..N)
    foreach(K in Base**(Nz-1)..(Base**Nz)-1, K <= Limit)
       if (K*(K-1)) mod (Base-1) == 0 then
          Found = false,
	  foreach(N2 in Nz..Nz*2-1,Found = false)
 	     B = Base**N2,
	     Nr = K*(B-K) div (B-1),
	     Q = K-Nr,
	     if K*K==Q*B+Nr, 0<Nr then
                PaddyCnt := PaddyCnt+1,
                Ks := Ks ++ [K],
		Found := true
	     end
          end
       end
    end
  end,
  println(len=Ks.length).
