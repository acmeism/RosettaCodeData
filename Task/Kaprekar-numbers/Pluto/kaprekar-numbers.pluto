do  -- find some Kaprekar numbers

    local fmt = require( "fmt" )                          -- RC formatting module

    -- returns true if n is a Kaprekar number, false otherwise
    local function isKaprekar( n )
        if   n < 1 then -- 0 and -ve numbers are not Kaprekar numbers
            return false
        elseif n == 1 then  -- 1 is defined to be a Kaprekar number
            return true
        elseif n % 9 > 1 then -- cant be Kapreker - see notes on the Maple sample
            return false
        else
            -- n is a Kaprekar number if the digits of its
            -- square can be partitioned into two numbers
            -- that sum to n
            local nSquared   <const> = n * n
            local powerOfTen         = 10
            local result             = false
            while nSquared > powerOfTen and not result do
                local leftPart  <const> = nSquared // powerOfTen
                local rightPart <const> = nSquared  % powerOfTen
                result = ( ( leftPart + rightPart ) == n and rightPart != 0 )
                powerOfTen *= 10
            end
            return result
        end
    end

    -- count the Kaprekar numbers up to 1 000 000 printing all those below 10 000
    do
        local maxNumber <const> = 1_000_000
        local kn        <const> = {}
        for n = 1, maxNumber do
            if isKaprekar( n ) then
                kn:insert( n )
            end
        end
        fmt.write( "Kaprekar numbers below 10 000: " )
        fmt.lwrite( kn:filtered( |v| -> v < 10_000 ), " ", "" )
        fmt.write( "\nThere are %d Kaprekar numbers below %d\n", #kn, maxNumber )
    end
end
