/* ARM assembly Raspberry PI  */
/*  program enterYN.s   */

/* REMARK 1 : this program use routines in a include file
   see task Include a file language arm assembly
   for the routine affichageMess conversion10
   see at end of this program the instruction include */

/*******************************************/
/* Constantes                              */
/*******************************************/
.include "../constantes.inc"
.equ BUFFERSIZE,    80
.equ STDIN,    1
.equ READ,     3

/*******************************************/
/* macros                             */
/*******************************************/
//.include "../../ficmacros32.inc"            @ for developper debugging

/*********************************/
/* Initialized data              */
/*********************************/
.data
szMessDebutPgm:    .asciz "Program 32 bits start. \n"
szCarriageReturn:  .asciz "\n"
szMessFinOK:       .asciz "Program normal end. \n"
szMessErreur:      .asciz "Error  !!!\n"
szMessQuest:       .asciz "Enter Y or N :\n"
szMessAnswerY:     .asciz "you have entered Yes.\n"
szMessAnswerN:     .asciz "you have entered No.\n"

.align 4
/*********************************/
/* UnInitialized data            */
/*********************************/
.bss
.align 4

/*********************************/
/*  code section                 */
/*********************************/
.text
.global main
main:
    ldr r0,iAdrszMessDebutPgm
    bl affichageMess            @ start message

    ldr r0,iAdrszMessQuest
    bl affichageMess

    bl keyboardInput
    cmp r0,#'Y'
    beq 1f
    cmp r0,#'y'
    beq 1f
    cmp r0,#'N'
    beq 2f
    cmp r0,#'n'
    beq 2f
    b 99f                       @ error
1:
    ldr r0,iAdrszMessAnswerY
    bl affichageMess
    b 3f
2:
    ldr r0,iAdrszMessAnswerN
    bl affichageMess
    b 3f
3:

    ldr r0,iAdrszMessFinOK
    bl affichageMess
    b 100f
99:
    ldr r0,iAdrszMessErreur     @ error
    bl affichageMess
    mov r0, #1                  @ return code error
    b 100f
100:
    mov r7,#EXIT                @ program end
    svc #0                      @ system call
iAdrszMessDebutPgm:          .int szMessDebutPgm
iAdrszMessFinOK:             .int szMessFinOK
iAdrszMessErreur:            .int szMessErreur
iAdrszCarriageReturn:        .int szCarriageReturn
iAdrszMessQuest:             .int szMessQuest
iAdrszMessAnswerY:           .int szMessAnswerY
iAdrszMessAnswerN:           .int szMessAnswerN
/******************************************************************/
/*            string entry                                       */
/******************************************************************/
/* r0 return the first character of human entry */
keyboardInput:
    push {r1-r7,lr}        @ save registers
    sub sp,sp,#BUFFERSIZE  @ reserve on stack
    mov r4,sp
    mov r0,#STDIN          @ Linux input console
    mov r1,r4              @ buffer address
    mov r2,#BUFFERSIZE     @ buffer size
    mov r7,#READ           @ request to read datas
    svc 0                  @ call system
    ldrb r0,[r4]           @ load first character
100:
    add sp,sp,#BUFFERSIZE  @ stack free
    pop {r1-r7,pc}

/***************************************************/
/*      ROUTINES INCLUDE                 */
/***************************************************/
.include "../affichage.inc"
