using MathProgBase

immutable KPDSupply{S<:String, T<:Integer}
    item::S
    weight::T
    value::T
    quant::T
end

function solve{S<:String, T<:Integer}(gear::Array{KPDSupply{S,T},1},
                                      capacity::T)
    w = map(x->x.weight, gear)
    v = map(x->x.value, gear)
    q = map(x->x.quant, gear)
    sol = mixintprog(-v, w', '<', capacity, :Int, 0, q)
    sol.status == :Optimal || error("This Problem could not be solved")
    if all(q .== 1)
        return gear[sol.sol .== 1.0]
    else
        pack = KPDSupply[]
        s = int(sol.sol)
        for (i, g) in enumerate(gear)
            s[i] != 0 || continue
            push!(pack, KPDSupply(g.item, g.weight, g.value, s[i]))
        end
        return pack
    end
end
