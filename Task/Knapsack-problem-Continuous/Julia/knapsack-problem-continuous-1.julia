immutable KPCSupply{S<:String, T<:Real}
    item::S
    weight::T
    value::T
    uvalue::T
end
Base.isless(a::KPCSupply, b::KPCSupply) = a.uvalue<b.uvalue

function KPCSupply{S<:String, T<:Real}(item::S, weight::T, value::T)
    KPCSupply(item, weight, value, value/weight)
end

function solve{S<:String, T<:Real}(store::Array{KPCSupply{S,T},1},
                                   capacity::T)
    ksack = KPCSupply{S,T}[]
    kweight = zero(T)
    for s in sort(store, rev=true)
        if kweight + s.weight <= capacity
            kweight += s.weight
            push!(ksack, s)
        else
            w = capacity-kweight
            v = w*s.uvalue
            push!(ksack, KPCSupply(s.item, w, v, s.uvalue))
            break
        end
    end
    return ksack
end
