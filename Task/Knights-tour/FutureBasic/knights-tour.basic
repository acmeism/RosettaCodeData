include "NSLog.incl"
output @"Knight's Move"

_window = 1
_layerView = 10

begin record moved
  CGPoint offset
  Int SquareMove
end record

begin globals
dim move(8) as moved
int Squares(64)
CFMutableArrayRef gFinalArray
end globals

gFinalArray = fn MutableArrayWithCapacity(0)

local fn PointOffset( pt as CGPoint,offset as CGPoint) as CGPoint
  pt.x += offset.x
  pt.y += offset.y
end fn = pt

local fn FindLocation( x as int ) as CGPoint
  float a,b
  float y = x/8
  float z = frac(y)
  CGPoint pts

  If z == 0
    a = 8
    b = 8 - fix(y)
  else
    a = z*8
    b = 8 - fix(y) - 1
  end if

  pts.x = a*50 - 25
  pts.y = b*50 + 25

end fn = pts

local fn SetRecord
  for int x = 1 to 64
    Squares(x) = 0
  next
  //8 possible moves for a Knight
  move.offset.x(1) = -50
  move.offset.y(1) = -100
  move.SquareMove(1) = 15
  move.offset.x(2) = 50
  move.offset.y(2) = -100
  move.SquareMove(2) = 17
  move.offset.x(3) = -50
  move.offset.y(3) = 100
  move.SquareMove(3) = -17
  move.offset.x(4) = 50
  move.offset.y(4) = 100
  move.SquareMove(4) = -15
  move.offset.x(5) = 100
  move.offset.y(5) = 50
  move.SquareMove(5) = -6
  move.offset.x(6) = -100
  move.offset.y(6) = 50
  move.SquareMove(6) = -10
  move.offset.x(7) = 100
  move.offset.y(7) = -50
  move.SquareMove(7) = 10
  move.offset.x(8) = -100
  move.offset.y(8) = -50
  move.SquareMove(8) = 6

end fn

local fn Check(y as int, x as int ) as bool
  bool ans = NO

  select y
    case 1
      select x
        case > 48
          ans = No
        case 1,9,17,25,33,41,49,57
          ans = NO
        case else
          ans = YES
      end select
    case 2
      select x
        case > 48
          ans = NO
        case 8,16,24,32,40,48,56,64
          ans = NO
        case else
          ans = YES
      end select
    case 3
      select x
        case < 16
          ans = NO
        case 1,9,17,25,33,41,49,57
          ans = NO
        case else
          ans = YES
      end select
    case 4
      select x
        case < 16
          ans = NO
        case 8,16,24,32,40,48,56,64
          ans = NO
        case else
          ans = YES
      end select
    case 5
      select x
        case < 9
          ans = NO
        case 7,8,15,16,23,24,31,32,39,40,47,48,55,56,63,64
          ans = NO
        case else
          ans = YES
      end select
    case 6
      select x
        case < 9
          ans = NO
        case 1,2,9,10,17,18,25,26,33,34,41,42,49,50,57,58
          ans = NO
        case else
          ans = YES
      end select
    case 7
      select x
        case > 56
          ans = NO
        case 7,8,15,16,23,24,31,32,39,40,47,48,55,56,63,64
          ans = NO
        case else
          ans = YES
      end select
    case 8
      select x
        case > 56
          ans = NO
        case 1,2,9,10,17,18,25,26,33,34,41,42,49,50,57,58
          ans = NO
        case else
          ans = YES
      end select
  end select
end fn = ans

local fn DrawKnightsPassage( tag as long, array as CFArrayRef) as int
  CALayerRef        layer
  CAShapeLayerRef   shapeLayer
  BezierPathRef     path = fn BezierPathInit
  int x,count = fn ArrayCount(array)
  int square = fn StringIntValue(fn ArrayObjectAtIndex( array, 0))

  layer = fn ViewLayer( tag )
  CALayerSetBackgroundColor( layer, fn ColorClear )
  CALayerSetBorderWidth( layer, 2 )
  shapeLayer = fn CAShapeLayerInit
  CGPoint pt = fn FindLocation( square)
  Squares(square) = 1
  BezierPathMoveToPoint( path, pt)
  for x = 1 to count - 2
    square = fn StringIntValue(fn ArrayObjectAtIndex( array, x))
    pt = fn FindLocation( square)
    BezierPathLineToPoint( path, pt)
  next

  CAShapeLayerSetPath( shapeLayer, path )
  CAShapeLayerSetLineWidth( shapeLayer, 2 )
  CAShapeLayerSetLineCap( shapeLayer, kCALineCapRound )
  CAShapeLayerSetStrokeColor( shapeLayer, fn ColorBlue )
  CAShapeLayerSetFillColor( shapeLayer, fn ColorClear )
  CALayerAddSublayer( layer, shapeLayer )

end fn = x

local fn KnightsTour as int
  int x,j,y
  int square = rnd(64)//58 //Starting square 58= White left Knight this is random start
  CFMutableStringRef array = fn MutableStringWithCapacity(0)
  CGPoint pt = fn FindLocation( square)
  for x = 1 to 64
    Squares(x) = 0
  next
  Squares(square) = 1
  MutableStringAppendString( array, fn StringWithFormat( @"%d:", square ))

  for x = 1 to 63
    j = 1
    do
      y = rnd(8)
      j++
    until (square > 0 && square < 65 && (fn Check(y,square)) && square + move.SquareMove(y) > 0 && Squares(square + move.SquareMove(y)) == 0) || j == 35
    if j == 35 then exit next
    square += move.SquareMove(y)
    MutableStringAppendString( array, fn StringWithFormat( @"%d:", square ))

    pt = fn PointOffset( pt, move.offset(y))
    Squares(square) = 1
  next
  MutableArrayAddObject( gFinalArray, (CFTypeRef) array )

end fn = x

void local fn BuildWnd
  CGRect r
  int x,y,j,Item(100000),max
  ColorRef hue(1) // Thanks Jay
  CALayerRef layer
  bool i
  CFTypeRef ans
  CFArrayRef array

  window _window, @"Chess Board", ( 0,0,450,450)
  view _layerView, (20,20,400,400)
  WindowCenter(_window)
  WindowSubclassContentView(_window)
  ViewSetFlipped( _windowContentViewTag, YES )
  ViewSetNeedsDisplay( _windowContentViewTag )
  ViewSetWantsLayer( _layerView, YES )
  layer = fn ViewLayer( _layerview )
  ViewSetFlipped( _layerview, YES )
  CALayerSetBackgroundColor( layer, fn ColorClear )
  CALayerSetBorderWidth( layer, 2 )

  r = fn CGREctMake( 20,20,50,50 )
  hue(NO) = fn colorLightGray
  hue(YES) = fn ColorClear
  i = YES
  j = 1
  for x = 1 to 8
    for y = 1 to 8
      rect fill r, hue(i)
      print %(r.origin.x,r.origin.y) j
      r = fn CGRectOffset( r, 50,0)
      j++
      if i == YES then i = NO else i = YES
    next
    if i == YES then i = NO else i = YES
    r = fn CGRectOffset( r , - 400, 50 )
  next
  for x = 1 to 100000
    item(x) = fn KnightsTour
  next
  max = 1
  y = 1
  for x = 1 to 99999
    if item(x) > max then max = item(x):y = x
  next

  ans = fn ArrayObjectAtIndex(gFinalArray, y-1 )
  array = fn StringComponentsSeparatedByString(ans, @":" )

  fn DrawKnightsPassage( _layerview, array)
  NSLog(@"Starts at %@",fn ArrayObjectAtIndex( array, 0))
  NSLog(@"max= %d Item= %d try= %d", max, item(y), y )

end fn

fn SetRecord
fn BuildWnd

HandleEvents
