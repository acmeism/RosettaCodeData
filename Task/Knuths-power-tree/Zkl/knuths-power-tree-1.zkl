# remember the tree generation state and expand on demand
fcn path(n,p=Dictionary(1,0),lvl=List(List(1))){
   if(n==0) return(T);
   while(not p.holds(n)){
      q:=List();
      foreach x,y in (lvl[0],path(x,p,lvl)){
         if(p.holds(x+y)) break;  // not this y
	 y=x+y; p[y]=x;
	 q.append(y);
      }
      lvl[0]=q
   }
   path(p[n],p,lvl) + n
}

fcn tree_pow(x,n,path){
   r,p:=Dictionary(0,1, 1,x), 0;
   foreach i in (path){ r[i]=r[i-p]*r[p]; p=i; }
   r[n]
}

fcn show_pow(x,n){
   fmt:="%d: %s\n" + T("%g^%d = %f", "%d^%d = %d")[x==Int(x)] + "\n";
   println(fmt.fmt(n,p:=path(n),x,n,tree_pow(x,n,p)))
}
