#!/usr/bin/hopper

#include <hopper.h>

#proto generateKockCurve(_S_,_I_)
#proto kochPoints(_S_,_I_)
#proto kochNext(_P_)

main:
   SQRT3_2 = 0.86602540378444
   _generate Kock Curve (600, 5)
exit(0)

.locals
generate Kock Curve (_SIZE_, _ITERATIONS_)
    {"<svg xmlns='http://www.w3.org/2000/svg' width='"}
    {_SIZE_,"' height='",_SIZE_,"'>\n"}
    {"<rect width='100%' height='100%' fill='black'/>\n"}
    {"<path stroke-width='1' stroke='white' fill='none' d='"} print

    points=0, let( points := _koch Points(_SIZE_, _ITERATIONS_) )

    vSize=0,size(points),mov(vSize),rows(vSize,nRows)

    for (i = 1; n= nRows, {i}lethan(n), ++i)
        iif( {i,1} eq?, {"M"} , {"L"}), [i,1]get(points), {","}, [i,2]get(points), {"\n"},print
    next
    {"z'/>\n</svg>\n"}print
back

koch Points(_SIZE_, _ITERATIONS_)
    #hl {
         Length = ((_SIZE_ * SQRT3_2) * 0.95)
         x = (_SIZE_ - Length)/2
         y = ((_SIZE_/2) - (Length * SQRT3_2 / 3))
    }
    points={}
    {x, y},addrow(points)
    {x} PLUS ( {Length}div by(2) ), {y} PLUS ( {Length} mul by ( SQRT3_2)), addrow(points)
    {x} plus ( Length), {y},addrow(points)
    {x, y},addrow(points)

    for ( i = 1, {i} lethan ( _ITERATIONS_), ++i)
        let clear( points := _koch Next(points))
    next
    {points}
back

koch Next(points)
    vSize=0,size(points),mov(vSize)

    rows(vSize,nRows)

    output={}

    x0 = 0,y0=0, x1=0, y1=0

    for ( i = 1, {i}plus(1) lethan( nRows ), ++i)
       #hl{
           x0 = points[i,1]
           y0 = points[i,2]
           x1 = points[(i + 1),1]
           y1 = points[(i + 1),2]
           dy = y1 - y0
           dx = x1 - x0
        }
        {x0, y0} addrow(output)
        #hl{
           x0 + (dx/3)
           y0 + (dy/3)
        }, addrow(output)
        #hl{
           x0 + (dx/2) - (dy * (SQRT3_2/3))
           y0 + (dy/2) + (dx * (SQRT3_2/3))
        },addrow(output)
        #hl{
           x0 + (2 * (dx/3))
           y0 + (2 * (dy/3))
        },addrow(output)

    next
    #hl{
       x1
       y1
    },addrow(output)
    {output}
back
