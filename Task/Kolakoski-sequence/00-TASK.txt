The [[wp:Kolakoski sequence|Kolakoski sequence]] is an infinite sequence of [[wp:Natural number|natural numbers]], (excluding zero); with the property that:
: ''if you form a new sequence from the counts of runs of the same number in the first sequence, this new sequence is the same as the first sequence''.

;Example:
This is ''not'' a Kolakoski sequence:
<pre>1,1,2,2,2,1,2,2,1,2,...</pre>
Its sequence of run counts, (sometimes called a run length encoding, (RLE); but a true RLE also gives the character that each run encodes), is calculated like this:

: Starting from the leftmost number of the sequence we have <code>2</code> ones, followed by <code>3</code> twos, then <code>1</code> ones, <code>2</code> twos, <code>1</code> one, ...

The above gives the RLE of:
<pre>2, 3, 1, 2, 1, ...</pre>

The original sequence is different from its RLE in this case. '''It would be the same for a true Kolakoski sequence'''.

;Creating a Kolakoski sequence:

Lets start with the two numbers <code>(1, 2)</code> that we will cycle through; i.e. they will be used in this order:<br> <code>1,2,1,2,1,2,....</code>

# We start the sequence <code>s</code> with the first item from the cycle <code>c</code>:<br> <code>1</code>
# An index, <code>k</code>, into the, (expanding), sequence will step, or index through each item of the sequence <code>s</code> from the first, at its own rate.<br> 
We will arrange that the <code>k</code>'th item of <code>s</code> states how many ''times'' the ''last'' item of <code>s</code>should appear at the end of <code>s</code>.

We started <code>s</code> with <code>1</code> and therefore <code>s[k]</code> states that it should appear only the <code>1</code> time.<br>

<ol start="3">
<li><p>Increment <code>k</code></p></li>
<li><p>Get the next item from <code>c</code> and append it to the end of sequence <code>s</code>. <code>s</code> will then become:<br> <code>1, 2</code></p></li>
<li><p><code>k</code> was moved to the second item in the list and <code>s[k]</code> states that it should appear two times, so append another of the last item to the sequence <code>s</code>:<br> <code>1, 2,2</code></p></li>
<li><p>Increment <code>k</code></p></li>
<li><p>Append the next item from the cycle to the list:<br> <code>1, 2,2, 1</code></p></li>
<li><p><code>k</code> is now at the third item in the list that states that the last item should appear twice so add another copy of the last item to the sequence <code>s</code>:<br> <code>1, 2,2, 1,1</code></p></li>
<li><p>increment k</p></li></ol>

...

'''Note''' that the RLE of <code>1, 2, 2, 1, 1, ...</code> begins <code>1, 2, 2</code> which is the beginning of the original sequence. The generation algorithm ensures that this will always be the case.

;Task:
# Create a routine/proceedure/function/... that given an initial ordered list/array/tuple etc of the natural numbers <code>(1, 2)</code>, returns the next number from the list when accessed in a cycle.
# Create another routine that when given the initial ordered list <code>(1, 2)</code> and the minimum length of the sequence  to generate; uses the first routine and the algorithm above, to generate at least the requested first members of the kolakoski sequence.
# Create a routine that when given a sequence, creates the run length encoding of that sequence (as defined above) and returns the result of checking if sequence starts with the exact members of its RLE. (But ''note'', due to sampling, do not compare the last member of the RLE).
# Show, on this page, (compactly), the first 20 members of the sequence generated from <code>(1, 2)</code>
# Check the sequence againt its RLE.
# Show, on this page, the first 20 members of the sequence generated from <code>(2, 1)</code>
# Check the sequence againt its RLE.
# Show, on this page, the first 30 members of the Kolakoski sequence generated from <code>(1, 3, 1, 2)</code>
# Check the sequence againt its RLE.
# Show, on this page, the first 30 members of the Kolakoski sequence generated from <code>(1, 3, 2, 1)</code>
# Check the sequence againt its RLE.
(There are [[wp:Kolakoski_sequence#From_finite_integer_sets|rules]] on generating Kolakoski sequences from this method that are broken by the last example)

