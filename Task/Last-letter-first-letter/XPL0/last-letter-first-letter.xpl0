string  0;              \use zero-terminated strings
def  NamesLen = 70;
int  Path(NamesLen), MaxPath(NamesLen);
int  Names, MaxPathEnd, MaxPathCnt;

proc Search(Depth);     \Depth-first search for longest chain of Names
int  Depth;
char Name;
int  LastLetter, FirstLetter, Len, I, J, T;
[Path(Depth):= Names(Depth);            \record path being searched
Name:= Names(Depth);                    \get last letter of Name at Depth
Len:= 0;  while Name(Len) do Len:= Len+1;
LastLetter:= Name(Len-1);
Depth:= Depth+1;

for I:= Depth to NamesLen-1 do          \for remaining Names not in path...
    [Name:= Names(I);                   \get first letter of a Name
    FirstLetter:= Name(0);
    if FirstLetter = LastLetter then    \there is a next Name
        [if Depth > MaxPathEnd then     \record this longer path
            [for J:= 0 to Depth-1 do    \copy path already searched
                MaxPath(J):= Path(J);
            MaxPath(Depth):= Name;      \append next Name
            MaxPathEnd:= Depth;
            MaxPathCnt:= 1;             \reset counter for this longer path
            ]
        else if Depth = MaxPathEnd then
            MaxPathCnt:= MaxPathCnt+1;  \count instances of longest path

        T:= Names(Depth);  Names(Depth):= Names(I);  Names(I):= T; \swap Names
        Search(Depth);                                             \recurse
        Names(I):= Names(Depth);  Names(Depth):= T;                \restore order
        ];
    ];
];

int  I, T;
[Names:= [                              \Pokemon names
    "audino", "bagon", "baltoy", "banette", "bidoof",
    "braviary", "bronzor", "carracosta", "charmeleon", "cresselia",
    "croagunk", "darmanitan", "deino", "emboar", "emolga",
    "exeggcute", "gabite", "girafarig", "gulpin", "haxorus",
    "heatmor", "heatran", "ivysaur", "jellicent", "jumpluff",
    "kangaskhan", "kricketune", "landorus", "ledyba", "loudred",
    "lumineon", "lunatone", "machamp", "magnezone", "mamoswine",
    "nosepass", "petilil", "pidgeotto", "pikachu", "pinsir",
    "poliwrath", "poochyena", "porygon2", "porygonz", "registeel",
    "relicanth", "remoraid", "rufflet", "sableye", "scolipede",
    "scrafty", "seaking", "sealeo", "silcoon", "simisear",
    "snivy", "snorlax", "spoink", "starly", "tirtouga",
    "trapinch", "treecko", "tyrogue", "vigoroth", "vulpix",
    "wailord", "wartortle", "whismur", "wingull", "yamask"];
MaxPathEnd:= 0;  MaxPathCnt:= 0;

for I:= 0 to NamesLen-1 do
    [T:= Names(0);  Names(0):= Names(I);  Names(I):= T; \swap out pending Name
    Search(0);
    Names(I):= Names(0);  Names(0):= T;                 \restore Names order
    ];
Text(0, "Maximum path length : ");  IntOut(0, MaxPathEnd+1);  CrLf(0);
Text(0, "Paths of that length: ");  IntOut(0, MaxPathCnt);    CrLf(0);
Text(0, "Example path of that length:");
for I:= 0 to MaxPathEnd do
    [if rem(I/5) then ChOut(0, ^ ) else CrLf(0);
    Text(0, MaxPath(I));
    ];
CrLf(0);
]
