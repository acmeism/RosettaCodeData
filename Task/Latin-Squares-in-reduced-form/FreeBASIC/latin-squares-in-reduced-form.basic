Type Matrix
    Dim dato(Any) As Integer
    Dim rows As Integer
    Dim cols As Integer
End Type

Sub PrintSquare(latin As Matrix)
    For i As Integer = 0 To latin.rows - 1
        Print "[";
        For j As Integer = 0 To latin.cols - 1
            If j > 0 Then Print ", ";
            Print Str(latin.dato(i * latin.cols + j));
        Next j
        Print "]"
    Next i
    Print
End Sub

Sub RecurseDList(a() As Integer, Byref r As Matrix, first As Integer, last As Integer, n As Integer)
    If last = first Then
        ' Bottom of recursion. You get here once for each permutation
        ' Test if permutation is deranged
        For i As Integer = 1 To n-1
            Dim v As Integer = a(i)
            If i = v Then Return ' No, ignore it
        Next i
        ' Yes, save a copy with 1 based indexing
        For i As Integer = 0 To n-1
            r.dato(r.rows * n + i) = a(i) + 1
        Next i
        r.rows += 1
        Return
    End If

    For i As Integer = last To 1 Step -1
        Swap a(i), a(last)
        RecurseDList(a(), r, first, last - 1, n)
        Swap a(i), a(last)
    Next i
End Sub

Function DList(n As Integer, start As Integer) As Matrix
    start -= 1 ' use 0 based indexes
    Dim a(0 To n-1) As Integer
    For i As Integer = 0 To n-1
        a(i) = i
    Next i
    Swap a(start), a(0)

    ' Sort a(1) to a(n-1)
    For i As Integer = 1 To n-2
        For j As Integer = i+1 To n-1
            If a(i) > a(j) Then Swap a(i), a(j)
        Next j
    Next i

    Dim first As Integer = a(1)
    Dim r As Matrix
    r.rows = 0
    r.cols = n
    Redim r.dato(0 To 99 * n - 1) ' Preallocate space for up to 100 permutations

    RecurseDList(a(), r, first, n - 1, n)
    Return r
End Function

Sub RecurseReducedLatinSquares(Byref rlatin As Matrix, Byref count As Uinteger, i As Integer, n As Integer, echo As Boolean)
    Dim rows As Matrix = DList(n, i)

    For r As Integer = 0 To rows.rows - 1
        For j As Integer = 0 To n - 1
            rlatin.dato((i - 1) * n + j) = rows.dato(r * n + j)
        Next j
        For k As Integer = 0 To i - 2
            For j As Integer = 1 To n - 1
                If rlatin.dato(k * n + j) = rlatin.dato((i - 1) * n + j) Then
                    If r < rows.rows - 1 Then Goto outer
                    If i > 2 Then Return
                End If
            Next j
        Next k
        If i < n Then
            RecurseReducedLatinSquares(rlatin, count, i + 1, n, echo)
        Else
            count += 1
            If echo Then PrintSquare(rlatin)
        End If
        outer:
    Next r
End Sub

Function ReducedLatinSquares(n As Integer, echo As Boolean) As Uinteger
    If n <= 0 Then
        If echo Then Print !"[]\n"
        Return 0
    End If
    If n = 1 Then
        If echo Then Print !"[1]\n"
        Return 1
    End If

    Dim rlatin As Matrix
    rlatin.rows = n
    rlatin.cols = n
    Redim rlatin.dato(0 To n * n - 1)

    ' First row
    For j As Integer = 0 To n - 1
        rlatin.dato(j) = j + 1
    Next j

    Dim count As Uinteger = 0

    ' Remaining rows
    RecurseReducedLatinSquares(rlatin, count, 2, n, echo)
    Return count
End Function

Function Factorial(n As Uinteger) As Uinteger
    If n <= 1 Then Return 1
    Return n * Factorial(n - 1)
End Function

Print !"The four reduced latin squares of order 4 are:\n"
ReducedLatinSquares(4, True)

Print "The size of the set of reduced latin squares for the following orders"
Print !"and hence the total number of latin squares of these orders are:\n"
For n As Integer = 1 To 6
    Dim nu As Uinteger = Cuint(n)

    Dim size As Uinteger = ReducedLatinSquares(n, False)
    Dim f As Uinteger = Factorial(nu - 1)
    f *= f * nu * size
    Print Using "Order # Size #### x #_! x #_! => Total &"; n; size; n; n - 1; f
Next n

Sleep
