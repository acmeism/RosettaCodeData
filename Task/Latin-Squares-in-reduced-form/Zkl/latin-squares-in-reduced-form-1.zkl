fcn reducedLatinSquare(n,write=False){
   if(n<=1) return(n);
   rlatin:=n.pump(List(), List.createLong(n,0).copy);  // matrix of zeros
   foreach i in (n){ rlatin[0][i]=i+1 }  // first row: (1,2,3..n)

   count:=Ref(0);
   // recursive closure to compute reduced latin squares and count or print them
   rows,rsz := derangements(n), rows.len();
   recurse:='wrap(i){
      foreach r in (rsz){	      // top
         if(rows[r][0]!=i) continue;  // filter by first column, ignore all but i
         rlatin[i-1]=rows[r].copy();
	 foreach k,j in ([0..i-2],[1..n-1]){	// nested loop: foreach foreach
	    if(rlatin[k][j] == rlatin[i-1][j]){
	       if(r < rsz-1) continue(3);	// -->top
	       if(i>2) return();
	    }
	 }
	 if(i<n) self.fcn(i + 1, vm.pasteArgs(1));  // 'wrap hides local data (ie count, rows, etc)
	 else{
	    count.inc();
	    if(write) printSquare(rlatin,n);
	 }
      }
   };
   recurse(2);   // remaining rows
   return(count.value);
}
fcn derangements(n,i){
   enum:=[1..n].pump(List);
   Utils.Helpers.permuteW(enum).tweak('wrap(perm){
      if(perm.zipWith('==,enum).sum(0)) Void.Skip
      else perm
   }).pump(List);
}
fcn printSquare(matrix,n){
   matrix.pump(Console.println,fcn(l){ l.concat(", ","[","]") });
   println();
}
fcn fact(n){ ([1..n]).reduce('*,1) }
