-V n = 13

F method1(n)
   V squares = (0..n).map(x -> x ^ 2)
   V sqrset = Set(squares)
   Set[(Int, Int, Int)] tri90, tri60, tri120

   L(a) 1..n
      V a2 = squares[a]
      L(b) 1..a
         V b2 = squares[b]
         V c2 = a2 + b2
         I c2 C sqrset
            tri90.add(tuple_sorted((a, b, Int(sqrt(c2)))))
         V ab = a * b
         c2 -= ab
         I c2 C sqrset
            tri60.add(tuple_sorted((a, b, Int(sqrt(c2)))))
         c2 += 2 * ab
         I c2 C sqrset
            tri120.add(tuple_sorted((a, b, Int(sqrt(c2)))))
   R [sorted(Array(tri90)),
      sorted(Array(tri60)),
      sorted(Array(tri120))]

print(‘Integer triangular triples for sides 1..#.:’.format(n))
L(angle, triples) zip([90, 60, 120], method1(n))
   print("  #3° has #. solutions:\n    #.".format(angle, triples.len, triples))
V t60 = method1(10'000)[1]
V notsame = sum(t60.filter((a, b, c) -> a != b | b != c).map((a, b, c) -> 1))
print(‘Extra credit: ’notsame)
