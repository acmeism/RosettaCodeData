class Leonardo {
	events "export", "exportdone"
	decimal l0=1, l1=1, add=1
	ret=stack
	module take (x as long){
		while x>0
			if len(.ret)=0 then
				push .l1: .l1+=.l0+.add:read .l0
				callevent(&.l1)
			else
				stack .ret {
					read a
					callevent(&a)
				}
			end	if
			x--
		end while
		sub callevent(&v)
			if x>1 then
				call event "export", v
			else
				call event "exportdone", v
			end if
		end sub	
	}
class:
	module Leonardo (.l0, .l1, .add) {
		stack .ret {data .l0, .l1}
	}
}
Module Solution1 {
	group withevents Leonardo=Leonardo()
	group withevents Fibonacci=Leonardo(0,1,0)
	function leonardo_export {
		Print number+" ";
	}
	function leonardo_exportdone {
		Print number
	}
	function fibonacci_export {
		Print number+" ";
	}
	function fibonacci_exportdone {
		Print number
	}
	Leonardo.take 25
	Fibonacci.take 25
}
Solution1
Module Solution2 {
	group withevents Leonardo=Leonardo()
	group withevents Fibonacci=Leonardo(0,1,0)
	ret=stack
	function leonardo_export {
		read new Value
		stack ret {data value}
	}
	function leonardo_exportdone {
		call local leonardo_export()
		Print array(ret)#str$(" ")
	}
	function fibonacci_export {
		call local leonardo_export()
	}
	function fibonacci_exportdone {
		call local leonardo_exportdone()
	}
	module dosomething(&ThatObject as Leonardo){
		ThatObject.take 25
	}
	dosomething &Leonardo
	dosomething &Fibonacci	
}
Solution2
