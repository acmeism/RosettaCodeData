main :: [sys_message]
main = [Stdout "First 25 Leonardo numbers:\n",
        Stdout (tab 5 10 (take 25 (leo 1 1 1))),
        Stdout "\nFirst 25 Fibonacci numbers:\n",
        Stdout (tab 5 10 (take 25 (leo 0 1 0)))]

tab :: num->num->[num]->[char]
tab w cw = lay . map (concat . map (rjustify cw . shownum)) . group w

group :: num->[*]->[[*]]
group n [] = []
group n ls = take n ls:group n (drop n ls)

leo :: num->num->num->[num]
leo s0 s1 add
    = ks
      where ks         = s0 : s1 : map step (zip2 ks (tl ks))
            step (a,b) = a + b + add
