integer
dist(data s, t, integer i, j, list d)
{
    integer x;

    x = d[i * (~t + 1) + j];
    if (x == -1) {
        if (i == ~s) {
            x = ~t - j;
        } elif (j == ~t) {
            x = ~s - i;
        } elif (s[i] == t[j]) {
            x = dist(s, t, i + 1, j + 1, d);
        } else {
            x = dist(s, t, i + 1, j + 1, d)
                .min(dist(s, t, i, j + 1, d))
                .min(dist(s, t, i + 1, j, d));
            x += 1;
        }

        d[i * (~t + 1) + j] = x;
    }

    x;
}

levenshtein(data s, t)
{
    list d;

    d.pn_integer(0, (~s + 1) * (~t + 1), -1);
    dist(s, t, 0, 0, d);
}

main(void)
{
    text s1, s2;

    o_form("`~' to `~' is ~\n", s1 = "rosettacode", s2 = "raisethysword",
           levenshtein(s1, s2));
    o_form("`~' to `~' is ~\n", s1 = "kitten", s2 = "sitting",
           levenshtein(s1, s2));

    0;
}
