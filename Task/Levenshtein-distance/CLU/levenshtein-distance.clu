min = proc [T: type] (a, b: T) returns (T)
      where T has lt: proctype (T,T) returns (bool)
    if a<b
        then return(a)
        else return(b)
    end
end min

levenshtein = proc (s, t: string) returns (int)
    ai = array[int]
    aai = array[array[int]]
    m: int := string$size(s)
    n: int := string$size(t)

    d: aai := aai$fill_copy(0, m+1, ai$fill(0, n+1, 0))

    for i: int in int$from_to(1, m) do d[i][0] := i end
    for j: int in int$from_to(1, n) do d[0][j] := j end

    for j: int in int$from_to(1, n) do
        for i: int in int$from_to(1, m) do
            cost: int
            if s[i] = t[j]
                then cost := 0
                else cost := 1
            end
            d[i][j] := min[int]( d[i-1][j]+1,
                       min[int]( d[i][j-1]+1,
                                 d[i-1][j-1]+cost ))
        end
    end

    return (d[m][n])
end levenshtein

show = proc (s, t: string)
    po: stream := stream$primary_output()
    stream$putl(po, s || " => " || t || ": " || int$unparse(levenshtein(s,t)))
end show

start_up = proc ()
    show("kitten", "sitting")
    show("rosettacode", "raisethysword")
end start_up
