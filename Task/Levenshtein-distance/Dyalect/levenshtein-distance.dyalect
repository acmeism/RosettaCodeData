func levenshtein(s, t) {
    var n = s.Length()
    var m = t.Length()
    var d = Array.Empty(n + 1, () => Array.Empty(m + 1))

    if n == 0 {
        return m
    }

    if (m == 0) {
        return n
    }

    for i in 0..n {
        d[i][0] = i
    }

    for j in 0..m {
        d[0][j] = j
    }

    for j in 1..m {
        for i in 1..n {
            if s[i - 1] == t[j - 1] {
                d[i][j] = d[i - 1][j - 1] //no operation
            }
            else {
                d[i][j] = min(min(
                    d[i - 1][j] + 1,    //a deletion
                    d[i][j - 1] + 1),   //an insertion
                    d[i - 1][j - 1] + 1 //a substitution
                    )
            }
        }
    }

    d[n][m]
}

func run(x, y) {
    print("\(x) -> \(y) = \(levenshtein(x, y))")
}

run("rosettacode", "raisethysword")
