Module Checkit {
	\\ Iterative with two matrix rows
	function LevenshteinDistance(s$,t$) {
		if len(s$)<len(t$) then swap s$, t$
		n=len(t$)
		m=len(s$)
		dim base 0, v0(n+1), v1(n+1)
Rem		dim sw()  ' we can use stack of values to make the swap.
		for i=0 to n : v0(i)=i:next
		for i=0 to m-1
			v1(0)=i+1
			for j=0 to n-1
				deletioncost=v0(j+1)+1
				insertioncost=v1(j)+1
				if mid$(s$,i+1,1)=mid$(t$,j+1,1) then
					substitutionCost=v0(j)
				else
					substitutionCost=v0(j)+1
				end if
				v1(j+1)=min.data(deletionCost, insertionCost, substitutionCost)
			next
Rem			sw()=v0():v0()=v1():v1()=sw()
			\\ when we push arrays, we only push a pointer to
			\\ when we read array (identifier with parenthesis) then we get a copy
			\\ between Push and Read any change on arrays included in copies
			Push v0(),v1(): Read v0(),v1()
		next
		=v0(n)	
	}
	Print LevenshteinDistance("kitten","sitting")=3  ' true
	Print LevenshteinDistance("Sunday","Saturday")=3  ' true
	Print LevenshteinDistance("rosettacode","raisethysword")=8  ' true
}
Checkit

Module Checkit2 {
	\\ Iterative with two matrix rows, using pointers to arrays
	function LevenshteinDistance(s$,t$) {
		if len(s$)<len(t$) then swap s$, t$
		n=len(t$)
		m=len(s$)
		dim base 0, v0(n+1), v1(n+1)
		v0=v0()  ' v0 is pointer to v0()
		v1=v1() ' v1 is pointer to v1()
		for i=0 to n : v0(i)=i:next
		for i=0 to m-1
			return v1, 0:=i+1
			for j=0 to n-1
				deletioncost=Array(v0,j+1)+1
				insertioncost=Array(v1,j)+1
				if mid$(s$,i+1,1)=mid$(t$,j+1,1) then
					substitutionCost=Array(v0,j)
				else
					substitutionCost=Array(v0,j)+1
				end if
				return v1, j+1:=min.data(deletionCost, insertionCost, substitutionCost)
			next
			swap v0, v1  ' just swap pointers
		next
		=Array(v0,n)	
	}
	Print LevenshteinDistance("kitten","sitting")=3
	Print LevenshteinDistance("Sunday","Saturday")=3
	Print LevenshteinDistance("rosettacode","raisethysword")=8
}
Checkit2
