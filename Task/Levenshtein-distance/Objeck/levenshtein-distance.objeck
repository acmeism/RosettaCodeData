class Levenshtein {
  function : Main(args : String[]) ~ Nil {
    if(args->Size() = 2) {
      s := args[0]; t := args[1]; d := Distance(s,t);
      "{$s} -> {$t} = {$d}"->PrintLine();
    };
  }

  function : native : Distance(s : String,t : String) ~ Int {
    d := Int->New[s->Size() + 1, t->Size() + 1];
    for(i := 0; i <= s->Size(); i += 1;) {
      d[i,0] := i;
    };

    for(j := 0; j <= t->Size(); j += 1;) {
      d[0,j] := j;
    };

    for(j := 1; j <= t->Size(); j += 1;) {
      for(i := 1; i <= s->Size(); i += 1;) {
        if(s->Get(i - 1) = t->Get(j - 1)) {
          d[i,j] := d[i - 1, j - 1];
        }
        else {
          d[i,j] := (d[i - 1, j] + 1)
            ->Min(d[i, j - 1] + 1)
            ->Min(d[i - 1, j - 1] + 1);
        };
      };
    };

    return d[s->Size(), t->Size()];
  }
}
