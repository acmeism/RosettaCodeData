*process source attributes xref or(!);
 ld3: Proc Options(main);
 Dcl ld(0:30,0:30) Bin Fixed(31);
 call test('kitten'      ,'sitting');
 call test('rosettacode' ,'raisethysword');
 call test('Sunday'      ,'Saturday');
 call test('Vladimir_Levenshtein[1965]',
           'Vladimir_Levenshtein[1965]');
 call test('this_algorithm_is_similar_to',
           'Damerau-Levenshtein_distance');
 call test('','abc');

 test: Proc(s,t);
 Dcl (s,t) Char(*);
 ld=-1;
 Put Edit('          1st string  = >'!!s!!'<')(Skip,a);
 Put Edit('          2nd string  = >'!!t!!'<')(Skip,a);
 Put Edit('Levenshtein distance  =',
          LevenshteinDistance(s,length(s),t,length(t)))
         (Skip,a,f(3));
 Put Edit('')(Skip,a);
 End;

 LevenshteinDistance: Proc(s,sl,t,tl) Recursive Returns(Bin Fixed(31));
 Dcl (s,t) Char(*);
 Dcl (sl,tl) Bin Fixed(31);
 Dcl cost    Bin Fixed(31);
 If ld(sl,tl)^=-1 Then
   Return(ld(sl,tl));
 Select;
   When(sl=0) ld(sl,tl)=tl;
   When(tl=0) ld(sl,tl)=sl;
   Otherwise Do;
     /* test if last characters of the strings match */
     cost=(substr(s,sl,1)^=substr(t,tl,1));
     /* return minimum of delete char from s, delete char from t,
        and delete char from both */
     ld(sl,tl)=min(LevenshteinDistance(s,sl-1,t,tl  )+1,
                   LevenshteinDistance(s,sl  ,t,tl-1)+1,
                   LevenshteinDistance(s,sl-1,t,tl-1)+cost));
     End;
   End;
 Return(ld(sl,tl));
 End;
 End;
