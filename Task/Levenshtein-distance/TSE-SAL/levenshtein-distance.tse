// library: math: get: damerau: levenshtein <description></description> <version>1.0.0.0.23</version> <version control></version control> (filenamemacro=getmadle.s) [kn, ri, th, 08-09-2011 23:04:55]
INTEGER PROC FNMathGetDamerauLevenshteinDistanceI( STRING s1, STRING s2 )
 INTEGER L1 = Length( s1 )
 INTEGER L2 = Length( s2 )
 INTEGER substitutionCostI = 0
 STRING h1[255] = ""
 STRING h2[255] = ""
 IF ( ( L1 == 0 ) OR ( L2 == 0 ) )
  // Trivial case: one string is 0-length
  RETURN( Max( L1, L2 ) )
 ELSE
  // The cost of substituting the last character
  IF   ( ( s1[ L1 ] ) == ( s2[ L2 ] ) )
   substitutionCostI = 0
  ELSE
   substitutionCostI = 1
  ENDIF
  // h1 and h2 are s1 and s2 with the last character chopped off
  h1 = SubStr( s1, 1,  L1 - 1 )
  h2 = SubStr( s2, 1,  L2 - 1 )
  IF ( ( L1 > 1 ) AND  ( L2 > 1 ) AND  ( s1[ L1 - 0 ] == s2[ L2 - 1 ] ) AND ( s1[ L1 - 1 ] == s2[ L2 - 0 ] ) )
   RETURN( Min( Min( FNMathGetDamerauLevenshteinDistanceI( h1, s2 ) + 1, FNMathGetDamerauLevenshteinDistanceI( s1, h2 ) + 1 ), Min( FNMathGetDamerauLevenshteinDistanceI( h1 , h2 ) + substitutionCostI, FNMathGetDamerauLevenshteinDistanceI( SubStr( s1, 1,  L1 - 2 ), SubStr( s2, 1, L2 - 2 ) ) + 1 ) ) )
  ENDIF
  RETURN( Min( Min( FNMathGetDamerauLevenshteinDistanceI( h1, s2 ) + 1, FNMathGetDamerauLevenshteinDistanceI( s1, h2 ) + 1 ), FNMathGetDamerauLevenshteinDistanceI( h1 ,  h2 ) + substitutionCostI ) )
 ENDIF
END

PROC Main()
STRING s1[255] = "arcain"
STRING s2[255] = "arcane"
Warn( "Minimum amount of steps to convert ", s1, " to ", s2, " = ", FNMathGetDamerauLevenshteinDistanceI( s1, s2 ) ) // gives e.g. 2
s1 = "algorithm"
s2 = "altruistic"
Warn( "Minimum amount of steps to convert ", s1, " to ", s2, " = ", FNMathGetDamerauLevenshteinDistanceI( s1, s2 ) ) // gives e.g. 6
END
