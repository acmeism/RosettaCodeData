var n=20;
lp:=[& (x,y,z);  // three variables, [& means lazy/iterator
    [1..n];      // x: a range
    {[x..n]};    // y: another range, fcn(x) is implicit (via "{")
    {[y..n]},    // z with a filter/guard, expands to fcn(x,y){[y..n]}
       { x*x + y*y == z*z }; // the filter, fcn(x,y,z)
    { T(x,y,z) } // the result, could also be written as fcn(x,y,z){ T(x,y,z) }
                // or just T (read only list) as T(x,y,z) creates a new list
               // with values x,y,z, or just _ (which means return arglist)
]];
lp.walk(2) //-->L(L(3,4,5),L(5,12,13))
