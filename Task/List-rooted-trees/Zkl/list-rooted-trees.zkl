fcn bags(n){
   if(not n) return(T(T(0,"")));

   [n-1 .. 1, -1].pump(List,bags).flatten() :
   bagchain(T(0,""), n-1, _).apply(fcn([(c,s)]){ T(c+1,String("(",s,")")) })
}
fcn bagchain(x,n,bb,start=0){
   if(not n) return(T(x));

   out := List();
   foreach i in ([start..bb.len()-1]){
      c,s := bb[i];
      if(c<=n) out.extend(bagchain(L(x[0]+c, x[1]+s), n-c, bb, i));
   }
   out
}
# Maybe this lessens eye strain. Maybe not.
fcn replace_brackets(s){
   depth,out := 0,Sink(String);
   foreach c in (s){
      if(c=="("){
	 out.write("([{"[depth%3]);
	 depth += 1;
      }else{
	 depth -= 1;
	 out.write(")]}"[depth%3]);
      }
   }
   out.close()
}
foreach x in (bags(5)){ println(replace_brackets(x[1])) }
println("or");
b:=bags(5); b.apply("get",1).println(b.len());
