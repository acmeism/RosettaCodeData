(fn look-and-say [t]
  (let [lst t
        ret []]
    (while (> (length lst) 0)
      (var (num cnt) (values (table.remove lst 1) 1))
      (while (= num (. lst 1))
        (set cnt (+ cnt 1))
        (when (> (length lst) 0)
          (set num (table.remove lst 1))))
      (tset ret (+ (length ret) 1) cnt)
      (tset ret (+ (length ret) 1) num))
    ret))

(var lst [1])
(for [i 1 10]
  (print (table.concat lst))
  (set lst (look-and-say lst)))
