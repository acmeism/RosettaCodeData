(fn look-and-say [s]
  (var ret [])
  (var (num cnt) (values (s:sub 1 1) 1))
  (for [i 2 (length s)]
    (var cur-num (s:sub i i))
    (if (= num cur-num)
        (set cnt (+ cnt 1))
        (do
          (table.insert ret (.. cnt num))
          (set cnt 1)
          (set num cur-num))))
  (table.insert ret (.. cnt num))
  (table.concat ret))

(var str "1")
(for [i 1 10]
  (print str)
  (set str (look-and-say str)))
