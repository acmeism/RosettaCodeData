/* ll(p): input odd prime 'p'. */
/* returns '1' if 2^p-1 is a Mersenne prime. */
ll(p) = {
    /* trial division up to a reasonable depth (time ratio tdiv/llt approx. 0.2) */
    my(l=log(p), ld=log(l));
    forprimestep(q = 1, sqr(ld)^(l/log(2))\4, p+p,
        if(Mod(2,q)^p == 1, return)
    );
    /* Lucas-Lehmer test with fast modular reduction. */
    my(s=4, m=2^p-1, n=m+2);
    for(i = 3, p,
        s = sqr(s);
        s = bitand(s,m)+ s>>p;
        if(s >= m, s -= n, s -= 2)
    );
    !s
};      /* end ll */


/* get Mersenne primes in range [a,b] */
llrun(a, b) = {
    my(t=0, c=0, p=2, thr=default(nbthreads));
    if(a <= 2,
        c++;
        printf("#%d\tM%d\t%3dh, %2dmin, %2d,%03d ms\n", c, p, t\3600000, t\60000%60, t\1000%60, t%1000);
        a = 3;
    );
    gettime();
    parforprime(p= a, b, ll(p), d,       /* ll(p) -> d  copy from parallel world into real world. */
        if(d,
            t += gettime()\thr;
            c++;
            printf("#%d\tM%d\t%3dh, %2dmin, %2d,%03d ms\n", c, p, t\3600000, t\60000%60, t\1000%60, t%1000)
        )
    )
};   /* end llrun */


\\  export(ll);     /* if running ll as script */
