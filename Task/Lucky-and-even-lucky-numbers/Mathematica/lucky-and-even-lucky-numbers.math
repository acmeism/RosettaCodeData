ClearAll[GetLuckies, GetEvenLuckies]
GetLuckies[max_] := Module[{luckies, f, i},
  luckies = Range[1, max, 2];
  f[n_] := Block[{k = luckies[[n]]}, luckies = Delete[luckies, Table[{k}, {k, k, Length@luckies, k}]]];
  i = 2;
  While[i < Length[luckies],
   f[i];
   i++
   ];
  luckies
  ]
GetEvenLuckies[max_] := Module[{lst, i, len},
  lst = Range[2, max, 2];
  i = 2;
  While[i <= (len = Length@lst) && (k = lst[[i]]) <= len,
   lst = Drop[lst, {k, len, k}];
   i++
   ];
  lst
  ]
GiveLucky[s_String] := GiveLucky[StringSplit[s, " "]]
GiveLucky[args_List] := Module[{argc = Length[args], j, k, type},
  If[argc > 3,
   Print["Too many arguments"]
   ,
   If[argc == 0,
    Print["Too few arguments"]
    ,
    Switch[argc, 1,
     j = Interpreter["Integer"][args[[1]]];
     If[! FailureQ[j],
      If[j > 0,
       Print@GetLuckies[20 j][[j]]
       ,
       Print["j should be positive"]
       ]
      ,
      Print["one argument that is not an integer"]
      ]
     , 2,
     j = Interpreter["Integer"][args[[1]]];
     k = Interpreter["Integer"][args[[2]]];
     If[! FailureQ[j] \[And] ! FailureQ[k],
      If[j > 0,
       If[k > 0,
        Print@GetLuckies[20 k][[j ;; k]]
        ,
        Print@Select[GetLuckies[-k], GreaterEqualThan[j]]
        ]
       ,
       Print["j should be positive"]
       ]
      ,
      Print["one of the two arguments is not an integer\[Ellipsis]"]
      ]
     , 3,
     If[args[[2]] === ",",
      j = Interpreter["Integer"][args[[1]]];
      If[! FailureQ[j],
       If[j > 0,
        type = args[[3]];
        If[MatchQ[type, "evenLucky" | "lucky"],
         If[type === "evenLucky",
          Print@GetEvenLuckies[20 j][[j]]
          ,
          Print@GetLuckies[20 j][[j]]
          ]
         ,
         Print["unknown type ", type]
         ]
        ,
        Print["j should be positive"]
        ]
       ,
       Print["j should be an integer"]
       ]
      ,
      j = Interpreter["Integer"][args[[1]]];
      k = Interpreter["Integer"][args[[2]]];
      If[! FailureQ[j] \[And] ! FailureQ[k],
       If[j > 0,
        type = args[[3]];
        If[k > 0,
         If[MatchQ[type, "evenLucky" | "lucky"],
          If[type === "evenLucky",
           Print@GetEvenLuckies[20 k][[j ;; k]]
           ,
           Print@GetLuckies[20 k][[j ;; k]]
           ]
          ,
          Print["unknown type ", type]
          ]
         ,
         If[MatchQ[type, "evenLucky" | "lucky"],
          If[type === "evenLucky",
           Print@Select[GetEvenLuckies[-k], GreaterEqualThan[j]]
           ,
           Print@Select[GetLuckies[-k], GreaterEqualThan[j]]
           ]
          ,
          Print["unknown type ", type]
          ]
         ]
        ,
        Print["j should be positive"]
        ]
       ,
       Print["one of the two arguments is not an integer\[Ellipsis]"]
       ]
      ]
     ]
    ]
   ]
  ]
GiveLucky[Last@$ScriptCommandLine]
