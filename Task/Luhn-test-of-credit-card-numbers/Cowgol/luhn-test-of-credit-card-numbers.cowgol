include "cowgol.coh";

# Given a string containing the digits of a credit card number,
# see if it passes the Luhn test.
sub luhn(card: [uint8]): (ok: uint8) is
    # Scan ahead to last digit, counting digits
    var n: uint8 := 0;
    while [card] != 0 loop
        n := n + 1;
        card := @next card;
    end loop;

    var sum: uint8 := 0;
    while n > 0 loop
        # odd digit is simply added
        card := @prev card;
        n := n - 1;
        sum := sum + ([card] - '0');

        # if uneven amount of digits, stop
        if n == 0 then break; end if;

        # even digit
        card := @prev card;
        n := n - 1;
        var digit := [card] - '0';

        # it is good to avoid unnecessary multiplication/
        # division, since 8-bit processors and microcontrollers
        # don't tend to have that in hardware
        if digit < 5 then
            sum := sum + digit + digit;
        else
            digit := digit - 5;
            sum := sum + digit + digit + 1;
        end if;
    end loop;

    # there is no boolean type, comparisons only work
    # in conditionals; this is the only way to return
    # a status
    if sum % 10 == 0 then
        ok := 1;
    else
        ok := 0;
    end if;
end sub;


# Test and print
sub test(card: [uint8]) is
    var msg: [uint8][] := {"Fail", "Pass"};
    print(card);
    print(": ");
    print(msg[luhn(card)]);
    print_nl();
end sub;

test("49927398716");
test("49927398717");
test("1234567812345678");
test("1234567812345670");
