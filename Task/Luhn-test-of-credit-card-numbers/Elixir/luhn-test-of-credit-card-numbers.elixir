defmodule Luhn do
  def test(digits) do
    to_char_list(digits) |> Enum.reverse |> Enum.map(&(&1-?0)) |> luhn_sum |> check
  end

  defp luhn_sum([odd, even | rest]) when even >= 5, do:
      odd + 2 * even - 10 + 1 + luhn_sum(rest)
  defp luhn_sum([odd, even | rest]), do:
      odd + 2 * even + luhn_sum(rest)
  defp luhn_sum([odd]), do: odd
  defp luhn_sum([]), do: 0

  defp check(sum) when rem(sum,10)==0, do: :valid
  defp check(_sum), do: :invalid
end

numbers = ~w(49927398716 49927398717 1234567812345678 1234567812345670)
Enum.each(numbers, fn x -> IO.puts "#{x}: #{Luhn.test(x)}" end)
