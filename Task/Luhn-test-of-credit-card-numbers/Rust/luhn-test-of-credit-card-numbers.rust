fn get_digits(mut num: u64) -> Vec<u64> {
    let mut digits = vec![];
    while num != 0 {
        digits.push(num % 10);
        num /= 10;
    }
    digits
}

fn digit_sum(num: u64) -> u64 {
    get_digits(num).into_iter().fold(0,|sum, dig| sum + dig)
}

fn luhn_test(n: u64) -> bool {
    let mut sum = 0;
    for (i,digit) in get_digits(n).into_iter().enumerate() {
        sum += match i % 2 == 0 {
            true => digit,
            false => digit_sum(2*digit),
        }
    }
    sum % 10 == 0
}

fn main() {
    let nums = [49927398716, 49927398717, 1234567812345678, 1234567812345670];
    for &n in &nums {
        match luhn_test(n) {
            true  => println!("{} passes.", n),
            false => println!("{} fails.", n),
        }
    }
}
