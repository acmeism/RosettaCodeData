F rev(n)
   R BigInt(reversed(String(n)))

[BigInt = (Bool, BigInt)] cache

F lychrel(BigInt =n)
   I n C :cache
      R :cache[n]

   V r = rev(n)
   V res = (1B, n)
   [BigInt] seen
   L(i) 1000
      n += r
      r = rev(n)
      I n == r
         res = (0B, BigInt(0))
         L.break
      I n C :cache
         res = :cache[n]
         L.break
      seen [+]= n

   L(x) seen
      :cache[x] = res
   R res

[Int] seeds, related, palin

L(i) 1..9999
   V tf_s = lychrel(i)
   I !tf_s[0]
      L.continue
   I BigInt(i) == tf_s[1]
      seeds [+]= i
   E
      related [+]= i
   I BigInt(i) == rev(i)
      palin [+]= i

print(seeds.len‘ Lychrel seeds: ’seeds)
print(related.len‘ Lychrel related’)
print(palin.len‘ Lychrel palindromes: ’palin)
