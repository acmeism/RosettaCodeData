class Test {
  function : Main(args : String[]) ~ Nil {
    n := 8;
    result := MagicSquareDoublyEven(n);
    dim := result->Size();

    for (i := 0; i < dim[0]; i++)
    {
      for (j := 0; j < dim[1]; j++) {
        value := result[i, j];
        "{$value}\t"->Print();
      }
      "\n"->Print();
    };

    value := (n * n + 1) * n / 2;
    "\nMagic constant: {$value}"->PrintLine();
  }

  function : MagicSquareDoublyEven(n:Int) ~ Int[,] {
    if (n < 4 | n % 4 <> 0) {
      "base must be a positive multiple of 4"->ErrorLine();
      System.Runtime->Exit(1);
    };

    # pattern of count-up vs count-down zones
    bits := 0b1001011001101001;
    size := n * n;
    mult := n / 4;  # how many multiples of 4

    result := Int->New[n, n];

    for (r := 0, i := 0; r < n; r++)
    {
      for (c := 0; c < n; c++, i++)
      {
        bitPos := c / mult + (r / mult) * 4;
        result[r, c] := (bits and (1 << bitPos)) <> 0 ? i + 1 : size - i;
      }
    }
    return result;
  }
}
