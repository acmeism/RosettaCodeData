proc inc(word n, order) word: if n=order-1 then 0 else n+1 fi corp
proc dec(word n, order) word: if n=0 then order-1 else n-1 fi corp

proc odd_magic_square([*,*]word square) void:
    word order, x, nx, y, ny, i;
    order := dim(square,1);

    for x from 0 upto order-1 do
        for y from 0 upto order-1 do
            square[x,y] := 0
        od
    od;

    x := order/2;
    y := 0;
    for i from 1 upto order*order do
        square[x,y] := i;
        nx := inc(x,order);
        ny := dec(y,order);
        if square[nx,ny] = 0 then
            x := nx;
            y := ny
        else
            y := inc(y,order)
        fi
    od
corp

proc digit_count(word n) word:
    word count;
    count := 0;
    while n > 0 do
        count := count + 1;
        n := n / 10
    od;
    count
corp

proc print_magic_square([*,*]word square) void:
    word order, max, col_size, magic, x, y;
    order := dim(square,1);
    max := order*order;
    col_size := digit_count(max) + 1;

    magic := 0;
    for x from 0 upto order-1 do magic := magic + square[x,0] od;

    writeln("Magic square of order ",order," with magic number ",magic,":");
    for y from 0 upto order-1 do
        for x from 0 upto order-1 do write(square[x,y]:col_size) od;
        writeln()
    od;
    writeln()
corp

proc main() void:
    [1,1]word sq1;
    [3,3]word sq3;
    [5,5]word sq5;
    [7,7]word sq7;

    odd_magic_square(sq1);
    odd_magic_square(sq3);
    odd_magic_square(sq5);
    odd_magic_square(sq7);

    print_magic_square(sq1);
    print_magic_square(sq3);
    print_magic_square(sq5);
    print_magic_square(sq7)
corp
