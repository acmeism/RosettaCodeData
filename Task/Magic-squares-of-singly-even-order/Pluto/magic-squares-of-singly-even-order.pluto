local function magic_square_odd(n)
    assert(n > 2 and n % 2 == 1, "Base must be odd and > 2." )
    local value = 1
    local grid_size = n * n
    local c =  n // 2 + 1
    local r = 1
    local result = {}
    for i = 1, n do
        result[i] = {}
        for j = 1, n do result[i][j] = 0 end
    end
    while value <= grid_size do
        result[r][c] = value
        if r == 1 then
            if c == n then
                ++r
            else
                r = n
                ++c
            end
        elseif c == n then
            r -= 1
            c = 1
        elseif result[r - 1][c + 1] == 0 then
            r -= 1
            c += 1
        else
            ++r
        end
        ++value
    end
    return result
end

local function magic_square_singly_even(n)
    assert(n >= 6 and (n - 2) % 4 == 0, "Base must be a positive multiple of 4 plus 2.")
    local size = n * n
    local half_n = n // 2
    local sub_square_size = size // 4
    local sub_square = magic_square_odd(half_n)
    local quadrant_factors = {0, 2, 3, 1}
    local result = {}
    for i = 1, n do
        result[i] = {}
        for j = 1, n do result[i][j] = 0 end
    end
    for r = 1, n do
        for c = 1, n do
            local quadrant = (r - 1) // half_n * 2 + (c - 1) // half_n + 1
            result[r][c] = sub_square[(r - 1) % half_n + 1][(c - 1) % half_n + 1]
            result[r][c] += quadrant_factors[quadrant] * sub_square_size
        end
    end
    local n_cols_left = half_n // 2 + 1
    local n_cols_right = n_cols_left - 1
    for r = 1, half_n do
        for c = 1, n do
            if c < n_cols_left or c > n - n_cols_right + 1 or (c == n_cols_left and r == n_cols_left) then
                if c != 1 or r != n_cols_left then
                    result[r][c], result[r + half_n][c] = result[r + half_n][c], result[r][c]
                end
            end
        end
    end
    return result
end

local n = 6
for magic_square_singly_even(n) as ia do
    for ia as i do io.write(string.format("%2d  ", i)) end
    print()
end
print($"\nMagic constant {(n * n + 1) * n // 2}")
