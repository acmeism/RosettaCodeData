class MagicSquareSinglyEven{
   fcn init(n){ var result=magicSquareSinglyEven(n) }
   fcn toString{
      sink,n:=Sink(String),result.len();  // num collumns
      fmt:="%2s ";
      foreach row in (result)
         { sink.write(row.apply('wrap(n){ fmt.fmt(n) }).concat(),"\n") }
      sink.write("\nMagic constant: %d".fmt((n*n + 1)*n/2));
      sink.close();
   }
   fcn magicSquareOdd(n){
      if (n<3 or n%2==0) throw(Exception.ValueError("base must be odd and > 2"));
      value,gridSize,c,r:=0, n*n, n/2, 0;
      result:=n.pump(List(),n.pump(List(),0).copy);  // array[n,n] of zero

      while((value+=1)<=gridSize){
	 result[r][c]=value;
	 if(r==0){
	    if(c==n-1) r+=1;
            else{ r=n-1; c+=1; }
	 }
	 else if(c==n-1){ r-=1; c=0; }
	 else if(result[r-1][c+1]==0){ r-=1; c+=1; }
	 else r+=1;
      }
      result;
   }
   fcn magicSquareSinglyEven(n){
      if (n<6 or (n-2)%4!=0)
	 throw(Exception.ValueError("base must be a positive multiple of 4 +2"));
      size,halfN,subSquareSize:=n*n,  n/2, size/4;

      subSquare:=magicSquareOdd(halfN);
      quadrantFactors:=T(0, 2, 3, 1);
      result:=n.pump(List(),n.pump(List(),0).copy);  // array[n,n] of zero

      foreach r,c in (n,n){
         quadrant:=(r/halfN)*2 + (c/halfN);
	 result[r][c]=subSquare[r%halfN][c%halfN];
	 result[r][c]+=quadrantFactors[quadrant]*subSquareSize;
      }
      nColsLeft,nColsRight:=halfN/2, nColsLeft-1;
      foreach r,c in (halfN,n){
         if ( c<nColsLeft or c>=(n-nColsRight) or
              (c==nColsLeft and r==nColsLeft) ){
	    if(c==0 and r==nColsLeft) continue;
	    tmp:=result[r][c];
	    result[r][c]=result[r+halfN][c];
	    result[r+halfN][c]=tmp;
	 }
      }
      result
   }
}
