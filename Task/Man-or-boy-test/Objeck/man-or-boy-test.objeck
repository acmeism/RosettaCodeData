interface Arg {
  method : virtual : public : Run() ~ Int;
}

class ManOrBoy {
  New() {}

  function : A(mb : ManOrBoy, k : Int, x1 : Arg, x2 : Arg, x3 : Arg, x4 : Arg, x5 : Arg) ~ Int {
    if(k <= 0) {
            return x4->Run() + x5->Run();
    };

    return Base->New(mb, k, x1, x2, x3, x4) implements Arg {
      @mb : ManOrBoy; @k : Int; @x1 : Arg; @x2 : Arg; @x3 : Arg; @x4 : Arg; @m : Int;

      New(mb : ManOrBoy, k : Int, x1 : Arg, x2 : Arg, x3 : Arg, x4 : Arg) {
        @mb := mb; @k := k; @x1 := x1; @x2 := x2; @x3 := x3; @x4 := x4; @m := @k;
      }

      method : public : Run() ~ Int {
        @m -= 1;
        return @mb->A(@mb, @m, @self, @x1, @x2, @x3, @x4);
      }
    }->Run();
  }

  function : C(i : Int) ~ Arg {
    return Base->New(i) implements Arg {
      @i : Int;
      New(i : Int) {
        @i := i;
      }

      method : public : Run() ~ Int {
        return @i;
      }
    };
  }

  function : Main(args : String[]) ~ Nil {
    mb := ManOrBoy->New();
    mb->A(mb, 10, C(1), C(-1), C(-1), C(1), C(0))->PrintLine();
  }
}
