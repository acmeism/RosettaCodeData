using Plots
gr(aspect_ratio=:equal, axis=true, ticks=true, legend=false, dpi=200)

d, h = 800, 500  # pixel density (= image width) and image height
n, r = 200, 500  # number of iterations and escape radius (r > 2)

direction, height = 45, 1.5  # direction and height of the incoming light
v = exp(direction / 180 * pi * im)  # unit 2D vector in this direction

x = range(0, 2, length=d+1)
y = range(0, 2 * h / d, length=h+1)

A, B = collect(x) .- 1, collect(y) .- h / d
C = (2.0 + 1.0im) .* (A' .+ B .* im) .- 0.5

Z, dZ, ddZ = zero(C), zero(C), zero(C)
D, T = zeros(size(C)), zeros(size(C))

for k in 1:n
    M = abs2.(Z) .< abs2(r)
    Z[M], dZ[M], ddZ[M] = Z[M] .^ 2 .+ C[M], 2 .* Z[M] .* dZ[M] .+ 1, 2 .* (dZ[M] .^ 2 .+ Z[M] .* ddZ[M])
end

N = abs.(Z) .> 2  # exterior distance estimation
D[N] = log.(abs.(Z[N])) .* abs.(Z[N]) ./ abs.(dZ[N])

heatmap(D .^ 0.1, c=:balance)
savefig("Mandelbrot_distance_est.png")

N = abs.(Z) .> 2  # normal map effect 1 (potential function)
U = Z[N] ./ dZ[N]  # normal vectors to the equipotential lines
U, S = U ./ abs.(U), 1 .+ sin.(100 .* angle.(U)) ./ 10  # unit normal vectors and stripes
T[N] = max.((real.(U) .* real(v) .+ imag.(U) .* imag(v) .+ S .* height) ./ (1 + height), 0)

heatmap(T .^ 1.0, c=:bone_1)
savefig("Mandelbrot_normal_map_1.png")

N = abs.(Z) .> 2  # normal map effect 2 (distance estimation)
U = Z[N] .* dZ[N] .* ((1 .+ log.(abs.(Z[N]))) .* conj.(dZ[N] .^ 2) .- log.(abs.(Z[N])) .* conj.(Z[N] .* ddZ[N]))
U = U ./ abs.(U)  # unit normal vectors to the equidistant lines
T[N] = max.((real.(U) .* real(v) .+ imag.(U) .* imag(v) .+ height) ./ (1 + height), 0)

heatmap(T .^ 1.0, c=:afmhot)
savefig("Mandelbrot_normal_map_2.png")
