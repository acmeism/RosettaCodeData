include "cowgol.coh";
include "argv.coh";

# convert number to base 20
sub base20(n: uint32, out: [uint8]): (n_digits: uint8) is
    n_digits := 0;
    loop
        [out] := (n % 20) as uint8;
        n := n / 20;
        out := @next out;
        n_digits := n_digits + 1;
        if n == 0 then break; end if;
    end loop;
end sub;

# get the N'th line (from the top) for a Mayan digit
sub digit_line(n: uint8, line: uint8): (s: [uint8]) is
    var parts: [uint8][] := {"    "," .  "," .. ","... ","....","----"};
    if n == 0 then
        if line == 3 then s := " @  ";
        else s := parts[0];
        end if;
    else
        var nn := n - 5*(3-line);
        if nn > 128 then s := parts[0];
        elseif nn > 5 then s := parts[5];
        else s := parts[nn];
        end if;
    end if;
end sub;

# print Mayan number
sub print_mayan(n: uint32) is
    sub edge(n: uint8) is
        while n>0 loop
            print("+----");
            n := n-1;
        end loop;
        print_char('+');
        print_nl();
    end sub;

    var digits: uint8[8]; # 8 digits is enough for 2**32
    var size := base20(n, &digits[0]);

    edge(size);
    var line: uint8 := 0;
    while line < 4 loop
        var d: uint8 := size-1;
        loop
            print_char('|');
            print(digit_line(digits[d], line));
            if d==0 then break; end if;
            d := d - 1;
        end loop;
        print_char('|');
        print_nl();
        line := line + 1;
    end loop;
    edge(size);
end sub;

sub Error() is
    print("usage: mayan <number>. number must be positive");
    print_nl();
    ExitWithError();
end sub;

# read number from command line
ArgvInit();
var arg := ArgvNext();
if arg == 0 as [uint8] then Error(); end if;
var n: int32;
(n, arg) := AToI(arg);
if n <= 0 then Error(); end if;
print_mayan(n as uint32);
