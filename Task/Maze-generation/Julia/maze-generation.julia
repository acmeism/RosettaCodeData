function walk(maze, cell, visited = Any[])
  push!(visited, cell)
  for neigh in shuffle(neighbors(cell, size(maze)))
    if !(neigh in visited)
       maze[round(Int,(cell+neigh)/2)...] = 0     # ifloor(n/2) ==  n >> 1
       walk(maze, neigh, visited)
    end
  end
  maze
end

neighbors(c,b,d=2)=filter(check(b),map(m->c+d*m, Any[[0,1],[-1,0],[0,-1],[1,0]]))

check(bound) = cell -> all([1,1] .<= cell .<= [bound...])

maze(w, h) = walk([i%2|j%2 for i=1:2w+1,j=1:2h+1], 2*[rand(1:w),rand(1:h)])

pprint(matrix) = for i = 1:size(matrix,1) println(join(matrix[i,:])) end

function printmaze(maze, wall = convert(UTF32String, "╹╸┛╺┗━┻╻┃┓┫┏┣┳╋"))
  h,w = size(maze)
  pprint([ maze[i,j] == 0 ? ' ' :
           wall[Int(sum(c-> 2.0^.5(3c[1]+c[2]+3),
                    filter(x -> maze[x...] != 0,
                           neighbors([i,j],[h,w],1)) .- Any[[i,j]]))]
           for i = 1:2:h, j = 1:w])
end
