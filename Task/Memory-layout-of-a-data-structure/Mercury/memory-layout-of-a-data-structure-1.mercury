:- module rs232.

:- interface.

:- import_module bool, io, list, string.

:- type rs232_pin
   ---> carrier_detect
      ; received_data
      ; transmitted_data
      ; data_terminal_ready
      ; signal_ground
      ; data_set_ready
      ; request_to_send
      ; clear_to_send
      ; ring_indicator.

:- type rs232.

:- func rs232_bits       = rs232.
:- func rs232_bits(bool) = rs232.

:- func rs232_set(rs232, rs232_pin)   = rs232.
:- func rs232_clear(rs232, rs232_pin) = rs232.

:- pred rs232_is_set(rs232::in, rs232_pin::in) is semidet.
:- pred rs232_is_clear(rs232::in, rs232_pin::in) is semidet.

:- func rs232_set_bits(rs232, list(rs232_pin))   = rs232.
:- func rs232_clear_bits(rs232, list(rs232_pin)) = rs232.

:- func to_string(rs232) = string.

:- pred write_rs232(rs232::in, io::di, io::uo) is det.

:- implementation.

:- import_module bitmap.

:- type rs232 == bitmap.

rs232_bits          = rs232_bits(no).
rs232_bits(Default) = bitmap.init(9, Default).

rs232_set(A, Pin)   = unsafe_set(A, to_index(Pin)).
rs232_clear(A, Pin) = unsafe_clear(A, to_index(Pin)).

rs232_is_set(A, Pin)   :- unsafe_is_set(A, to_index(Pin)).
rs232_is_clear(A, Pin) :- unsafe_is_clear(A, to_index(Pin)).

rs232_set_bits(A, Pins)   = foldl((func(Pin, B) = rs232_set(B, Pin)), Pins, A).
rs232_clear_bits(A, Pins) = foldl((func(Pin, B) = rs232_clear(B, Pin)), Pins, A).

to_string(A) = bitmap.to_string(A).

write_rs232(A, !IO) :- write_bitmap(resize(A, 16, no), !IO).
                       % cannot write a bitmap that isn't byte-divisible

:- func to_index(rs232_pin) = bit_index.
to_index(carrier_detect)      = 0.
to_index(received_data)       = 1.
to_index(transmitted_data)    = 2.
to_index(data_terminal_ready) = 3.
to_index(signal_ground)       = 4.
to_index(data_set_ready)      = 5.
to_index(request_to_send)     = 6.
to_index(clear_to_send)       = 7.
to_index(ring_indicator)      = 8.

:- end_module rs232.
