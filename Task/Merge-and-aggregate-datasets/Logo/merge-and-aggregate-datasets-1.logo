to read.simple.csv :in
  local [line list]
  make "list []
  openread :in
  setread :in
  while  [not eofp] [
    make "line subst.comma readword
    make "line parse map [ifelse equalp ? ", ["\ ] [?]] :line
    make "list fput :line :list
  ]
  close :in
  setread []
  output reverse :list
end

to subst.comma :string
  local [out k]
  make "k 1
  make "out "
  foreach :string [
    ifelse equalp ? ", ~
    [ifelse equalp :k 1 ~
    [make "out word :out ? make "k sum :k 1] ~
    [make "out word :out "|missing,| make "k 1]] ~
    [make "out word :out ? make "k 1]
  ]
  output ifelse equalp last :out ", [word :out "missing] [:out]
end

to aggregate :patients :visits
  if emptyp :patients [output []]
  output fput aggregate.helper first :patients :visits aggregate bf :patients :visits
end


to aggregate.helper :patient :visits  [s 0] [c 0] [m "]
;m for max date. s for sum of scores. c number of scores
  if emptyp :visits [
    output (se :patient ifelse equalp :m " ["missing] [:m] ~
    ifelse equalp :s 0 ["missing] [:s] ~
    ifelse equalp :s 0 ["missing] [quotient :s :c])
    ]
  output ifelse equalp first :patient first first :visits [
    (aggregate.helper :patient bf :visits  ~
    ifelse equalp last first :visits "missing [:s][sum :s last first :visits] ~
    ifelse equalp last first :visits "missing [:c][sum :c 1] ~
    ifelse equalp first bf first :visits "missing [:m] ~
    [ifelse beforep :m first bf first :visits [first bf first :visits] [:m]])] ~
    [(aggregate.helper :patient bf :visits :s :c :m)]
end

to mergesort :list
  localmake "half split (count :list) / 2 [] :list
  if empty? first :half [output :list]
  output merge mergesort first :half mergesort last :half
end

to split :size :front :list
  if :size < 1 [output list :front :list]
  output split :size-1 (lput first :list :front) (butfirst :list)
end

to merge :small :large
  if empty? :small [output :large]
  ifelse lessequal? first first :small first first :large ~
    [output fput first :small merge butfirst :small :large] ~
    [output fput first :large merge butfirst :large :small]
end

to csv.write :list :out
  openwrite :out
  setwrite :out
  csv.write.lines :list
  close :out
  setwrite []
end

to csv.write.lines :list
  if emptyp :list [stop]
  print csv.write.fields first :list
  csv.write.lines bf :list
end

to csv.write.fields :line
  if equalp count :line 1 [output first :line]
  output (word first :line ", csv.write.fields bf :line)
end
