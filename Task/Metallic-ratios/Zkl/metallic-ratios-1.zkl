var [const] BI=Import("zklBigNum");  // libGMP
fcn lucasSeq(b){
   Walker.zero().tweak('wrap(xs){
      xm2,xm1 := xs;	// x[n-2], x[n-1]
      xn:=xm1*b + xm2;
      xs.append(xn).del(0);
      xn
   }.fp(L(BI(1),BI(1)))).push(1,1)  // xn can get big so use BigInts
}
fcn metallicRatio(lucasSeq,digits=32,roundup=True){ #-->(String,num iterations)
   bige:=BI("1e"+(digits+1));  # x[n-1]*bige*b / x[n-2] to get our digits from Ints
   a,b,mr := lucasSeq.next(), lucasSeq.next(), (bige*b).div(a);
   do(20_000){	// limit iterations
      c,mr2 := lucasSeq.next(), (bige*c).div(b);
      if(mr==mr2){
	 mr=mr2.add(5*roundup).div(10).toString();
	 return(String(mr[0],".",mr.del(0)),
	    lucasSeq.idx); // idx ignores push(), ie first 2 terms
      }
      b,mr = c,mr2;
   }
}
