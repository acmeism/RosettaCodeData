function isProbablyPrime(n as *BigInteger, k as long) {
	boolean T=true, F=false
	=F
	Zero=BigInteger("0")
	One=BigInteger("1")
	Two=BigInteger("2")
	Method n, "compare", Two as c1
	Method n, "modulus", Two as m2
	method m2,"compare", zero as C2
	if c1=0 or c2=0 then exit
	with n, "toString" as ns$
	s=0
	Method n, "subtract", one as nn
	d=nn
	
	with d, "tostring" as dstr$
	do
		method d,"modulus", two as m2
		method m2,"compare", zero as C
		if c else exit
		s++
		method d, "divide", two as d
	Always
	z=len(ns$)
	a=one
	with a, "toString" as astr$
	x=a
	=T
	for i=1 to k {
		do
			zs=""
			for j=1 to len(ns$)
				zs+=chr$(47+random(1,10))
			next
			a=bigInteger(zs)
			method nn,"compare", a as C
			method a,"compare", one as c1
		until c=1 and c1>-1
		method a, "modpow", d, n as x
		method x,"compare", one as c1
		if c1 else continue
		method x,"compare", nn as c1
		if c1 else continue
		for r=1 to s	{
			method x, "modpow", two, n  as x
			method x,"compare", one as c1
			if c1 else =F : break
			method x,"compare", nn as c1
			if c1 else exit
		}
		if c1 then =F: break
	}
}
profiler
Print isProbablyPrime(BigInteger("5400349"), 5)=True
print timecount
profiler
a=BigInteger("5400349"): Method a, "isProbablyPrime", 5 as ret:Print ret
print timecount
