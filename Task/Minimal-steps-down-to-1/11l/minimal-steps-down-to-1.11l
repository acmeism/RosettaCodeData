T Mintab
   Set[Int] divs, subs
   [Int] table
   [[String]] hows

   F (divs, subs)
      .divs = copy(divs)
      .subs = copy(subs)

   F _mintab(n)
      ‘Tabulation, memoised minimised steps to 1’
      V table = [n + 2] * (n + 1)
      table[1] = 0
      V how = (0 .< n + 2).map(_ -> [‘’])
      how[1] = [String(‘=’)]
      L(t) 1 .< n
         V thisplus1 = table[t] + 1
         L(d) .divs
            V dt = d * t
            I dt <= n & thisplus1 < table[dt]
               table[dt] = thisplus1
               how[dt] = how[t] [+] [‘/#.=>#2’.format(d, t)]
         L(s) .subs
            V st = s + t
            I st <= n & thisplus1 < table[st]
               table[st] = thisplus1
               how[st] = how[t] [+] [‘-#.=>#2’.format(s, t)]
      .table = table
      .hows = how.map(h -> reversed(h)[0 .< (len)-1])
      R (.table, .hows)

   F ()(n)
      ‘Tabulation’
      V (table, hows) = ._mintab(n)
      R (table[n], hows[n])

L(DIVS, SUBS) [([2, 3], [1]), ([2, 3], [2])]
   print("\nMINIMUM STEPS TO 1: Tabulation algorithm")
   print(‘  Possible divisors:   ’DIVS)
   print(‘  Possible decrements: ’SUBS)
   V mintab = Mintab(Set(DIVS), Set(SUBS))
   mintab(10)
   L(n) 1..10
      V (steps, how) = (mintab.table[n], mintab.hows[n])
      print(‘    mintab(#2) in #2 by: ’.format(n, steps)‘ ’how.join(‘, ’))

   L(upto) [2000, 50'000]
      mintab(upto)
      print("\n    Those numbers up to "upto‘ that take the maximum, "minimal steps down to 1":’)
      V mx = max(mintab.table[1..])
      V ans = enumerate(mintab.table).filter((n, steps) -> steps == @mx).map((n, steps) -> n)
      print(‘      Taking ’mx‘ steps is/are the ’ans.len‘ numbers: ’ans.map(n -> String(n)).join(‘, ’))
