MAX, D,S := 50_000, T(2,3), T(1);
buildCache(MAX,D,S);

do(2){
   println("\nDivisors: %s, subtracters: %s".fmt(D.concat(","), S.concat(",")));
   foreach n in ([1..10]){ println("%2d: %d steps: %s".fmt(n,stepsToOne(n).xplode())) }

   maxSteps:=minCache.reduce(fcn(mkv,kv){ if(mkv[1][2]>kv[1][2]) mkv else kv })[1][2];
   biggies :=minCache.filter('wrap(kv){ kv[1][2]==maxSteps }).pump(List,fcn(kv){ kv[0].toInt() }).sort();
   println("\nBelow %,d, found %d numbers that require %d steps (the mostest)."
      .fmt(MAX,biggies.len(),maxSteps));
   foreach n in (biggies){ println("%,6d: %d steps: %s".fmt(n,stepsToOne(n).xplode())) }

   S=T(2); buildCache(MAX,D,S);
}
