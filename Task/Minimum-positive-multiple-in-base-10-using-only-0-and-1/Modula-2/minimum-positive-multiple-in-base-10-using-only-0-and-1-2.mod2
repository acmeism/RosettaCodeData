IMPLEMENTATION MODULE B10AsBin;

FROM Storage IMPORT ALLOCATE, DEALLOCATE;

PROCEDURE CalcB10AsBinary( N : CARDINAL) : LONGCARD;
CONST
  MaxPower2 = 80000000H; (* 2^31 *)
VAR
  pSums : POINTER TO ARRAY CARDINAL OF CARDINAL;
  pWhen : POINTER TO ARRAY CARDINAL OF LONGCARD;
  b10bin, pwr2 : LONGCARD;
  j, j_stop, nrSums, res10, s : CARDINAL;
BEGIN
  IF (N <= 1) THEN RETURN LONGCARD(N) END; (* dispose of trivial cases *)
  (* TopSpeed Modula-2 doesn't seem to have dynamic arrays,
     so we use a workaround *)
  ALLOCATE( pSums, N*SIZE(CARDINAL));
  ALLOCATE( pWhen, N*SIZE(LONGCARD));
  FOR j := 0 TO N - 1 DO pWhen^[j] := 0; END;

  b10bin := 0; (* result := 0; gets overwritten if procedure succeeds *)
  res10 := 1;  pwr2 := 1;
  pSums^[0] := 0;  pSums^[1] := 1;  nrSums := 2;
  pWhen^[1] := 1; (* record first occurrence of sum = 1 mod N *)
  REPEAT
    res10 := 10*res10 MOD N;  pwr2 := 2*pwr2;
    j := 0;  j_stop := nrSums;
    REPEAT
      (* Possible new sums created by addition of res10 *)
      s := pSums^[j] + res10;
      IF (s >= N) THEN DEC(s, N); END;  (* take sums mod N *)
      IF (pWhen^[s] = 0) THEN (* if we haven't had this sum already *)
        pWhen^[s] := pWhen^[pSums^[j]] + pwr2; (* record first occurrence *)
        IF (s = 0) THEN b10bin := pWhen^[0]; (* if s = 0 then done *)
        ELSE
          pSums^[nrSums] := s;  INC( nrSums); (* else store the sum s *)
        END;
      END;
      INC(j);
    UNTIL (j = j_stop) OR (b10bin > 0);
  UNTIL (pwr2 = MaxPower2) OR (b10bin > 0);
  DEALLOCATE( pSums, N*SIZE(CARDINAL));
  DEALLOCATE( pWhen, N*SIZE(LONGCARD));
  RETURN b10bin;
END CalcB10AsBinary;
END B10AsBin.
