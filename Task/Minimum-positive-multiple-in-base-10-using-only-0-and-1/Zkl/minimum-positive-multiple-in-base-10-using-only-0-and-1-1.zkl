var [const]
  B10_4=10*10*10*10,
  HexB10=T(0000,0001,0010,0011,0100,0101,0110,0111,
           1000,1001,1010,1011,1100,1101,1110,1111);

  // Convert n from binary as if it is Base 10
  // limited for Uint64 to 2^20-1= 1048575 ala 19 digits
  //   for int64, limited to 2^19-1= 524287, conv2B10()-->1111111111111111111
const B10_MAX=(2).pow(19) - 1;

fcn conv2B10(n){
   facB10,result := 1,0;
   while(n>0){
      result=facB10*HexB10[n.bitAnd(15)] + result;
      n=n/16;
      facB10*=B10_4;
   }
   result
}
fcn findB10(n){	// --> -1 if overflow signed 64 bit int
   i:=0;
   while(i<B10_MAX){ if(conv2B10( i+=1 )%n == 0) return(conv2B10(i)); }
   return(-1);  // overflow 64 bit signed int
}
