V primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]

F isPrime(n)
   I n < 2
      R 0B

   L(i) :primes
      I n == i
         R 1B
      I n % i == 0
         R 0B
      I i * i > n
         R 1B
   print(‘Oops, ’n‘  is too large’)
   R 0B

F init()
   V s = 24
   L s < 600
      I isPrime(s - 1) & s - 1 > :primes.last
         :primes.append(s - 1)
      I isPrime(s + 1) & s + 1 > :primes.last
         :primes.append(s + 1)
      s += 6

F nsmooth(n, size)
   assert(n C 2..521)
   assert(size >= 1)

   V bn = n
   V ok = 0B
   L(prime) :primes
      I bn == prime
         ok = 1B
         L.break
   assert(ok, ‘must be a prime number’)

   V ns = [BigInt(0)] * size
   ns[0] = 1

   [BigInt] next
   L(prime) :primes
      I prime > bn
         L.break
      next.append(prime)

   V indicies = [0] * next.len
   L(m) 1 .< size
      ns[m] = min(next)
      L(i) 0 .< indicies.len
         I ns[m] == next[i]
            indicies[i]++
            next[i] = :primes[i] * ns[indicies[i]]

   R ns

init()

L(p) primes
   I p >= 30
      L.break
   print(‘The first ’p‘ -smooth numbers are:’)
   print(nsmooth(p, 25))
   print()

L(p) primes[1..]
   I p >= 30
      L.break
   print(‘The 3000 to 3202 ’p‘ -smooth numbers are:’)
   print(nsmooth(p, 3002)[2999..])
   print()

L(p) [503, 509, 521]
   print(‘The 30000 to 3019 ’p‘ -smooth numbers are:’)
   print(nsmooth(p, 30019)[29999..])
   print()
