  [ behead 0 swap rot
    witheach
      [ 2dup < iff
          drop done
        nip nip
        i^ 1+ swap ] ]               is smallest   ( [ --> n n )

  [ stack ]                          is end.test   (   --> s   )

  [ ]'[ end.test put
    dup temp put
    ' [ 1 ]
    0 rot size of
    [ over end.test share do if done
      [] unrot
      dup dip
        [ witheach
            [ dip dup peek
              temp share i^ peek *
              rot swap join swap ] ]
      rot smallest
      dip
        [ 2dup peek 1+ unrot poke ]
      rot swap over
      -1 peek over = iff
        drop else join
      swap again ]
    drop
    end.test release
    temp release ]                   is smoothwith ( [ --> [   )

  [ ' [ 2 3 5 7 11 13 17 19 23 29 ]
    swap split drop ]                is primes     ( n --> [   )

  10 times
    [ i^ 1+ primes
      smoothwith [ size 25 = ]
      echo cr ]
  cr
  9 times
    [ i^ 2 + primes
      smoothwith [ size 3002 = ]
      -3 split nip echo cr ]
