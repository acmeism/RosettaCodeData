var [const] BI=Import("zklBigNum");  // libGMP

fcn nSmooth(n,sz){	// --> List of big ints
   if(sz<1) throw(Exception.ValueError("size must be at least 1"));
   bn,primes,ns := BI(n), List(), List.createLong(sz);
   if(not bn.probablyPrime()) throw(Exception.ValueError("n must be prime"));
   p:=BI(1); while(p<n){ primes.append(p.nextPrime().copy()) }  // includes n
   ns.append(BI(1));
   next:=primes.copy();
   if(Void!=( z:=primes.find(bn)) ) next.del(z+1,*);

   indices:=List.createLong(next.len(),0);
   do(sz-1){
      ns.append( nm:=BI( next.reduce(fcn(a,b){ a.min(b) }) ));
      foreach i in (indices.len()){
         if(nm==next[i]){
	    indices[i]+=1;
	    next[i]=primes[i]*ns[indices[i]];
	 }
      }
   }
   ns
}
