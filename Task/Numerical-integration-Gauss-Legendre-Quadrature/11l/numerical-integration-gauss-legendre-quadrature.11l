F legendreIn(x, n)
   F prev1(idx, pn1)
      R (2 * idx - 1) * @x * pn1
   F prev2(idx, pn2)
      R (idx - 1) * pn2

   I n == 0
      R 1.0
   E I n == 1
      R x
   E
      V result = 0.0
      V p1 = x
      V p2 = 1.0
      L(i) 2 .. n
         result = (prev1(i, p1) - prev2(i, p2)) / i
         p2 = p1
         p1 = result
      R result

F deriveLegendreIn(x, n)
   F calcresult(curr, prev)
      R Float(@n) / (@x ^ 2 - 1) * (@x * curr - prev)
   R calcresult(legendreIn(x, n), legendreIn(x, n - 1))

F guess(n, i)
   R cos(math:pi * (i - 0.25) / (n + 0.5))

F nodes(n)
   V result = [(0.0, 0.0)] * n
   F calc(x)
      R legendreIn(x, @n) / deriveLegendreIn(x, @n)

   L(i) 0 .< n
      V x = guess(n, i + 1)
      V x0 = x
      x -= calc(x)
      L abs(x - x0) > 1e-12
         x0 = x
         x -= calc(x)

      result[i] = (x, 2 / ((1.0 - x ^ 2) * (deriveLegendreIn(x, n)) ^ 2))

   R result

F integ(f, ns, p1, p2)
   F dist()
      R (@p2 - @p1) / 2
   F avg()
      R (@p1 + @p2) / 2
   V result = dist()
   V sum = 0.0
   V thenodes = [0.0] * ns
   V weights  = [0.0] * ns
   L(nw) nodes(ns)
      sum += nw[1] * f(dist() * nw[0] + avg())
      thenodes[L.index] = nw[0]
      weights[L.index] = nw[1]

   print(‘   nodes:’, end' ‘’)
   L(n) thenodes
      print(‘ #.5’.format(n), end' ‘’)
   print()
   print(‘ weights:’, end' ‘’)
   L(w) weights
      print(‘ #.5’.format(w), end' ‘’)
   print()
   R result * sum

print(‘integral: ’integ(x -> exp(x), 5, -3, 3))
