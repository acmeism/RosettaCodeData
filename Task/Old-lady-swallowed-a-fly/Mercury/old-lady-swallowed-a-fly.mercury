:- module oldlady.
:- interface.
:- import_module io.
:- pred main(io::di, io::uo) is det.
:- implementation.
:- import_module list, string.

:- type animal
    --->    horse
    ;       donkey
    ;       cow
    ;       goat
    ;       pig
    ;       dog
    ;       cat
    ;       bird
    ;       spider
    ;       fly.

:- func verse(animal) = string.
verse(horse)    = "She's dead, of course!".
verse(donkey)   = "It was rather wonky. To swallow a donkey.".
verse(cow)      = "I don't know how. To swallow a cow.".
verse(goat)     = "She just opened her throat. To swallow a goat.".
verse(pig)      = "Her mouth was so big. To swallow a pig.".
verse(dog)      = "What a hog. To swallow a dog.".
verse(cat)      = "Fancy that. To swallow a cat.".
verse(bird)     = "Quite absurd. To swallow a bird.".
verse(spider)   = "That wriggled and jiggled and tickled inside her.".
verse(fly)      = "I don't know why she swallowed the fly.".

:- pred tocatch(animal, animal).
:- mode tocatch(in, out) is semidet.
:- mode tocatch(out, in) is semidet.
tocatch(horse, donkey).
tocatch(donkey, cow).
tocatch(cow, goat).
tocatch(goat, pig).
tocatch(pig, dog).
tocatch(dog, cat).
tocatch(cat, bird).
tocatch(bird, spider).
tocatch(spider, fly).

:- pred swallow(animal::in, io::di, io::uo) is det.
swallow(A, !IO) :-
    ( if tocatch(A, B) then
        io.format("She swallowed the %s to catch the %s.\n",
            [s(string(A)), s(string(B))], !IO),
        swallow(B, !IO)
    else
        io.format("%s\nPerhaps she'll die.\n\n", [s(verse(fly))], !IO)
    ).

:- pred swallowed(animal::in, io::di, io::uo) is det.
swallowed(A, !IO) :-
    io.format("I know an old lady who swallowed a %s.\n", [s(string(A))], !IO),
    ( if A = horse then
        io.write_string("She's dead, of course!\n", !IO)
    else if A = fly, tocatch(B, A) then
        swallow(A, !IO),
        swallowed(B, !IO)
    else if tocatch(B, A) then
        io.write_string(verse(A), !IO),
        io.nl(!IO),
        swallow(A, !IO),
        swallowed(B, !IO)
    else
        true
    ).

main(!IO) :-
    swallowed(fly, !IO).
