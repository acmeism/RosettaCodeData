go =>
   %    _ # # # _ # # _ # _ # _ # _ # _ _ # _ _
   S = [0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0],
   println(init=S),
   run_ca(S),
   nl,

   println("Some random inits:"),
   _ = random2(),
   foreach(N in [5,10,20,50])
     S2 = [random() mod 2 : _I in 1..N],
     run_ca(S2),
     nl
    end.

%
% Run a CA and show the result.
%

% rule/1 is the default
run_ca(S) =>
  run_ca(S,rule).
run_ca(S,Rules) =>
  Len = S.length,
  All := [S],
  Seen = new_map(), % detect fixpoint and cycle
  while (not Seen.has_key(S))
    Seen.put(S,1),
    T = [S[1]] ++ [apply(Rules, slice(S,I-1,I+1)) : I in 2..Len-1] ++ [S[Len]],
    All := All ++ [T],
    S := T
  end,
  foreach(A in All) println(A.convert()) end,
  writeln(len=All.length).

% Convert:
%  0->"_"
%  1->"#"
convert(L) = Res =>
    B = "_#",
    Res = [B[L[I]+1] : I in 1..L.length].

% the rules
rule([0,0,0]) = 0. %
rule([0,0,1]) = 0. %
rule([0,1,0]) = 0. % Dies without enough neighbours
rule([0,1,1]) = 1. % Needs one neighbour to survive
rule([1,0,0]) = 0. %
rule([1,0,1]) = 1. % Two neighbours giving birth
rule([1,1,0]) = 1. % Needs one neighbour to survive
rule([1,1,1]) = 0. % Starved to death.
