def (uca l)  # new datatype: Uni-dimensional Cellular Automaton
  (tag uca (list l len.l))

def (len l) :case (isa uca l)  # how to compute its length
  rep.l.1

defcoerce uca list  # how to convert it to a list
  (fn(_) rep._.0)

def (pr l) :case (isa uca l)  # how to print it
  each x l  # transparently coerces to a list for iterating over
    pr (if x "#" "_")

# (l i) returns ith cell when l is a uca, and nil when i is out-of-bounds
defcall uca (l i)
  if (0 <= i < len.l)
    rep.l.0.i

def (gens n l)
  prn l
  repeat n
    zap! gen l
    prn l

def (gen l)
  uca+collect+for i 0 (i < len.l) ++i
    yield (next  (l i-1)  l.i  (l i+1))

# next state of b, given neighbors a and c
def (next a b c)
  if (and a c) not.b
     (or a c)  b
