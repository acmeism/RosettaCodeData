V MAX_BASE = 10
V POWER_DIGIT = (0 .< MAX_BASE).map(_ -> (0 .< :MAX_BASE).map(_ -> 1))
V USED_DIGITS = (0 .< MAX_BASE).map(_ -> 0)
[Int] NUMBERS

F calc_num(=depth, &used)
   ‘ calculate the number at a given recurse depth ’
   V result = Int64(0)
   I depth < 3
      R
   L(i) 1 .< :MAX_BASE
      I used[i] > 0
         result += Int64(used[i]) * :POWER_DIGIT[depth][i]
   I result != 0
      V (num, rnum) = (result, Int64(1))
      L rnum != 0
         rnum = num I/ :MAX_BASE
         used[Int(num - rnum * :MAX_BASE)]--
         num = rnum
         depth--
      I depth == 0
         V i = 1
         L i < :MAX_BASE & used[i] == 0
            i++
         I i >= :MAX_BASE
            :NUMBERS.append(Int(result))

F next_digit(=dgt, depth) -> N
   ‘ get next digit at the given depth ’
   I depth < :MAX_BASE - 1
      L(i) dgt .< :MAX_BASE
         :USED_DIGITS[dgt]++
         next_digit(i, depth + 1)
         :USED_DIGITS[dgt]--

   I dgt == 0
      dgt = 1
   L(i) dgt .< :MAX_BASE
      :USED_DIGITS[i]++
      calc_num(depth, &copy(:USED_DIGITS))
      :USED_DIGITS[i]--

L(j) 1 .< MAX_BASE
   L(k) 0 .< MAX_BASE
      POWER_DIGIT[j][k] = POWER_DIGIT[j - 1][k] * k

next_digit(0, 0)
print(NUMBERS)
NUMBERS = Array(Set(NUMBERS))
NUMBERS.sort()
print(‘Own digits power sums for N = 3 to 9 inclusive:’)
L(n) NUMBERS
   print(n)
