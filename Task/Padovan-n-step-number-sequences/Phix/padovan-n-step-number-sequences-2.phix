def pad_like(max_n=8, t=15):
    """
    First t terms of the first 2..max_n-step Padovan sequences.
    """
    start = [[], [1, 1, 1]]     # for n=0 and n=1 (hidden).
    for n in range(2, max_n+1):
        this = start[n-1][:n+1]     # Initialise from last
        while len(this) < t:
            this.append(sum(this[i] for i in range(-2, -n - 2, -1)))
        start.append(this)
    return start[2:]

def pr(p):
    print('''
:::: {| style="text-align: left;" border="4" cellpadding="2" cellspacing="2"
|+ Padovan <math>n</math>-step sequences
|- style="background-color: rgb(255, 204, 255);"
! <math>n</math> !! Values
|-
          '''.strip())
    for n, seq in enumerate(p, 2):
        print(f"| {n:2} || {str(seq)[1:-1].replace(' ', '')+', ...'}\n|-")
    print('|}')

if __name__ == '__main__':
    p = pad_like()
    pr(p)
