'''Padovan n-step number sequences'''

from itertools import chain, islice, repeat


# nStepPadovan :: Int -> [Int]
def nStepPadovan(n):
    '''Non-finite series of N-step Padovan numbers,
       defined by a recurrence relation.
    '''
    return unfoldr(recurrence(n))(
        take(1 + n)(
            repeat(1) if 3 > n else (
                nStepPadovan(n - 1)
            )
        )
    )


# recurrence :: Int -> [Int] -> Int
def recurrence(n):
    '''Recurrence relation in Fibonacci,
       Padovan and Perrin sequences.
    '''
    def go(xs):
        h, *t = xs
        return h, t + [sum(take(n)(xs))]
    return go


# ------------------------- TEST -------------------------
# main :: IO ()
def main():
    '''First 15 terms each nStepPadovan(n) series
       where n is drawn from [2..8]
    '''
    xs = range(2, 1 + 8)
    print('Padovan n-step series:\n')
    print(
        spacedTable(list(map(
            lambda k, n: list(chain(
                [k + ' -> '],
                (
                    str(x) for x
                    in take(15)(nStepPadovan(n))
                )
            )),
            (str(x) for x in xs),
            xs
        )))
    )


# ----------------------- GENERIC ------------------------

# take :: Int -> [a] -> [a]
# take :: Int -> String -> String
def take(n):
    '''The prefix of xs of length n,
       or xs itself if n > length xs.
    '''
    def go(xs):
        return (
            xs[0:n]
            if isinstance(xs, (list, tuple))
            else list(islice(xs, n))
        )
    return go


# unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
def unfoldr(f):
    '''Generic anamorphism.
       A lazy (generator) list unfolded from a seed value by
       repeated application of f until no residue remains.
       Dual to fold/reduce.
       f returns either None, or just (value, residue).
       For a strict output value, wrap in list().
    '''
    def go(x):
        valueResidue = f(x)
        while None is not valueResidue:
            yield valueResidue[0]
            valueResidue = f(valueResidue[1])
    return go


# ---------------------- FORMATTING ----------------------

# spacedTable :: [[String]] -> String
def spacedTable(rows):
    '''A table with right-aligned columns.
    '''
    columnWidths = [
        max([len(x) for x in col])
        for col in zip(*rows)
    ]
    return '\n'.join(
        ' '.join(map(
            lambda x, w: x.rjust(w, ' '),
            row, columnWidths
        ))
        for row in rows
    )


# MAIN ---
if __name__ == '__main__':
    main()
