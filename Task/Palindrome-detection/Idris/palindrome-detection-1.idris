module Palindromes

import Data.Primitives.Views
import Data.List
import Data.List.Views
import Data.Nat

isPalindromeReverse : String -> Bool
isPalindromeReverse str = let cs = unpack str in cs == reverse cs

isPalindromeReverseHalf : String -> Bool
isPalindromeReverseHalf str =
  let cs = (unpack str)
      n = (length str) `div` 2
   in take n cs == (take n $ reverse cs)

isPalindromeSplit : String -> Bool
isPalindromeSplit str =
  let cs = unpack str
      n = length cs `div` 2
      (left, right) = bimap id reverse $ splitAt n cs
    in all (uncurry (==)) $ zip left right

isPalindromeSnoc : String -> Bool
isPalindromeSnoc str =
  let cs = unpack str in go cs
  where go : Eq a => List a -> Bool
        go xs with (snocList xs)
          go (x :: ys ++ [z]) | Snoc z (x::ys) _ = x == z && go ys
          go _ | _ = True
