module PalindromesTypeLevel

import Data.List
import Data.List.Views


isPalindromeDirect : (str : String) -> (str = reverse str) => Bool
isPalindromeDirect _ = True

ipd = isPalindromeDirect "AABBAA"

failing
  ipdf = isPalindromeDirect "ABCCBB"


||| Proof that the list is constructed of consecutive pairs of equal elements.
||| Last element can be unpaired.
data EqualPairsInList : List a -> Type where
  Nil : EqualPairsInList []
  Single : EqualPairsInList [x]
  EqualPair : EqualPairsInList xs -> EqualPairsInList (x :: x :: xs)

||| Reorders the list so that the first half is interleaved with a reversed second half.
interleaveOwnHalfReverse : List a -> List a
interleaveOwnHalfReverse [] = []
interleaveOwnHalfReverse [x] = [x]
interleaveOwnHalfReverse (x :: y :: ys) = let (z, zs) = splitLast (y::ys) in x :: z :: interleaveOwnHalfReverse zs
  where splitLast : (xs : List a) -> NonEmpty xs => (a, List a)
        splitLast [x] = (x, [])
        splitLast (x :: y :: ys) = let (z, zs) = splitLast (y::ys) in (z, x::zs)

||| Precondition for checking if a list is a palindrome.
IsPalindrome : List a -> Type
IsPalindrome = EqualPairsInList . interleaveOwnHalfReverse

||| Function for testing palindromes. Typechecks only when applied to a palindrome list.
isPalindrome : (xs : List a) -> IsPalindrome xs => Bool
isPalindrome  _ = True

||| Palindrome precondition specialized for strings.
IsPalindromeStr : String -> Type
IsPalindromeStr = IsPalindrome . unpack

||| Function for testing string palindromes. Typechecks only when applied to a palindrome list.
isPalindromeStr : (str : String) -> IsPalindromeStr str => Bool
isPalindromeStr  _ = True


-- Tests

ip = isPalindrome [1, 4, 3, 1, 1, 3, 4, 1]
ips = isPalindromeStr "ABCDCBA"

failing
  ipf = isPalindrome [2, 2, 2, 3, 2, 2]

failing
  ipsf = isPalindromeStr "RBCDCBA"
