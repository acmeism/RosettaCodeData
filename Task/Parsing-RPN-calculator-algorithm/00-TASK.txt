;Task:
Create a stack-based evaluator for an expression in &nbsp; [[wp:Reverse Polish notation|<u>r</u>everse <u>P</u>olish <u>n</u>otation (RPN)]] &nbsp; that also shows the changes in the stack as each individual token is processed ''as a table''.


* Assume an input of a correct, space separated, string of tokens of an RPN expression
* Test with the RPN expression generated from the &nbsp; [[Parsing/Shunting-yard algorithm]] &nbsp; task: <br>
&nbsp; &nbsp; &nbsp; &nbsp; <big><big><code> 3 4 2 * 1 5 - 2 3 ^ ^ / + </code></big></big> 
* Print or display the output here


;Notes:
* &nbsp; <big><b> '''^''' </b></big> &nbsp; means exponentiation in the expression above.
* &nbsp; <big><b> '''/''' </b></big> &nbsp; means division.


;See also:
* &nbsp; [[Parsing/Shunting-yard algorithm]] for a method of generating an RPN from an infix expression.
* &nbsp; Several solutions to [[24 game/Solve]] make use of RPN evaluators (although tracing how they work is not a part of that task).
* &nbsp; [[Parsing/RPN to infix conversion]].
* &nbsp; [[Arithmetic evaluation]].
<br><br>

