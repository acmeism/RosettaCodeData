Dim Shared As Boolean showWorkings = True
Dim Shared As String*1 operators(4) = {"^","*","/","+","-"}
Dim Shared As Integer precedence(4) = { 4,  3,  3,  2,  2 }
Dim Shared As Integer rassoc(4)     = {Asc("r"), 0 , Asc("l"), 0 , Asc("l")}

Sub parseRPN(expr As String, expected As String)
    Dim As String stack(), ops()
    Dim As String lhs, rhs, token, op, res
    Dim As Integer lprec, rprec, posic
    Dim As Integer i, j, k

    ' Convert expr to ops array without using SPLIT
    posic = 1
    While posic <= Len(expr)
        token = ""
        While posic <= Len(expr) And Mid(expr, posic, 1) <> " "
            token &= Mid(expr, posic, 1)
            posic += 1
        Wend
        If token <> "" Then
            Redim Preserve ops(Ubound(ops) + 1)
            ops(Ubound(ops)) = token
        End If
        posic += 1
    Wend

    Print "Postfix input: ";
    Print Using ("\                               \"); expr;
    Print Iif(showWorkings, Chr(10), " ");

    If Ubound(ops) = -1 Then
        Print "error"
        Exit Sub
    End If

    For i = 0 To Ubound(ops)
        op = ops(i)
        k = -1
        For j = 0 To Ubound(operators)
            If op = operators(j) Then
                k = j
                Exit For
            End If
        Next

        If k = -1 Then
            Redim Preserve stack(Ubound(stack) + 1)
            stack(Ubound(stack)) = "9 " & op
        Else
            If Ubound(stack) < 1 Then
                Print "error"
                Exit Sub
            End If
            Dim As String rprec_rhs = stack(Ubound(stack))
            stack(Ubound(stack)) = ""
            Redim Preserve stack(Ubound(stack) - 1)
            Dim As String lprec_lhs = stack(Ubound(stack))
            lprec = Val(Left(lprec_lhs, 1))
            lhs = Mid(lprec_lhs, 3)
            rprec = Val(Left(rprec_rhs, 1))
            rhs = Mid(rprec_rhs, 3)
            Dim As Integer prec = precedence(k)
            Dim As Integer assoc = rassoc(k)
            If lprec < prec Or (lprec = prec And assoc = Asc("r")) Then lhs = "(" & lhs & ")"
            If rprec < prec Or (rprec = prec And assoc = Asc("l")) Then rhs = "(" & rhs & ")"
            stack(Ubound(stack)) = prec & " " & lhs & " " & op & " " & rhs
        End If

        If showWorkings Then
            ?"[";
            'Print op; " "; Join(stack, ", ")
            Print op; ", [["; stack(0);
            For j = 1 To Ubound(stack)
                Print "], ["; stack(j);
            Next
            Print "]]]"
        End If
    Next

    res = Mid(stack(0), 3)
    Print "Infix result: "; res;
    Print " ["; Iif(res = expected, "ok", "**ERROR**"); "]"
End Sub

parseRPN("3 4 2 * 1 5 - 2 3 ^ ^ / +", "3 + 4 * 2 / (1 - 5) ^ 2 ^ 3")
showWorkings = False
parseRPN("1 2 + 3 4 + ^ 5 6 + ^", "((1 + 2) ^ (3 + 4)) ^ (5 + 6)")
parseRPN("1 2 + 3 4 + 5 6 + ^ ^", "(1 + 2) ^ (3 + 4) ^ (5 + 6)")
parseRPN("moon stars mud + * fire soup * ^", "(moon * (stars + mud)) ^ (fire * soup)")
parseRPN("3 4 ^ 2 9 ^ ^ 2 5 ^ ^", "((3 ^ 4) ^ 2 ^ 9) ^ 2 ^ 5")
parseRPN("5 6 * * + +", "error")
parseRPN("", "error")
parseRPN("1 4 + 5 3 + 2 3 * * *", "(1 + 4) * (5 + 3) * 2 * 3")
parseRPN("1 2 * 3 4 * *", "1 * 2 * 3 * 4")
parseRPN("1 2 + 3 4 + +", "1 + 2 + 3 + 4")
parseRPN("1 2 + 3 4 + ^", "(1 + 2) ^ (3 + 4)")
parseRPN("5 6 ^ 7 ^", "(5 ^ 6) ^ 7")
parseRPN("5 4 3 2 ^ ^ ^", "5 ^ 4 ^ 3 ^ 2")
parseRPN("1 2 3 + +", "1 + 2 + 3")
parseRPN("1 2 + 3 +", "1 + 2 + 3")
parseRPN("1 2 3 ^ ^", "1 ^ 2 ^ 3")
parseRPN("1 2 ^ 3 ^", "(1 ^ 2) ^ 3")
parseRPN("1 1 - 3 +", "1 - 1 + 3")
parseRPN("3 1 1 - +", "3 + 1 - 1")
parseRPN("1 2 3 + -", "1 - (2 + 3)")
parseRPN("4 3 2 + +", "4 + 3 + 2")
parseRPN("5 4 3 2 + + +", "5 + 4 + 3 + 2")
parseRPN("5 4 3 2 * * *", "5 * 4 * 3 * 2")
parseRPN("5 4 3 2 + - +", "5 + 4 - (3 + 2)")
parseRPN("3 4 5 * -", "3 - 4 * 5")
parseRPN("3 4 5 - *", "3 * (4 - 5)")
parseRPN("3 4 - 5 *", "(3 - 4) * 5")
parseRPN("4 2 * 1 5 - +", "4 * 2 + 1 - 5")
parseRPN("4 2 * 1 5 - 2 ^ /", "4 * 2 / (1 - 5) ^ 2")
parseRPN("3 4 2 * 1 5 - 2 3 ^ ^ / +", "3 + 4 * 2 / (1 - 5) ^ 2 ^ 3")

Sleep
