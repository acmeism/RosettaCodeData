import cp.

puzzle2 =>
  N = 5, % number of rows
  Len = (N*(N+1)) div 2, % number of entries

  % The triangle numbers for 1..N
  T = [I*(I+1) div 2 : I in 1..N],

  % The index of first number to use in addition
  % create the indices of the numbers to add,
  % i.e. Adds[I] + Adds[I+1]
  Adds = new_list(T[N-1]),
  Adds[1] := 2,
  foreach(I in 2..T[N-1])
    % "jump" of 2 when i-1 is a triangle number
    if membchk(I-1,T) then
      Adds[I] := Adds[I-1] + 2
    else
      Adds[I] := Adds[I-1] + 1
    end
  end,

  % the pyramid
  MaxVal = 10_000,
  L = new_list(Len),
  L :: 1..MaxVal,

  % The clues.
  L =    [   151,
            _, _,
            40, _, _,
          _, _,_ , _ ,
         X, 11, Y, 4, Z
  ],

  % The sums
  foreach(I in 1..T[N-1])
    L[I] #= L[Adds[I]]+L[Adds[I]+1]
  end,

  % The extra constraint
  Y #= X + Z,

  solve(L),
  println([x=X,y=Y,z=Z]),
  fail, % check if there is another solution
  nl.
