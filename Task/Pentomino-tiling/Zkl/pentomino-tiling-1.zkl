fcn printResult
   { foreach row in (grid){ row.apply(symbols.get).concat(" ").println() } }
fcn tryPlaceOrientation(o, R,C, shapeIndex){
   foreach ro,co in (o){ r,c:=R+ro, C+co;
      if(r<0 or r>=nRows or c<0 or c>=nCols or grid[r][c]!=-1) return(False);
   }
   grid[R][C]=shapeIndex; foreach ro,co in (o){ grid[R+ro][C+co]=shapeIndex }
   True
}
fcn removeOrientation(o, r,c)
  { grid[r][c]=-1; foreach ro,co in (o){ grid[r+ro][c+co]=-1 } }
fcn solve(pos,numPlaced){
   if(numPlaced==target) return(True);

   row,col:=pos.divr(nCols);
   if(grid[row][col]!=-1) return(solve(pos+1,numPlaced));

   foreach i in (shapes.len()){
      if(not placed[i]){
	 foreach orientation in (shapes[i]){
	    if(not tryPlaceOrientation(orientation, row,col, i)) continue;
	    placed[i]=True;
	    if(solve(pos+1,numPlaced+1)) return(True);
	    removeOrientation(orientation, row,col);
	    placed[i]=False;
	 }
      }
   }
   False
}
