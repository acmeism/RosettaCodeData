UInt32 seed = 0
F nonrandom()
   :seed = 1664525 * :seed + 1013904223
   R Int(:seed >> 16) / Float(FF'FF)

V (p, t) = (0.5, 500)

F newv(n, p)
   R (0 .< n).map(i -> Int(nonrandom() < @p))

F runs(v)
   R sum(zip(v, v[1..] [+] [0]).map((a, b) -> (a [&] (-)b)))

F mean_run_density(n, p)
   R runs(newv(n, p)) / Float(n)

L(p10) (1.<10).step(2)
   p = p10 / 10
   V limit = p * (1 - p)
   print(‘’)
   L(n2) (10.<16).step(2)
      V n = 2 ^ n2
      V sim = sum((0 .< t).map(i -> mean_run_density(@n, :p))) / t
      print(‘t=#3 p=#.2 n=#5 p(1-p)=#.3 sim=#.3 delta=#.1%’.format(
             t,   p,    n,       limit, sim, I limit {abs(sim - limit) / limit * 100} E sim * 100))
