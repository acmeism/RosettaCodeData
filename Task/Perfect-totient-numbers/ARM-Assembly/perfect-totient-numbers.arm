/* ARM assembly Raspberry PI or android with termux */
/*  program totientPerfect.s   */

 /* REMARK 1 : this program use routines in a include file
   see task Include a file language arm assembly
   for the routine affichageMess conversion10
   see at end of this program the instruction include */
/* for constantes see task include a file in arm assembly */
/************************************/
/* Constantes                       */
/************************************/
.include "../constantes.inc"
.equ MAXI,      20

/*********************************/
/* Initialized data              */
/*********************************/
.data
szMessNumber:       .asciz " @ "
szCarriageReturn:   .asciz "\n"

/*********************************/
/* UnInitialized data            */
/*********************************/
.bss
sZoneConv:           .skip 24
/*********************************/
/*  code section                 */
/*********************************/
.text
.global main
main:
    mov r4,#2                   @ start number
    mov r6,#0                   @ line counter
    mov r7,#0                   @ result counter
1:
    mov r0,r4
    mov r5,#0                   @ totient sum
2:
    bl totient                  @ compute totient
    add r5,r5,r0                @ add totient
    cmp r0,#1
    beq 3f
    b 2b
3:
    cmp r5,r4                   @ compare number and totient sum
    bne 4f
    mov r0,r4                   @ display result if equals
    ldr r1,iAdrsZoneConv
    bl conversion10             @ call dÃ©cimal conversion
    ldr r0,iAdrszMessNumber
    ldr r1,iAdrsZoneConv        @ insert conversion in message
    bl strInsertAtCharInc
    bl affichageMess            @ display message
    add r7,r7,#1
    add r6,r6,#1                @ increment indice line display
    cmp r6,#5                   @ if = 5  new line
    bne 4f
    mov r6,#0
    ldr r0,iAdrszCarriageReturn
    bl affichageMess
4:
    add r4,r4,#1                 @ increment number
    cmp r7,#MAXI                 @ maxi ?
    blt 1b                       @ and loop

    ldr r0,iAdrszCarriageReturn
    bl affichageMess

100:                            @ standard end of the program
    mov r0, #0                  @ return code
    mov r7, #EXIT               @ request to exit program
    svc #0                      @ perform the system call
iAdrszCarriageReturn:    .int szCarriageReturn
iAdrsZoneConv:           .int sZoneConv
iAdrszMessNumber:        .int szMessNumber
/******************************************************************/
/*     compute totient of number                                  */
/******************************************************************/
/* r0 contains number  */
totient:
    push {r1-r5,lr}           @ save  registers
    mov r4,r0                 @ totient
    mov r5,r0                 @ save number
    mov r1,#0                 @ for first divisor
1:                            @ begin loop
    mul r3,r1,r1              @ compute square
    cmp r3,r5                 @ compare number
    bgt 4f                    @ end
    add r1,r1,#2              @ next divisor
    mov r0,r5
    bl division
    cmp r3,#0                 @ remainder null ?
    bne 3f
2:                            @ begin loop 2
    mov r0,r5
    bl division
    cmp r3,#0
    moveq r5,r2               @ new value = quotient
    beq 2b

    mov r0,r4                 @ totient
    bl division
    sub r4,r4,r2              @ compute new totient
3:
    cmp r1,#2                 @ first divisor ?
    moveq r1,#1               @ divisor = 1
    b 1b                      @ and loop
4:
    cmp r5,#1                 @ final value > 1
    ble 5f
    mov r0,r4                 @ totient
    mov r1,r5                 @ divide by value
    bl division
    sub r4,r4,r2              @ compute new totient
5:
    mov r0,r4
100:
    pop {r1-r5,pc}             @ restaur registers

/***************************************************/
/*      ROUTINES INCLUDE                           */
/***************************************************/
.include "../affichage.inc"
