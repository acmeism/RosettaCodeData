UInt32 seed = 0
F nonrandom()
   :seed = 1664525 * :seed + 1013904223
   R (:seed >> 16) / Float(FF'FF)

F mrUnrank1(&vec, rank, n)
   I n < 1 {R}
   V (q, r) = divmod(rank, n)
   swap(&vec[r], &vec[n - 1])
   mrUnrank1(&vec, q, n - 1)

F mrRank1(&vec, &inv, n)
   I n < 2 {R 0}
   V s = vec[n - 1]
   swap(&vec[n - 1], &vec[inv[n - 1]])
   swap(&inv[s], &inv[n - 1])
   R s + n * mrRank1(&vec, &inv, n - 1)

F getPermutation(&vec, rank)
   L(i) 0 .< vec.len {vec[i] = i}
   mrUnrank1(&vec, rank, vec.len)

F getRank(vec)
   V v = [0] * vec.len
   V inv = [0] * vec.len
   L(val) vec
      v[L.index] = val
      inv[val] = L.index
   R mrRank1(&v, &inv, vec.len)

V tv3 = [0] * 3
L(r) 6
   getPermutation(&tv3, r)
   print(‘#2 -> #. -> #.’.format(r, tv3, getRank(tv3)))

print()
V tv4 = [0] * 4
L(r) 24
   getPermutation(&tv4, r)
   print(‘#2 -> #. -> #.’.format(r, tv4, getRank(tv4)))

print()
V tv12 = [0] * 12
L 4
   V r = Int(nonrandom() * factorial(12))
   getPermutation(&tv12, r)
   print(‘#9 -> #. -> #.’.format(r, tv12, getRank(tv12)))
