func IsPrime(N);        \Return 'true' if N is prime
int  N, D;
[if N < 2 then return false;
if (N&1) = 0 then return N = 2;
if rem(N/3) = 0 then return N = 3;
D:= 5;
while D*D <= N do
    [if rem(N/D) = 0 then return false;
    D:= D+2;
    if rem(N/D) = 0 then return false;
    D:= D+4;
    ];
return true;
];

func Pierpont(N);       \Return 'true' if N is a multiple of 2^U*3^V
int  N;
[while (N&1) = 0 do N:= N>>1;
while N>1 do
    [N:= N/3;
    if rem(0) # 0 then return false;
    ];
return true;
];

int Kind, N, Count;
[Format(9, 0);
Kind:= 1;
repeat  Count:= 0;  N:= 2;
        loop    [if IsPrime(N) then
                    [if Pierpont(N-Kind) then
                        [Count:= Count+1;
                        RlOut(0, float(N));
                        if rem(Count/10) = 0 then CrLf(0);
                        if Count >= 50 then quit;
                        ];
                    ];
                N:= N+1;
                ];
        CrLf(0);
        Kind:= -Kind;
until   Kind = 1;
]
