F lcm(m, n)
   R m I/ gcd(m, n) * n

F get_primes(=n)
   [Int] r
   L(d) 2 .. n
      V q = n I/ d
      V m = n % d
      L m == 0
         r.append(d)
         n = q
         q = n I/ d
         m = n % d
   R r

F is_prime(a)
   I a == 2
      R 1B
   I a < 2 | a % 2 == 0
      R 0B
   L(i) (3 .. Int(sqrt(a))).step(2)
      I a % i == 0
         R 0B
   R 1B

F pisano_period(m)
   V p = 0
   V c = 1
   L(i) 0 .< m * m
      p = (p + c) % m
      swap(&p, &c)
      I p == 0 & c == 1
         R i + 1
   R 1

F pisano_prime(p, k)
   R I is_prime(p) {p ^ (k - 1) * pisano_period(p)} E 0

F pisano(m)
   V primes = get_primes(m)
   DefaultDict[Int, Int] prime_powers
   L(p) primes
      prime_powers[p]++
   [Int] pps
   L(k, v) prime_powers
      pps.append(pisano_prime(k, v))
   I pps.empty
      R 1
   V result = pps[0]
   L(i) 1 .< pps.len
      result = lcm(result, pps[i])
   R result

L(p) 2..14
   V pp = pisano_prime(p, 2)
   I pp > 0
      print(‘pisano_prime(#2, 2) = #.’.format(p, pp))

print()
L(p) 2..179
   V pp = pisano_prime(p, 1)
   I pp > 0
      print(‘pisano_prime(#3, 1) = #.’.format(p, pp))

print()
print(‘pisano(n) for integers 'n' from 1 to 180 are:’)
L(n) 1..180
   print(‘#3’.format(pisano(n)), end' I n % 15 == 0 {"\n"} E ‘ ’)
