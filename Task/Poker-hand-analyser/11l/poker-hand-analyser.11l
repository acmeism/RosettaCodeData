F analyzeHandHelper(faceCount, suitCount)
   V
      p1 = 0B
      p2 = 0B
      t  = 0B
      f  = 0B
      fl = 0B
      st = 0B

   L(fc) faceCount
      S fc
         2 {I p1 {p2 = 1B} E p1 = 1B}
         3 {t = 1B}
         4 {f = 1B}

   L(sc) suitCount
      I sc == 5
         fl = 1B

   I !p1 & !p2 & !t & !f
      V s = 0
      L(fc) faceCount
         I fc != 0
            s++
         E
            s = 0
         I s == 5
            L.break

      st = (s == 5) | (s == 4 & faceCount[0] != 0 & faceCount[1] == 0)

   I st & fl   {R ‘straight-flush’}
   E I f       {R ‘four-of-a-kind’}
   E I p1 & t  {R ‘full-house’}
   E I fl      {R ‘flush’}
   E I st      {R ‘straight’}
   E I t       {R ‘three-of-a-kind’}
   E I p1 & p2 {R ‘two-pair’}
   E I p1      {R ‘one-pair’}
   E           {R ‘high-card’}

F analyzeHand(inHand)
   V handLen = 5
   V face = ‘A23456789TJQK’
   V suit = ‘SHCD’
   V errorMessage = ‘invalid hand.’

   V hand = sorted(inHand.split(‘ ’))
   I hand.len != handLen
      R errorMessage
   I Set(hand).len != handLen
      R errorMessage‘ Duplicated cards.’

   V faceCount = [0] * face.len
   V suitCount = [0] * suit.len
   L(card) hand
      I card.len != 2
         R errorMessage
      V? n = face.find(card[0])
      V? l = suit.find(card[1])
      I n == N | l == N
         R errorMessage
      faceCount[n]++
      suitCount[l]++

   R analyzeHandHelper(faceCount, suitCount)

L(hand) [‘2H 2D 2S KS QD’,
         ‘2H 5H 7D 8S 9D’,
         ‘AH 2D 3S 4S 5S’,
         ‘2H 3H 2D 3S 3D’,
         ‘2H 7H 2D 3S 3D’,
         ‘2H 7H 7D 7S 7C’,
         ‘TH JH QH KH AH’,
         ‘4H 4C KC 5D TC’,
         ‘QC TC 7C 6C 4C’]
   print(hand‘: ’analyzeHand(hand))
