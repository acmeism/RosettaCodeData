F degree(&poly)
   L !poly.empty & poly.last == 0
      poly.pop()
   R poly.len - 1

F poly_div(&n, &D)
   V dD = degree(&D)
   V dN = degree(&n)
   I dD < 0
      exit(1)
   [Float] q
   I dN >= dD
      q = [0.0] * dN
      L dN >= dD
         V d = [0.0] * (dN - dD) [+] D
         V mult = n.last / Float(d.last)
         q[dN - dD] = mult
         d = d.map(coeff -> coeff * @mult)
         n = zip(n, d).map((coeffN, coeffd) -> coeffN - coeffd)
         dN = degree(&n)
   E
      q = [0.0]
   R (q, n)

print(‘POLYNOMIAL LONG DIVISION’)
V n = [-42.0, 0.0, -12.0, 1.0]
V D = [-3.0, 1.0, 0.0, 0.0]
print(‘  #. / #. =’.format(n, D), end' ‘ ’)
V (q, r) = poly_div(&n, &D)
print(‘ #. remainder #.’.format(q, r))
