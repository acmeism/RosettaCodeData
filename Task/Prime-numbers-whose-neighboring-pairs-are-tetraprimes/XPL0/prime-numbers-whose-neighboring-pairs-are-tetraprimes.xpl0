include xpllib;         \for IsPrime, Sort, and Print

func Median(A, Len);    \Return median value of (sorted) array A
int  A, Len, M;
[M:= Len/2;
return if rem(0) then A(M) else (A(M-1) + A(M)) / 2;
];

int Have7;              \Boolean: a tetraprime factor is 7

func IsTetraprime(N);   \Return 'true' if N is a tetraprime
int  N;
int  Div, Count, Distinct;
[Div:= 2;  Count:= 0;
while N >= Div*Div do
    [Distinct:= true;
    while rem(N/Div) = 0 do
        [if not Distinct then return false;
        Distinct:= false;
        Count:= Count+1;
        if Div = 7 then Have7:= true;
        N:= N/Div;
        ];
    Div:= Div+1;
    ];
if N > 1 then Count:= Count+1;
return Count = 4;
];

int Sign, TenPower, TP, Case, N, N0, Count, Count7, Gaps;
[Sign:= -1;  TenPower:= 100_000;
for TP:= 5 to 7 do
    [for Case:= 1 to 2 do       \preceding or following neighboring pairs
        [Count:= 0;  Count7:= 0;  N0:= 0;  Gaps:= 0;
        if TP = 5 then CrLf(0); \100_000
        for N:= 3 to TenPower-1 do
            [if IsPrime(N) then
                [Have7:= false;
                if IsTetraprime(N+1*Sign) then
                    if IsTetraprime(N+2*Sign) then
                        [Count:= Count+1;
                        if TP = 5 then
                            [Print("%7d", N);
                            if rem(Count/10) = 0 then CrLf(0);
                            ];
                        if Have7 then Count7:= Count7+1;
                        if N0 # 0 then
                            [Gaps:= ReallocMem(Gaps, Count*4);  \4 = SizeOfInt
                            Gaps(Count-2):= N - N0;
                            ];
                        N0:= N;
                        ];
                ];
            N:= N+1;
            ];
        Sort(Gaps, Count-1);
        Print("\nFound %,d primes under %,d whose neighboring pair are tetraprimes\n",
            Count, TenPower);
        Print("of which %,d have a neighboring pair, one of whose factors is 7.\n\n",
            Count7);
        Print("Minimum gap between %,d primes : %,d\n", Count, Gaps(0));
        Print("Median  gap between %,d primes : %,d\n", Count, Median(Gaps, Count-1));
        Print("Maximum gap between %,d primes : %,d\n", Count, Gaps(Count-2));
        Sign:= Sign * -1;
        ];
    TenPower:= TenPower * 10;
    ];
]
