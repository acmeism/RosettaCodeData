class Circle{
   fcn init(xpos,ypos,radius){
      var [const] x=xpos.toFloat(), y=ypos.toFloat(),r=radius.toFloat();
   }
   fcn toString{ "Circle(%f,%f,%f)".fmt(x,y,r) }
   fcn apollonius(c2,c3,outside=True){
      s1:=s2:=s3:=outside and 1 or -1;

      v11:=2.0*(c2.x - x);
      v12:=2.0*(c2.y - y);
      v13:=x.pow(2) - c2.x.pow(2) +
	   y.pow(2) - c2.y.pow(2) -
	   r.pow(2) + c2.r.pow(2);
      v14:=2.0*(s2*c2.r - s1*r);

      v21:=2.0*(c3.x - c2.x);
      v22:=2.0*(c3.y - c2.y);
      v23:=c2.x.pow(2) - c3.x.pow(2) +
	   c2.y.pow(2) - c3.y.pow(2) -
	   c2.r.pow(2) + c3.r.pow(2);
      v24:=2.0*(s3*c3.r - s2*c2.r);

      w12,w13,w14:=v12/v11,       v13/v11,       v14/v11;
      w22,w23,w24:=v22/v21 - w12, v23/v21 - w13, v24/v21 - w14;

      P:=-w23/w22;
      Q:= w24/w22;
      M:=-w12*P - w13;
      N:= w14 - w12*Q;

      a:=N*N + Q*Q - 1;
      b:=2.0*(M*N - N*x + P*Q - Q*y + s1*r);
      c:=x*x + M*M - 2.0*M*x + P*P + y*y - 2.0*P*y - r*r;

      // find a root of a quadratic equation.
      // This requires the circle centers not to be e.g. colinear
      D:=b*b - 4.0*a*c;
      rs:=(-b - D.sqrt())/(2.0*a);

      Circle(M + N*rs, P + Q*rs, rs);
   }
}
