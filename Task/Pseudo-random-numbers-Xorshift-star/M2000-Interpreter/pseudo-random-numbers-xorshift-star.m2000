module Pseudo_random_numbers{
	class Xorshift_star{
	private:
		Decimal state=int(rnd*0x2000_0000_0000_0000)       ' Must be seeded to non-zero initial value
		final MAGIC=0x2545F4914F6CDD1D
		function xorU64(x, y) {
			const dec1=0x1_0000_0000
			x_u=x div dec1
			x_d=x mod dec1
			y_u=y div dec1
			y_d=y mod dec1
			=binary.xor(x_u, y_u)*dec1+binary.xor(x_d, y_d)
		}
		function ShiftRightU64(x, y) {
			boolean skip
			const dec1=0x1_0000_0000
			if y>31 then y=y-32:skip=true
			y=-abs(y)
			x_u=x div dec1
			if skip then
				= binary.shift(x_u, y)								
			else
				x_d=x mod dec1
				f1= binary.not(binary.shift(0xFFFF_FFFF, y))
				f2= binary.and(binary.rotate(x_u, y), f1)
				= binary.shift(x_u, y)*dec1+binary.shift(x_d, y)+f2
			end if
		}
		function ShiftLeftU64(x, y) {
			boolean skip
			y=abs(y)
			const dec1=0x1_0000_0000
			if y>31 then y=y-32:skip=true
			x_d=x mod dec1
			if skip then
				=binary.shift(x_d, y)*dec1
			else
				f1= binary.not(binary.shift(0xFFFF_FFFF, y))
				f2= binary.and(binary.rotate(x_d, y), f1)*dec1
				x_u=x div dec1		
				= binary.shift(x_u, y)*dec1+binary.shift(x_d, y)+f2
			end if
		}
		function mul64to32(x, y) {
			const dd=0x1_0000_0000
			long long a=x mod dd, b=x div dd
			long long a1=y mod dd, 	b1=y div dd
			decimal mm=0
			p1=a*a1
			mm+=p1
			p1=(b*a1+a*b1) mod dd
			mm+=p1*dd
			=(mm div dd) mod dd
		}
	public:
		module seed(num as decimal) {
			.state <=  int(abs(num))
		}
		function next_int() {
			x =.state
			x = .xorU64(x, .ShiftRightU64(x, 12))
			x = .xorU64(x, .ShiftLeftU64(x, 25))
			x = .xorU64(x, .ShiftRightU64(x, 27))
			.state <= x
			=.mul64to32(x, .MAGIC)
		}
		function next_float() {
			= .next_int() /0x1_0000_0000
		}
	}
	k=Xorshift_star()
	k.seed 1234567
	Print k.next_int()
	Print k.next_int()
	Print k.next_int()
	Print k.next_int()
	Print k.next_int()
	k.seed 987654321
	dim hist(5)
	for i=1 to 100_000:hist(floor(k.next_float()*5))++:next
	z=each(hist())
	while z
		print z^;": "; array(z)
	end while
}
Pseudo_random_numbers
