main :-
  garbage_collect(300_000_000),
  Data = [100, 1_000, 10_000, 100_000, 1_000_000, 10_000_000, 100_000_000],
  member(Max, Data),
  count_triples(Max, Total, Prim),
  printf("upto %d, there are %d Pythagorean triples (%d primitive.)%n", Max, Total, Prim),
  fail,
  nl.

count_triples(Max, Total, Prims) :-
  Ps = findall(S, (triple(Max, A, B, C), S is A + B + C)),
  Prims = Ps.len,
  Total = sum([Max div P : P in Ps]).

% - between_by/4
between_by(A, B, N, K) :-
  C = (B - A) div N,
  between(0, C, J),
  K = N*J + A.

% - Pythagorean triple generator
triple(P, A, B, C) :-
  Max = floor(sqrt(P/2)) - 1,
  between(0, Max, M),
  Start = (M /\ 1) + 1,
  Pm = M - 1,
  between_by(Start, Pm, 2, N),
  gcd(M, N) == 1,
  X = M*M - N*N,
  Y = 2*M*N,
  C = M*M + N*N,
  order2(X, Y, A, B),
  (A + B + C) =< P.

order2(A, B, A, B) :- A < B, !.
order2(A, B, B, A).
