:- module test_quaternion.

:- interface.

:- import_module io.

:- pred main(io::di, io::uo) is det.

:- implementation.

:- import_module quaternion.

:- import_module exception.
:- import_module float.
:- import_module list.
:- import_module string.

:- func to_string(quaternion) = string is det.

main(!IO) :-
    Q  = q(1.0, 2.0, 3.0, 4.0),
    Q1 = q(2.0, 3.0, 4.0, 5.0),
    Q2 = q(3.0, 4.0, 5.0, 6.0),
    R = 7.0,
    QR = r(R),

    io.print("Q = ", !IO), io.print(to_string(Q), !IO), io.nl(!IO),
    io.print("Q1 = ", !IO), io.print(to_string(Q1), !IO), io.nl(!IO),
    io.print("Q2 = ", !IO), io.print(to_string(Q2), !IO), io.nl(!IO),
    io.print("R = ", !IO), io.print(R, !IO), io.nl(!IO),
    io.nl(!IO),

    io.print("1. The norm of a quaternion.\n", !IO),
    io.print("norm(Q) = ", !IO), io.print(norm(Q), !IO), io.nl(!IO),
    io.nl(!IO),

    io.print("2. The negative of a quaternion.\n", !IO),
    io.print("-Q = ", !IO), io.print(to_string(-Q), !IO), io.nl(!IO),
    io.nl(!IO),

    io.print("3. The conjugate of a quaternion.\n", !IO),
    io.print("conjugate(Q) = ", !IO), io.print(to_string(conjugate(Q)), !IO),
        io.nl(!IO),
    io.nl(!IO),

    io.print("4. Addition of a real number and a quaternion.\n", !IO),
    ( Q + QR = QR + Q ->    io.print("Addition is commutative.\n", !IO)
    ;                       io.print("Addition is not commutative.\n", !IO) ),
    io.print("Q + R = ", !IO), io.print(to_string(Q + QR), !IO), io.nl(!IO),
    io.print("R + Q = ", !IO), io.print(to_string(QR + Q), !IO), io.nl(!IO),
    io.nl(!IO),

    io.print("5. Addition of two quaternions.\n", !IO),
    ( Q1 + Q2 = Q2 + Q1 ->  io.print("Addition is commutative.\n", !IO)
    ;                       io.print("Addition is not commutative.\n", !IO) ),
    io.print("Q1 + Q2 = ", !IO), io.print(to_string(Q1 + Q2), !IO), io.nl(!IO),
    io.print("Q2 + Q1 = ", !IO), io.print(to_string(Q2 + Q1), !IO), io.nl(!IO),
    io.nl(!IO),

    io.print("6. Multiplication of a real number and a quaternion.\n", !IO),
    ( Q * QR = QR * Q ->    io.print("Multiplication is commutative.\n", !IO)
    ;                       io.print("Multiplication is not commutative.\n", !IO) ),
    io.print("Q * R = ", !IO), io.print(to_string(Q * QR), !IO), io.nl(!IO),
    io.print("R * Q = ", !IO), io.print(to_string(QR * Q), !IO), io.nl(!IO),
    io.nl(!IO),

    io.print("7. Multiplication of two quaternions.\n", !IO),
    ( Q1 * Q2 = Q2 * Q1 ->  io.print("Multiplication is commutative.\n", !IO)
    ;                       io.print("Multiplication is not commutative.\n", !IO) ),
    io.print("Q1 * Q2 = ", !IO), io.print(to_string(Q1 * Q2), !IO), io.nl(!IO),
    io.print("Q2 * Q1 = ", !IO), io.print(to_string(Q2 * Q1), !IO), io.nl(!IO),
    io.nl(!IO).

to_string(q(I, J, K, W)) = string.format("q(%f, %f, %f, %f)",
                           [f(I), f(J), f(K), f(W)]).
:- end_module test_quaternion.
