*process source attributes xref or(!);
 qu: Proc Options(main);
 /**********************************************************************
 * 06.09.2013 Walter Pachl translated from REXX
 *            added tasks 9 and A
 **********************************************************************/
 dcl v(4) Char(1) Var Init('','i','j','k');
 define structure 1 quat, 2 x(4) Dec Float(15);
 Dcl q  type quat; Call quat_init(q, 1,2,3,4);
 Dcl q1 type quat; Call quat_init(q1,2,3,4,5);
 Dcl q2 type quat; Call quat_init(q2,3,4,5,6);
 Dcl q3 type quat; Call quat_init(q3,-2,3,-4,-5);
 Dcl r  Dec Float(15)Init(7);

 call showq('       ','q'                    ,q);
 call showq('       ','q1'                   ,q1);
 call showq('       ','q2'                   ,q2);
 call showq('       ','q3'                   ,q3);
 call shows('       ','r'                    ,r);
 Call shows('task 1:','norm q'               ,norm(q));
 Call showq('task 2:','quatneg q'            ,quatneg(q));
 Call showq('task 3:','conjugate q'          ,quatConj(q));
 Call showq('task 4:','addition r+q'         ,quatAddsq(r,q));
 Call showq('task 5:','addition q1+q2'       ,quatAdd(q1,q2));
 Call showq('task 6:','multiplication q*r'   ,quatMulqs(q,r));
 Call showq('task 7:','multiplication q1*q2' ,quatMul(q1,q2));
 Call showq('task 8:','multiplication q2*q1' ,quatMul(q2,q1));
 Call showq('task 9:','quatsub q1-q1'        ,quatAdd(q1,quatneg(q1)));
 Call showq('task A:','addition q1+q3'       ,quatAdd(q1,q3));
 Call showt('task B:','equal'                ,quatEqual(quatMul(q1,q2),
                                                       quatMul(q2,q1)));
 Call showt('task C:','q1=q1'                ,quatEqual(q1,q1));

 quatNeg: procedure(qp) Returns(type quat);
 Dcl (qp,qr) type quat;
 qr.x(*)=-qp.x(*);
 Return (qr);
 End;

 quatAdd: procedure(qp,qq) Returns(type quat);
 Dcl (qp,qq,qr) type quat;
 qr.x(*)=qp.x(*)+qq.x(*);
 Return (qr);
 End;

 quatAddsq: procedure(v,qp) Returns(type quat);
 Dcl v Dec Float(15);
 Dcl (qp,qr) type quat;
 qr.x(*)=qp.x(*);
 qr.x(1)=qp.x(1)+v;
 Return (qr);
 End;

 quatConj: procedure(qp) Returns(type quat);
 Dcl (qp,qr) type quat;
 qr.x(*)=-qp.x(*);
 qr.x(1)= qp.x(1);
 Return (qr);
 End;

 quatMul: procedure(qp,qq) Returns(type quat);
 Dcl (qp,qq,qr) type quat;
 qr.x(1)=
        qp.x(1)*qq.x(1)-qp.x(2)*qq.x(2)-qp.x(3)*qq.x(3)-qp.x(4)*qq.x(4);
 qr.x(2)=
        qp.x(1)*qq.x(2)+qp.x(2)*qq.x(1)+qp.x(3)*qq.x(4)-qp.x(4)*qq.x(3);
 qr.x(3)=
        qp.x(1)*qq.x(3)-qp.x(2)*qq.x(4)+qp.x(3)*qq.x(1)+qp.x(4)*qq.x(2);
 qr.x(4)=
        qp.x(1)*qq.x(4)+qp.x(2)*qq.x(3)-qp.x(3)*qq.x(2)+qp.x(4)*qq.x(1);
 Return (qr);
 End;

 quatMulqs: procedure(qp,v) Returns(type quat);
 Dcl (qp,qr) type quat;
 Dcl v Dec Float(15);
 qr.x(*)=qp.x(*)*v;
 Return (qr);
 End;

 shows: Procedure(t1,t2,v);
 Dcl (t1,t2) Char(*);
 Dcl v Dec Float(15);
 Put Edit(t1,right(t2,24),'  --> ',v)(Skip,a,a,a,f(15,13));
 End;

 showt: Procedure(t1,t2,v);
 Dcl (t1,t2) Char(*);
 Dcl v Char(*) Var);
 Put Edit(t1,right(t2,24),'  --> ',v)(Skip,a,a,a,a);
 End;

 showq: Procedure(t1,t2,qp);
 Dcl qp type quat;
 Dcl (t1,t2) Char(*);
 Dcl (s,s2,p) Char(100) Var Init('');
 Dcl i Bin Fixed(31);
 Put String(s) Edit(t1,right(t2,24),'  --> ')(a,a,a);
 Do i=1 To 4;
   Put String(p) Edit(abs(qp.x(i)))(p'ZZZ9');
   p=trim(p);
   Select;
     When(qp.x(i)<0) p='-'!!p!!v(i);
     When(p=0) p='';
     Otherwise Do
       If s2^='' Then p='+'!!p;
       If i>1 Then p=p!!v(i);
       End;
     End;
   s2=s2!!p
   End;
 If s2='' Then
   s2='0';
 Put Edit(s!!s2)(Skip,a);
 End;

 norm: Procedure(qp) Returns(Dec Float(15));
 Dcl qp type quat;
 Dcl r  Dec Float(15) Init(0);
 Dcl i  Bin Fixed(31);
 Do i=1 To 4;
   r=r+qp.x(i)**2;
   End;
 Return (sqrt(r));
 End;

 quat_init: Proc(qp,x,y,z,u);
 Dcl qp type quat;
 Dcl (x,y,z,u) Dec Float(15);
 qp.x(1)=x;
 qp.x(2)=y;
 qp.x(3)=z;
 qp.x(4)=u;
 End;

 quatEqual: procedure(qp,qq) Returns(Char(12) Var);
 Dcl (qp,qq) type quat;
 Dcl i Bin Fixed(15);
 Do i=1 To 4;
   If qp.x(i)^=qq.x(i) Then
     Return('not equal');
   End;
 Return('equal');
 End;

 End;
