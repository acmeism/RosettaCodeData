Structure Quaternion
  a.f
  b.f
  c.f
  d.f
EndStructure

Procedure.f QNorm(*x.Quaternion)
  ProcedureReturn Sqr(Pow(*x\a, 2) + Pow(*x\b, 2) + Pow(*x\c, 2) + Pow(*x\d, 2))
EndProcedure

;If supplied, the result is returned in the quaternion structure *res,
;otherwise a new quaternion is created.  A pointer to the result is returned.
Procedure QNeg(*x.Quaternion, *res.Quaternion = 0)
  If *res = 0: *res.Quaternion = AllocateMemory(SizeOf(Quaternion)): EndIf
  If *res
    *res\a = -*x\a
    *res\b = -*x\b
    *res\c = -*x\c
    *res\d = -*x\d
  EndIf
  ProcedureReturn *res
EndProcedure

Procedure QConj(*x.Quaternion, *res.Quaternion = 0)
  If *res = 0: *res.Quaternion = AllocateMemory(SizeOf(Quaternion)): EndIf
  If *res
    *res\a =  *x\a
    *res\b = -*x\b
    *res\c = -*x\c
    *res\d = -*x\d
  EndIf
  ProcedureReturn *res
EndProcedure

Procedure QAddReal(r.f, *x.Quaternion, *res.Quaternion = 0)
  If *res = 0: *res.Quaternion = AllocateMemory(SizeOf(Quaternion)): EndIf
  If *res
    *res\a = *x\a + r
    *res\b = *x\b
    *res\c = *x\c
    *res\d = *x\d
  EndIf
  ProcedureReturn *res
EndProcedure

Procedure QAddQuaternion(*x.Quaternion, *y.Quaternion, *res.Quaternion = 0)
  If *res = 0: *res.Quaternion = AllocateMemory(SizeOf(Quaternion)): EndIf
  If *res
    *res\a = *x\a + *y\a
    *res\b = *x\b + *y\b
    *res\c = *x\c + *y\c
    *res\d = *x\d + *y\d
  EndIf
  ProcedureReturn *res
EndProcedure

Procedure QMulReal_and_Quaternion(r.f, *x.Quaternion, *res.Quaternion = 0)
  If *res = 0: *res.Quaternion = AllocateMemory(SizeOf(Quaternion)): EndIf
  If *res
    *res\a = *x\a * r
    *res\b = *x\b * r
    *res\c = *x\c * r
    *res\d = *x\d * r
  EndIf
  ProcedureReturn *res
EndProcedure

Procedure QMulQuaternion(*x.Quaternion, *y.Quaternion, *res.Quaternion = 0)
  If *res = 0: *res.Quaternion = AllocateMemory(SizeOf(Quaternion)): EndIf
  If *res
     *res\a = *x\a * *y\a - *x\b * *y\b - *x\c * *y\c - *x\d * *y\d
     *res\b = *x\a * *y\b + *x\b * *y\a + *x\c * *y\d - *x\d * *y\c
     *res\c = *x\a * *y\c - *x\b * *y\d + *x\c * *y\a + *x\d * *y\b
     *res\d = *x\a * *y\d + *x\b * *y\c - *x\c * *y\b + *x\d * *y\a
  EndIf
  ProcedureReturn *res
EndProcedure

Procedure Q_areEqual(*x.Quaternion, *y.Quaternion)
  If (*x\a <> *y\a) Or (*x\b <> *y\b) Or (*x\c <> *y\c) Or (*x\d <> *y\d)
    ProcedureReturn 0 ;false
  EndIf
  ProcedureReturn 1 ;true
EndProcedure
