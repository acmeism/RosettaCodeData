class RowEchelon {
  function : Main(args : String[]) ~ Nil {
    matrix := [
      [1, 2, -1,  -4 ]
      [2, 3, -1, -11 ]
      [-2, 0, -3,  22]
    ];

    matrix := Rref(matrix);

    sizes := matrix->Size();
    for(i := 0; i < sizes[0]; i += 1;) {
      for(j := 0; j < sizes[1]; j += 1;) {
        IO.Console->Print(matrix[i,j])->Print(",");
      };
      IO.Console->PrintLine();
    };
  }

  function : native : Rref(matrix : Int[,]) ~ Int[,] {
    lead := 0;
    sizes := matrix->Size();
    rowCount := sizes[0];
    columnCount := sizes[1];

    for(r := 0; r < rowCount; r+=1;) {
      if (columnCount <= lead) {
        break;
      };

      i := r;
      while(matrix[i, lead] = 0) {
        i+=1;
        if (i = rowCount) {
          i := r;
          lead += 1;
          if (columnCount = lead) {
            lead-=1;
            break;
           };
        };
      };

      for (j := 0; j < columnCount; j+=1;) {
        temp := matrix[r, j];
        matrix[r, j] := matrix[i, j];
        matrix[i, j] := temp;
      };

      div := matrix[r, lead];
      for(j := 0; j < columnCount; j+=1;) {
        matrix[r, j] /= div;
      };

      for(j := 0; j < rowCount; j+=1;) {
        if (j <> r) {
          sub := matrix[j, lead];
          for (k := 0; k < columnCount; k+=1;) {
            matrix[j, k] -= sub * matrix[r, k];
          };
         };
      };
      lead+=1;
    };

    return matrix;
  }
}
