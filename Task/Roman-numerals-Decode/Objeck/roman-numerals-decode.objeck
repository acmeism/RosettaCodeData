class Roman {
  function : DecodeSingle(letter : Char) ~ Int {
    select(letter) {
      label 'M': { return 1000; }
      label 'D': { return 500; }
      label 'C': { return 100; }
      label 'L': { return 50; }
      label 'X': { return 10; }
      label 'V': { return 5; }
      label 'I': { return 1; }
      other: { return 0; }
    };
  }

  function : Decode(roman : String) ~ Int {
    result := 0;
    uRoman := roman->ToUpper(); # label-insensitive
    for(i := 0;i < uRoman->Size()-1; i++;) {# loop over all but the last character
      # if this character has a lower value than the next character
      if (DecodeSingle(uRoman->Get(i)) < DecodeSingle(uRoman->Get(i+1))) {
        # subtract it
        result -= DecodeSingle(uRoman->Get(i));
      } else {
        # add it
        result += DecodeSingle(uRoman->Get(i));
      }
    }
    # Decode the last character, which is always added
    result += DecodeSingle(uRoman->Get(uRoman->Size()-1));
    return result;
  }

  function : Main(args : String[]) ~ Nil {
    Decode("MCMXC")->PrintLine(); # 1990
    Decode("MMVIII")->PrintLine(); # 2008
    Decode("MDCLXVI")->PrintLine(); # 1666
  }
}
