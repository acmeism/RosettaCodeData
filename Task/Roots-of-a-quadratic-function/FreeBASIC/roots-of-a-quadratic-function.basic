' version 20-12-2020
' compile with: fbc -s console

#Include Once "gmp.bi"

Sub solvequadratic_n(a As Double ,b As Double, c As Double)

    Dim As Double f, d = b ^ 2 - 4 * a * c

    Select Case Sgn(d)
        Case 0
            Print "1: the single root is "; -b / 2 / a
        Case 1
            Print "1: the real roots are "; (-b + Sqr(d)) / 2 * a; " and ";(-b - Sqr(d)) / 2 * a
        Case -1
            Print "1: the complex roots are "; -b / 2 / a; " +/- "; Sqr(-d) / 2 / a; "*i"
    End Select

End Sub

Sub solvequadratic_c(a As Double ,b As Double, c As Double)

    Dim As Double f, d = b ^ 2 - 4 * a * c
    Select Case Sgn(d)
        Case 0
            Print "2: the single root is "; -b / 2 / a
        Case 1
            f = (1 + Sqr(1 - 4 * a *c / b ^ 2)) / 2
            Print "2: the real roots are ";  -f * b / a; " and "; -c / b / f
        Case -1
            Print "2: the complex roots are "; -b / 2 / a; " +/- "; Sqr(-d) / 2 / a; "*i"
    End Select
End Sub

Sub solvequadratic_gmp(a_ As Double ,b_ As Double, c_ As Double)

    #Define PRECISION 1024 ' about 300 digits
    #Define MAX 25

    Dim As ZString Ptr text
    text = Callocate (1000)
    Mpf_set_default_prec(PRECISION)

    Dim As Mpf_ptr a, b, c, d, t
    a = Allocate(Len(__mpf_struct)) : Mpf_init_set_d(a, a_)
    b = Allocate(Len(__mpf_struct)) : Mpf_init_set_d(b, b_)
    c = Allocate(Len(__mpf_struct)) : Mpf_init_set_d(c, c_)
    d = Allocate(Len(__mpf_struct)) : Mpf_init(d)
    t = Allocate(Len(__mpf_struct)) : Mpf_init(t)

    mpf_mul(d, b, b)
    mpf_set_ui(t, 4)
    mpf_mul(t, t, a)
    mpf_mul(t, t, c)
    mpf_sub(d, d, t)

    Select Case mpf_sgn(d)
        Case 0
            mpf_neg(t, b)
            mpf_div_ui(t, t, 2)
            mpf_div(t, t, a)
            Gmp_sprintf(text,"%.*Fe", MAX, t)
            Print "3: the single root is "; *text
        Case Is > 0
            mpf_sqrt(d, d)
            mpf_add(a, a, a)
            mpf_neg(t, b)
            mpf_add(t, t, d)
            mpf_div(t, t, a)
            Gmp_sprintf(text,"%.*Fe", MAX, t)
            Print "3: the real roots are "; *text; " and ";
            mpf_neg(t, b)
            mpf_sub(t, t, d)
            mpf_div(t, t, a)
            Gmp_sprintf(text,"%.*Fe", MAX, t)
            Print *text
        Case Is < 0
            mpf_neg(t, b)
            mpf_div_ui(t, t, 2)
            mpf_div(t, t, a)
            Gmp_sprintf(text,"%.*Fe", MAX, t)
            Print "3: the complex roots are "; *text; " +/- ";
            mpf_neg(t, d)
            mpf_sqrt(t, t)
            mpf_div_ui(t, t, 2)
            mpf_div(t, t, a)
            Gmp_sprintf(text,"%.*Fe", MAX, t)
            Print *text; "*i"
    End Select

End Sub

' ------=< MAIN >=------

Dim As Double a, b, c
Print "1: is the naieve way"
Print "2: is the cautious way"
Print "3: is the naieve way with help of GMP"
Print

For i As Integer = 1 To 10
    Read a, b, c
    Print "Find root(s) for "; Str(a); "X^2"; IIf(b < 0, "", "+");
    Print Str(b); "X"; IIf(c < 0, "", "+"); Str(c)
    solvequadratic_n(a, b , c)
    solvequadratic_c(a, b , c)
    solvequadratic_gmp(a, b , c)
    Print
Next

' empty keyboard buffer
While Inkey <> "" : Wend
Print : Print "hit any key to end program"
Sleep
End

Data 1, -1E9, 1
Data 1, 0, 1
Data 2, -1, -6
Data 1, 2, -2
Data 0.5, 1.4142135623731, 1
Data 1, 3, 2
Data 3, 4, 5
Data 1, -1e100, 1
Data 1, -1e200, 1
Data 1, -1e300, 1
