Module Roots_of_Quadratic_Function {
	declare global m math2
	function global complex(a as double, b as double=0) {
		method m, "cxNew", a, b as ret: =ret
	}
	function quadroots(a as double, b as double, c as double) {
		var d = b*b - 4*a*c,  a2 = a + a	
		if d<0 then
			var r=-b/a2
			var i=sqrt(-d)/a2
			="complex", complex(r, i), complex(r, -i), 5
		else.if d==0 then
			="single root", -b/2/a, -b/2/a, 8
		else
			var r =if(b<0 -> (-b + sqrt(d)) / a2, (-b - sqrt(d)) / a2)
			="real", r, c/(a*r), 5
		end if
	}
	flush
	data "" , "outputRoots.txt"
	while not empty
		read filename
		open filename for wide output as #f
			Disp(quadroots(3, 4, 4/3))
			Disp(quadroots(3, 2, -1))
			Disp(quadroots(3, 2, 1))
			Disp(quadroots(1, -1e9, 1))
			Disp(quadroots(1, -1e70, 1))
			Disp(quadroots(1, -1e100, 1))
			Disp(quadroots(1, -1e200, 1))
			Disp(quadroots(1, -1e300, 1))
			Disp(quadroots(1, 0, 1))
			Disp(quadroots(2, -1, -6))
			Disp(quadroots(3, 4, 5))
			Disp(quadroots(0.5, sqrt(2), 1))
			Disp(quadroots(1, 2, 2))
		close #f
		if filename<>"" then win dir$+filename
	end while
	sub disp(arg as array)
		(s, a, b, n)=arg
		Print #f, field$(s, 12);
		if type$(a)="cxComplex" then disp1(a) else disp2(a)
		if type$(b)="cxComplex" then disp1(b) else	disp2(b)
		Print #f
	end sub
	sub disp1(a)
		local aa="", bb=if$(a|i<0->"-","+")
		if a|i<>0 then			
			if abs(a|i)<>1 then bb+=""+(abs(round(a|i, n)))
			bb+="i"
		else
			bb=""
		end if
		if a|r=0 then
			if a|i=0 then aa="0"
		else
			aa=""+(round(a|r, n))
		end if
		Print #f, " (";aa;bb;")";
	end sub
	sub disp2(b)
		local boolean k=b<>0 and (abs(b)<1e-6 or abs(b)>1e6)
		local res=if$(k-> str$(b,"Scientific"), ""+(round(b, n)))
		if instr(res, "INF") then res="inf"
		Print #f, " ";res;
	end sub
}
Roots_of_Quadratic_Function
