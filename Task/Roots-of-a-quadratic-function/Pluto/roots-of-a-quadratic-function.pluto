require "complex"

local function quadratic(a, b, c)
    local d = b * b - 4 * a * c
    if d == 0 then
        -- single root
        return {{-b / (2 * a)}, nil}
    end
    if d > 0 then
        -- two real roots
        local sr = math.sqrt(d)
        d = b < 0 ? sr - b : -sr - b
        return {{d / (2 * a), 2 * c / d}, nil}
    end
    -- two complex roots
    local den = 1 / (2 * a)
    local t1 = complex.of(-b * den, 0)
    local t2 = complex.of(0, math.sqrt(-d)) * den
    return {{}, {t1 + t2, t1 - t2}}
end

local function test(a, b, c)
    io.write($"coefficients: {a}, {b}, {c} -> ")
    local roots = quadratic(a, b, c)
    local r = roots[1]
    if #r == 1 then
        print($"one real root: {r[1]}")
    elseif #r == 2 then
        print($"two real roots: {r[1]} and {r[2]}")
    else
        local i = roots[2]
        print($"two complex roots: {i[1]:tostring()} and {i[2]:tostring()}")
    end
end

local coeffs = {
    {1, -2, 1},
    {1,  0, 1},
    {1, -10, 1},
    {1, -1000, 1},
    {1, -1e9, 1}
}

for coeffs as c do test(c[1], c[2], c[3]) end
