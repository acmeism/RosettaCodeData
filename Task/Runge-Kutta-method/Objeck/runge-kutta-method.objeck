class RungeKuttaMethod {
  function : Main(args : String[]) ~ Nil {
    x0 := 0.0; x1 := 10.0; dx := .1;

    n := 1 + (x1 - x0)/dx;
    y := Float->New[n->As(Int)];

    y[0] := 1;
    for(i := 1; i < n; i++;) {
      y[i] := Rk4(Rate(Float, Float) ~ Float, dx, x0 + dx * (i - 1), y[i-1]);
    };

    for(i := 0; i < n; i += 10;) {
      x := x0 + dx * i;
      y2 := (x * x / 4 + 1)->Power(2.0);

      x_value := x->As(Int);
      y_value := y[i];
      rel_value := y_value/y2 - 1.0;
      "y({$x_value})={$y_value}; error: {$rel_value}"->PrintLine();
    };
  }

  function : native : Rk4(f : (Float, Float) ~ Float, dx : Float, x : Float, y : Float) ~ Float {
    k1 := dx * f(x, y);
    k2 := dx * f(x + dx / 2, y + k1 / 2);
    k3 := dx * f(x + dx / 2, y + k2 / 2);
    k4 := dx * f(x + dx, y + k3);

    return y + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
  }

  function : native : Rate(x : Float, y : Float) ~ Float {
    return x * y->SquareRoot();
  }
}
