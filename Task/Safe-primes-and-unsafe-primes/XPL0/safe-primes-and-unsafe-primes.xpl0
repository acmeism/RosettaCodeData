proc NumOut(Num);       \Output positive integer with commas
int  Num, Dig, Cnt;
[Cnt:= [0];
Num:= Num/10;
Dig:= rem(0);
Cnt(0):= Cnt(0)+1;
if Num then NumOut(Num);
Cnt(0):= Cnt(0)-1;
ChOut(0, Dig+^0);
if rem(Cnt(0)/3)=0 & Cnt(0) then ChOut(0, ^,);
];

func IsPrime(N);        \Return 'true' if N is prime
int  N, I;
[if N <= 2 then return N = 2;
if (N&1) = 0 then \even >2\ return false;
for I:= 3 to sqrt(N) do
    [if rem(N/I) = 0 then return false;
    I:= I+1;
    ];
return true;
];

int  N, SafeCnt, UnsafeCnt Unsafes(40);
[SafeCnt:= 0;  UnsafeCnt:= 0;
Text(0, "First 35 safe primes:^M^J");
for N:= 1 to 10_000_000-1 do
    [if IsPrime(N) then
        [if IsPrime( (N-1)/2 ) then
            [SafeCnt:= SafeCnt+1;
            if SafeCnt <= 35 then
                [NumOut(N);  ChOut(0, ^ )];
            ]
        else
            [Unsafes(UnsafeCnt):= N;
            UnsafeCnt:= UnsafeCnt+1;
            ];
        ];
    if N = 999_999 then
        [Text(0, "^M^JSafe primes below 1,000,000: ");
        NumOut(SafeCnt);
        Text(0, "^M^JUnsafe primes below 1,000,000: ");
        NumOut(UnsafeCnt);
        ];
    ];
Text(0, "^M^JFirst 40 unsafe primes:^M^J");
for N:= 0 to 40-1 do
    [NumOut(Unsafes(N));  ChOut(0, ^ )];
Text(0, "^M^JSafe primes below 10,000,000: ");
NumOut(SafeCnt);
Text(0, "^M^JUnsafe primes below 10,000,000: ");
NumOut(UnsafeCnt);
CrLf(0);
]
