void local fn LoadList
  CFArrayRef list = @[Â¬
  @{ @"name": @"Lagos",                @"population": @21.0 },
  @{ @"name": @"Cairo",                @"population": @15.2 },
  @{ @"name": @"Kinshasa-Brazzaville", @"population": @11.3 },
  @{ @"name": @"Greater Johannesburg", @"population": @7.55 },
  @{ @"name": @"Mogadishu",            @"population": @5.85 },
  @{ @"name": @"Khartoum-Omdurman",    @"population": @4.98 },
  @{ @"name": @"Dar Es Salaam",        @"population": @4.7  },
  @{ @"name": @"Alexandria",           @"population": @4.58 },
  @{ @"name": @"Abidjan",              @"population": @4.4  },
  @{ @"name": @"Casablanca",           @"population": @3.98 }]
  AppSetProperty( @"list", list )
end fn

local fn IndexOfCity( city as CFStringRef ) as int
  CFArrayRef list = fn AppProperty( @"list" )

  for int i = 0 to len(list) - 1
    CFDictionaryRef dict = list[i]
    if fn StringIsEqual( dict[@"name"], city ) then return i
  next
end fn = -1

local fn FirstCityWithLessThan( population as CFNumberRef ) as CFStringRef
  CFArrayRef list = fn AppProperty( @"list" )

  for int i = 0 to len(list) - 1
    CFDictionaryRef dict = list[i]
    if fn NumberIntValue( dict[@"population"] ) < fn NumberIntValue( population ) then return dict[@"name"]
  next
end fn = NULL

local fn PopulationByAlphabeticOrder( firstLetter as CFStringRef ) as float
  CFArrayRef list = fn AppProperty( @"list" )

  for int i = 0 to len(list) - 1
    CFDictionaryRef dict = list[i]
    CFStringRef firstListLetter = fn StringSubstringToIndex( dict[@"name"], 1 )
    if fn StringIsEqual( firstListLetter, firstLetter ) then return fn NumberFloatValue( dict[@"population"] )
  next
end fn = 0.0

fn LoadList

printf @"The index of Dar Es Salaam is: %d", fn IndexOfCity( @"Dar Es Salaam" )
printf @"The name of the first city whose population is less than 5 million: %@", fn FirstCityWithLessThan( @5 )
printf @"The population of the first city whose name starts with the letter \"A\': %.2f", fn PopulationByAlphabeticOrder( @"A" )

HandleEvents
