scope # get sequences of primes using trial division

    # returns true if n is prime, false otherwise
    local constant is_prime := proc( n :: number ) :: boolean
        local result := n = 2 or ( odd n and n > 1 );
        for k from 3 to entier sqrt( n ) by 2 while result do
            result := n mod k <> 0
        od;
        return result
    end;

    # returns the sequence of primes between p_start and p_end
    local constant prime_sequence := proc( p_start :: number, p_end :: number ) :: sequence
        local constant result := seq();
        for p from p_start to p_end do
            if is_prime( p ) then result[ size result + 1 ] := p fi;
        od;
        return result
    end;

    # test prime_sequence
    local test_sequence, p_count;
    test_sequence, p_count := prime_sequence( -9, 150 ), 0;
    for p from 1 to size test_sequence do
        printf( " %3d", test_sequence[ p ] );
        p_count +:= 1; if p_count mod 20 = 0 then print() fi
    od;
    print( " ..." );
    test_sequence, p_count := prime_sequence( 410, 550 ), 0;
    for p from 1 to size test_sequence do
        printf( " %3d", test_sequence[ p ] );
        p_count +:= 1; if p_count mod 20 = 0 then print() fi
    od

end
