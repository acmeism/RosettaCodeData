comment
  Prime number generator in S-BASIC. Only odd numbers are
  checked, and only the prime numbers previously found (up
  to the square root of the number currently under examination)
  are tested as divisors.  Memory is conserved by saving only the
  first 50 primes as potential divisors, since that is sufficient
  to test all numbers up to 32767, which is the highest integer
  value supported by S-BASIC
end

$lines

$constant false = 0
$constant true = 0FFFFH

var i, k, m, n, s, nprimes, divisible = integer
dim integer p(50)

rem compute p mod q
function mod(p, q = integer) = integer
end = p - q * (p / q)

input "How many primes do you want to generate",nprimes

rem initialize p with first prime and display it
p(1) = 2
print using "##### "; p(1);

rem now check odd numbers until nprimes are found
i = 1   rem count of primes found so far
k = 1   rem index of largest prime <= sqrt of n
n = 3   rem current number being checked
while i < nprimes do
   begin
      s = p(k) * p(k)
      if s <= n then k = k + 1
      divisible = false
      m = 1   rem index into primes previously found
      while (m <= k) and (divisible = false) do
         begin
            if mod(n, p(m)) = 0 then divisible = true
            m = m + 1
         end
      if divisible = false then
         begin
            i = i + 1
            if i <= 50 then p(i) = n
            print using "##### ";n;
            if pos(0) > 60 then print   rem wrap long lines
         end
      n = n + 2
   end
print "All done. Goodbye"
end
