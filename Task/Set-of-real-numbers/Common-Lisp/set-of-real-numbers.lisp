(deftype set== (a b) `(real ,a ,b))
(deftype set<> (a b) `(real (,a) (,b)))
(deftype set=> (a b) `(real ,a (,b)))
(deftype set<= (a b) `(real (,a) ,b))

(deftype set-union (s1 s2) `(or ,s1 ,s2))
(deftype set-intersection (s1 s2) `(and ,s1 ,s2))
(deftype set-diff (s1 s2) `(and ,s1 (not ,s2)))

(defun in-set-p (x set)
  (typep x set))

(defun test ()
  (let ((set '(set-union (set<= 0 1) (set=> 0 2))))
    (assert (in-set-p 0 set))
    (assert (in-set-p 1 set))
    (assert (not (in-set-p 2 set))))
  (let ((set '(set-intersection (set=> 0 2) (set<= 1 2))))
    (assert (not (in-set-p 0 set)))
    (assert (not (in-set-p 1 set)))
    (assert (not (in-set-p 2 set))))
  (let ((set '(set-diff (set=> 0 3) (set<> 0 1))))
    (assert (in-set-p 0 set))
    (assert (in-set-p 1 set))
    (assert (in-set-p 2 set)))
  (let ((set '(set-diff (set<= 0 3) (set== 0 1))))
    (assert (not (in-set-p 0 set)))
    (assert (not (in-set-p 1 set)))
    (assert (in-set-p 2 set))))
