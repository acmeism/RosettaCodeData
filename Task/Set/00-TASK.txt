{{data structure}}
A &nbsp; '''set''' &nbsp;is a collection of elements, without duplicates and without order.


;Task:
Show each of these set operations:

* Set creation
* Test m &isin; S -- "m is an element in set S"
* A &cup; B -- ''union''; a set of all elements either in set A or in set B.
* A &cap; B -- ''intersection''; a set of all elements in ''both'' set A and set B.
* A &#x2216; B -- ''difference''; a set of all elements in set A, except those in set B.
* A &sube; B -- ''subset''; true if every element in set A is also in set B.
* A = B -- ''equality''; true if every element of set A is in set B and vice versa.

<br>
As an option, show some other set operations.
<br>(If A &sube; B, but A &ne; B, then A is called a true or proper subset of B, written A &sub; B or A &#x228a; B.) 

As another option, show how to modify a mutable set.


One might implement a set using an [[associative array]] (with set elements as array keys and some dummy value as the values). 

One might also implement a set with a binary search tree, or with a hash table, or with an ordered array of binary bits (operated on with bit-wise binary operators). 

The basic test, m &isin; S, is [[O]](n) with a sequential list of elements, O(''log'' n) with a balanced binary search tree, or (O(1) average-case, O(n) worst case) with a hash table.


{{Template:See also lists}}
<br><br>

