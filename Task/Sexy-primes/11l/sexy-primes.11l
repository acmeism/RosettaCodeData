V LIMIT = 1'000'000
F get_primes(limit)
   V is_prime = [0B] * 2 [+] [1B] * (limit - 1)
   L(n) 0 .< Int(limit ^ 0.5 + 1.5)
      I is_prime[n]
         L(i) (n * n .< limit + 1).step(n)
            is_prime[i] = 0B
   R enumerate(is_prime).filter((i, prime) -> prime).map((i, prime) -> i)

V primes = get_primes(LIMIT)
V primeset = Set(primes)

V s = [[[Int]]()] * 4
[Int] unsexy
L(p) primes
   I p + 6 C primeset
      s[0].append([p, p + 6])
   E
      I p - 6 !C primeset
         unsexy.append(p)
      L.continue
   I p + 12 C primeset
      s[1].append([p, p + 6, p + 12])
   E
      L.continue
   I p + 18 C primeset
      s[2].append([p, p + 6, p + 12, p + 18])
   E
      L.continue
   I p + 24 C primeset
      s[3].append([p, p + 6, p + 12, p + 18, p + 24])

print(‘"SEXY" PRIME GROUPINGS:’)
L(sexy, name) zip(s, ‘pairs triplets quadruplets quintuplets’.split(‘ ’))
   print(‘  #. #. ending with ...’.format(sexy.len, name))
   L(sx) sexy[(len)-5..]
      print(‘    ’sx)

print("\nThere are #. unsexy primes ending with ...".format(unsexy.len))
L(usx) unsexy[(len)-10..]
   print(‘  ’usx)
