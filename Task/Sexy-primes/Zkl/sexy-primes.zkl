var [const] BI=Import("zklBigNum");  // libGMP
const N=1_000_035, M=N+24; // M allows prime group to span N, eg N=100, (97,103)
const OVR=6;	// 6 if prime group can NOT span N, else 0
ps,p := Data(M+50).fill(0), BI(1); // slop at the end (for reverse wrap around)
while(p.nextPrime()<=M){ ps[p]=1 } // bitmap of primes

ns:=(N-OVR).filter('wrap(n){ 2==(ps[n] + ps[n+6]) }); # know 2 isn't, check anyway
msg(N,"sexy prime pairs",ns,5,1);

ns:=[3..N-(6+OVR),2].filter('wrap(n){ 3==(ps[n] + ps[n+6] + ps[n+12]) }); # can't be even
msg(N,"sexy triplet primes",ns,5,2);

ns:=[3..N-(12+OVR),2].filter('wrap(n){ 4==(ps[n] + ps[n+6] + ps[n+12] + ps[n+18]) }); # no evens
msg(N,"sexy quadruplet primes",ns,5,3);

ns:=[3..N-(18+OVR),2].filter('wrap(n){ 5==(ps[n] + ps[n+6] + ps[n+12] + ps[n+18] + ps[n+24]) });
msg(N,"sexy quintuplet primes",ns,1,4);

ns:=(N-OVR).filter('wrap(n){ ps[n] and 0==(ps[n-6] + ps[n+6]) });  // include 2
msg(N,"unsexy primes",ns,10,0);

fcn msg(N,s,ps,n,g){
   n=n.min(ps.len());	// if the number of primes is less than n
   gs:=ps[-n,*].apply('wrap(n){ [0..g*6,6].apply('+(n)) })
       .pump(String,T("concat", ","),"(%s) ".fmt);
   println("Number of %s less than %,d is %,d".fmt(s,N,ps.len()));
   println("The last %d %s:\n  %s\n".fmt(n, (n>1 and "are" or "is"), gs));
}
