[Shoelace formula for Rosetta Code website.
EDSAC program, Initial Orders 2]
[Arrange the storage]
          T45K P150F      [H, library subroutine R4 to read signed integer]
          T46K P56F       [N, library subroutiine P7 to print positive integer]
          T47K P200F      [M, main routine]
[--------------------------------------------------------------------------
 Library subroutine M3, prints header at load time and is then overwritten.
 This header is 'AREA = ' and leaves the teleprinter in figures mode.]
      PFGKIFAFRDLFUFOFE@A6FG@E8FEZPF
      *AREA!#V!..PZ
[--------------------------------------------------------------------------
 Main routine]
          E25K TM GK
    [0]   PF PF     [sum, then shifted absolute sum]
    [2]   PF        [x{0}]
    [3]   PF        [y{0}]
    [4]   PF        [x_curr, current x-coordinate]
    [5]   PF        [x_prev, previous x-coordinate]
    [6]   PF        [y-coordinate, gets copied to multiplier register]
    [7]   PF        [positive count of vertices, then negative loop counter]
    [8]   PD        [17-bit constant 1]
    [9]   MF        [decimal point (in figures mode)]
   [10]   @F        [carriage return]
   [11]   &F        [line feed]
   [12]   K4096F    [null]

[In this program, it's assumed that input values are 17-bit signed integers,
   so that the value from library subroutine R4 is returned in 0F.
 Note that R4 changes the multiplier register.
 Enter here with acc = 0]
   [13]   A13@ GH         [0F := count of vertices, right justified]
          AF LD T7@       [store count, shifted to address field]
        [First vertex is read outside the loop]
   [18]   A18@ GH         [0F := x{0}]
          AF U2@ T5@      [store in x{0} and x_prev]
   [23]   A23@ GH         [0F := y{0}]
          AF U3@ T6@      [store in y{0} and y_mr]
          T#@             [initialize sum to 0]
          S7@             [acc := negative count of vertices]
          A2F             [allow for first vertex being outside the loop]
        [Head of loop]
   [31]   T7@             [update negative count of vertices]
   [32]   A32@ GH         [0F := x coordinate]
          AF T4@          [store in x_curr]
          H6@             [y coordinate to multiplier register]
          A#@ N4@ T#@     [sum := sum - x_curr*y_mr]
   [40]   A40@ GH         [0F := y-coordinate]
          AF T6@ H6@      [store in y_mr and multiplier register]
          A#@ V5@ T#@     [sum := sum + x_prev*y_mr]
          A4@ T5@         [x_prev := x_curr]
          A7@ A2F         [inc negative count of vertices]
          G31@            [if still < 0, loop back]
       [All vertices have been read, finish off. Here acc = 0.]
          A#@ N2@         [acc := sum - x{0}*y{n}]
          H3@ V5@         [acc := acc + x{n}*y{0}]
          E60@ TD SD      [if acc < 0 then negate it]
   [60]
       [Here acc = abs(final sum). Since coordinates are scaled by 2^-16,
        the sum is scaled by 2^-32. Shift 2 right to scale by 2^-34,
        the scaling for a 35-bit integer. Finally shift 1 more right
        to get the area, which is half an integer.]
          R1F U#@         [shift 2 right, save result (= 2*area)]
          RD TD           [0D := floor(area) for print routine]
   [64]   A64@ GN O9@     [print floor(area) and decimal point]
          H8@             [mult. reg. := 17-bit 1]
          C@ S8@          [test 2*area for even or odd]
          G73@            [if even, jump to print '0']
          O31@ E74@       [else print '5' and skip next]
   [73]   O8@             [print '0']
   [74]   O10@ O11@       [print carriage return, line feed]
          O12@            [print null to flush printer buffer]
          ZF              [halt the machine]
[================== H parameter: Library subroutine R4 ==================]
[Input of one signed integer, returned in 0D.]
[22 locations.]
          E25K TH GK
    GKA3FT21@T4DH6@E11@P5DJFT6FVDL4FA4DTDI4FA4FS5@G7@S5@G20@SDTDT6FEF
[================== N parameter: Library subroutine P7 ==================]
[Prints long strictly positive integer;]
[10 characters, right justified, padded left with spaces.]
[Even address; 35 storage locations; working position 4D.]
          E25K TN GK
    GKA3FT26@H28#@NDYFLDT4DS27@TFH8@S8@T1FV4DAFG31@SFLDUFOFFFSFL4F
    T4DA1FA27@G11@XFT28#ZPFT27ZP1024FP610D@524D!FO30@SFL8FE22@
[======================= M parameter again =============================]
          E25K TM GK
          E13Z            [define entry address]
          PF              [acc = 0 on entry]
[-----------------------------------------------------------------------
 Signed integers to be read by subroutine R4 (sign comes _after_ value).
 Values are: count, x{0}, y{0}, x{1}, y{1}, ...
 The data could be on a separate tape, so that the program could be used to
   find the area of many polygons. Cf. Wilkes, Wheeler & Gill, 1951, p. 47.]
5+3+4+5+11+12+8+9+5+5+6+ [area = 30.0]
[5+60003-60004-60005-60011-60012-60008-60009-60005-60005-60006-] [30.0]
[5+15000+20000+25000+55000+60000+40000+45000+25000+25000+30000+] [750000000.0]
[3+10+20+11+20+10+21+] [.5]
