# find elements of the Smarandache prime-digital sequence
# - primes whose digits are all primes
# Uses the observations that the final digit of 2 or more digit Smarandache
# primes must be 3 or 7 and the only prime_digits are 2, 3, 5 and 7
scope
    # construct a sieve of primes up to 10 000 000
    local constant prime_max := 10_000_000;
    local prime; create register prime( prime_max );
    for i to prime_max do prime[ i ] := i mod 2 = 1 od;
    prime[ 1 ], prime[ 2 ] := false, true;
    for s from 3 to entier sqrt( prime_max ) by 2 do
        if prime[ s ] then
            for p from s * s to prime_max by s do prime[ p ] := false od
        fi
    od;
    # consruct the Smarandache primes up to 10 000 000
    local smarandache; create register smarandache( prime_max );
    for i to size prime do smarandache[ i ] := false od;
    local constant prime_digits := reg( 2, 3, 5, 7 );
    local digits                := reg( 0, 0, 0, 0, 0, 0, 0 );

    # tests whether the current digits form a Smarandache prime
    local constant try_smarandache := proc() is
        local possible_prime := 0;
        for i to size digits do
            possible_prime *:= 10;
            possible_prime +:= digits[ i ]
        od;
        smarandache[ possible_prime ] := prime[ possible_prime ]
    end;
    # tests whether the current digits plus 3 or 7 form a Smarandache prime
    local constant try_smarandache_3_or_7 := proc() is
        digits[ size digits ] := 3;
        try_smarandache();
        digits[ size digits ] := 7;
        try_smarandache();
    end;
    # the 1 digit primes are all Smarandache primes
    for d7 to size prime_digits do smarandache[ prime_digits[ d7 ] ] := true od;
    # try the possible 2, 3, etc. digit numbers composed of prime_digits
    for d6 to size prime_digits do
        digits[ 6 ] := prime_digits[ d6 ];
        try_smarandache_3_or_7();
        for d5 to size prime_digits do
            digits[ 5 ] := prime_digits[ d5 ];
            try_smarandache_3_or_7();
            for d4 to size prime_digits do
                digits[ 4 ] := prime_digits[ d4 ];
                try_smarandache_3_or_7();
                for d3 to size prime_digits do
                    digits[ 3 ] := prime_digits[ d3 ];
                    try_smarandache_3_or_7();
                    for d2 to size prime_digits do
                        digits[ 2 ] := prime_digits[ d2 ];
                        try_smarandache_3_or_7();
                        for d1 to size prime_digits do
                            digits[ 1 ] := prime_digits[ d1 ];
                            try_smarandache_3_or_7();
                        od;
                        digits[ 1 ] := 0
                    od;
                    digits[ 2 ] := 0
                od;
                digits[ 3 ] := 0
            od;
            digits[ 4 ] := 0
        od;
        digits[ 5 ] := 0
    od;
    # print some Smarandache primes
    local count, s100, s1000, s_last, p_last := 0, 0, 0, 0, 0;
    io.write( "First 25 Smarandache primes:\n" );
    for i to size smarandache do
        if smarandache[ i ] then
            count +:= 1;
            s_last, p_last := i, count;
            if count <= 25 then
                printf( " %d", i )
            elif count = 100 then
                s100  := i
            elif count = 1000 then
                s1000 := i
            fi
        fi
    od;
    printf( "\n  100th Smarandache prime: %d", s100 );
    printf( "\n 1000th Smarandache prime: %d", s1000 );
    printf( "\nLargest Smarandache prime under %d: %d", prime_max, s_last )
    printf( " (Smarandache prime %d)\n" , p_last )
end
