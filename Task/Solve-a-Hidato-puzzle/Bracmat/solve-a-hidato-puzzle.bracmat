(
  ( hidato
  =     Line solve lowest Ncells row column rpad
      , Board colWidth maxDigits start curCol curRow
      , range head line cellN solution output tail
    .   out$!arg
      & @(!arg:? ((%@:>" ") ?:?arg))
      & 0:?row:?column
      & :?Board
      & ( Line
        =   token
          .   whl
            ' ( @(!arg:?token [3 ?arg)
              & (   (   @(!token:? "_" ?)
                      & :?token
                    | @(!token:? #?token (|" " ?))
                    )
                  & (!token.!row.!column) !Board:?Board
                |
                )
              & 1+!column:?column
              )
        )
      &   whl
        ' ( @(!arg:?line \n ?arg)
          & Line$!line
          & 1+!row:?row
          & 0:?column
          )
      & Line$!arg
      & ( range
        =   hi lo
          .   (!arg+1:?hi)+-2:?lo
            & '($lo|$arg|$hi)
        )
      & ( solve
        =     ToDo cellN row column head tail remainder
            , candCell Solved rowCand colCand pattern recurse
          .   !arg:(?ToDo.?cellN.?row.?column)
            & range$!row:(=?row)
            & range$!column:(=?column)
            &
                ' (     ?head ($cellN.?rowCand.?colCand) ?tail
                      & (!rowCand.!colCand):($row.$column)
                      & !recurse
                    |   ?head
                        (.($row.$column):(?rowCand.?colCand))
                        (?tail&!recurse)
                  .     ((!rowCand.!colCand).$cellN)
                      : ?candCell
                    &   (   !head !tail:
                          & out$found!
                          & !candCell
                        |       solve
                              $ ( !head !tail
                                . $cellN+1
                                . !rowCand
                                . !colCand
                                )
                            : ?remainder
                          & !candCell+!remainder
                        )
                      : ?Solved
                  )
              : (=?pattern.?recurse)
            & !ToDo:!pattern
            & !Solved
        )
      & infinity:?lowest
      & (   !Board
          : ? (<!lowest:#%?lowest.?start) (?&~)
        | solve$(!Board.!lowest.!start):?solution
        )
      & :?output
      & 0:?curCol
      & !solution:((?curRow.?).?)+?+[?Ncells
      & @(!Ncells:? [?maxDigits)
      & 1+!maxDigits:?colWidth
      & ( rpad
        =   len
          .   !arg:(?arg.?len)
            & @(str$(!arg "    "):?arg [!len ?)
            & !arg
        )
      &   whl
        ' ( !solution:((?row.?column).?cellN)+?solution
          & (   !row:>!curRow:?curRow
              & !output \n:?output
              & 0:?curCol
            |
            )
          &   whl
            ' ( !curCol+1:~>!column:?curCol
              & !output rpad$(.!colWidth):?output
              )
          &   !output rev$(rpad$(rev$(str$(!cellN " ")).!colWidth))
            : ?output
          & !curCol+1:?curCol
          )
      & str$!output
  )
&   "
 __ 33 35 __ __
 __ __ 24 22 __
 __ __ __ 21 __ __
 __ 26 __ 13 40 11
 27 __ __ __  9 __  1
       __ __ 18 __ __
             __  7 __ __
                    5 __"
  : ?board
& out$(hidato$!board)
);
