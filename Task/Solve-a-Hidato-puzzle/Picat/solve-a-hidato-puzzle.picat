import sat.

main =>
    M  = {{ _,33,35, _, _, 0, 0, 0},
          { _, _,24,22, _, 0, 0, 0},
          { _, _, _,21, _, _, 0, 0},
          { _,26, _,13,40,11, 0, 0},
          {27, _, _, _, 9, _, 1, 0},
          { 0, 0, _, _,18, _, _, 0},
          { 0, 0, 0, 0, _, 7, _, _},
          { 0, 0, 0, 0, 0, 0, 5, _}},
    MaxR = len(M),
    MaxC = len(M[1]),
    NZeros = len([1 : R in 1..MaxR, C in 1..MaxC, M[R,C] == 0]),
    M :: 0..MaxR*MaxC-NZeros,
    Vs = [{(R,C),1} : R in 1..MaxR, C in 1..MaxC, M[R,C] !== 0],
    find_start(M,MaxR,MaxC,StartR,StartC),
    Es = [{(R,C),(R1,C1),_} : R in 1..MaxR, C in 1..MaxC, M[R,C] !== 0,
                              neibs(M,MaxR,MaxC,R,C,Neibs),
                              (R1,C1) in [(StartR,StartC)|Neibs], M[R1,C1] !== 0],
    hcp(Vs,Es),
    foreach ({(R,C),(R1,C1),B} in Es)
        B #/\ M[R1,C1] #!= 1 #=> M[R1,C1] #= M[R,C]+1
    end,
    solve(M),
    foreach (R in 1..MaxR)
        foreach (C in 1..MaxC)
            if M[R,C] == 0 then
                printf("%4c", '.')
            else
                printf("%4d", M[R,C])
            end
        end,
        nl
    end.

find_start(M,MaxR,MaxC,StartR,StartC) =>
    between(1,MaxR,StartR),
    between(1,MaxC,StartC),
    M[StartR,StartC] == 1,!.

neibs(M,MaxR,MaxC,R,C,Neibs) =>
    Neibs = [(R1,C1) : Dr in -1..1, Dc in -1..1, R1 = R+Dr, C1 = C+Dc,
                       R1 >= 1, R1 =< MaxR, C1 >= 1, C1 =< MaxC,
                       (R1,C1) != (R,C), M[R1,C1] !== 0].
