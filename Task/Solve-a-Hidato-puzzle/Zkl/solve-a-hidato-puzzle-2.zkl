fcn print_board(board){
   d:=D(-1,"  ", 0,"__");
   foreach r in (board[1,-1]){
      r[1,-1].pump(String,'wrap(c){ "%2s ".fmt(d.find(c,c)) }).println();
   }
}
fcn setup(s){
   lines:=s.split("\n");
   ncols,nrows:=lines[0].split().len(),lines.len();
   board:=(nrows+2).pump(List(), (ncols+2).pump(List(),-1).copy);
   given,start:=List(),Void;
   foreach r,row in (lines.enumerate()){
      foreach c,cell in (row.split().enumerate()){
         if(cell=="X") continue;   // X == not in play, leave at -1
	 val:=cell.toInt();
	 board[r+1][c+1]=val;
	 given.append(val);
	 if(val==1) start=T(r+1,c+1);
      }
   }
   return(board,given.filter().sort(),start);
}
fcn solve(board,given, r,c,n, next=0){
   if(n>given[-1])                       return(True);
   if(board[r][c] and board[r][c]!=n)    return(False);
   if(board[r][c]==0 and given[next]==n) return(False);

   back:=0;
   if(board[r][c]==n){ next+=1; back=n; }

   board[r][c]=n;
   foreach i,j in ([-1..1],[-1..1]){
      if(solve(board,given, r+i,c+j,n+1, next)) return(True);
   }
   board[r][c]=back;
   False
}
