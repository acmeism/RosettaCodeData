GT=lambda (a$, b$)->{
      def i
      do {
            m$=piece$(a$,".")(i)
            n$=piece$(b$,".")(i)
            i++
      } until n$="" or m$="" or m$<>n$
      if n$="" then =m$<>"":exit
      if m$="" then =False:exit
      =val(m$)>val(n$)
}
Stack new {
      \\ data push to end of stack (we use it as FIFO)
      data "1.3.6.1.4.1.11.2.17.19.3.4.0.10"
      data "1.3.6.1.4.1.11.2.17.5.2.0.79"
      data "1.3.6.1.4.1.11.2.17.19.3.4.0.4"
      data "1.3.6.1.4.1.11150.3.4.0.1"
      data "1.3.6.1.4.1.11.2.17.19.3.4.0.1"
      data "1.3.6.1.4.1.11150.3.4.0"
      M=Stack.Size-1
      While M>0 {
                  N=1
                  For i=1 to M {
                        \\ if peek item i > peek item i+1 then get i+1 to top, and send to i
                        \\ stack is a linked list, so moving items done with pointers only
                        if Gt(stackitem$(i), stackitem$(i+1)) then Shift i+1 : ShiftBack i : N=i
                  }
                  M=N-1
      }
      While not empty {
            Print Letter$
      }
}
