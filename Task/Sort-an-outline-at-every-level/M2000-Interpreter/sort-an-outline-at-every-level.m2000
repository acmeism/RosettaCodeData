MODULE Sort_an_outline_at_every_level {
	CLASS PACK {
		PAD$
		HEAD=QUEUE
	CLASS:
		MODULE PACK (.PAD$) {
		}
	}
	FUNCTION CREATETREE(A$){
		CONST I$=CHR$(9)+CHR$(32)
		L=1
		PR=PACK()
		A=QUEUE
		F=QUEUE
		LN=0
		DIM LINE$()
		LINE$()=PIECE$(A$, CHR$(13)+CHR$(10))
		MAX=LEN(LINE$())
		INTEGER NORM[0]=1
		FOR I=0 TO MAX-2
			FOR M=1 TO LEN(LINE$(I))
				IF INSTR(I$, MID$(LINE$(I),M, 1))=0 THEN EXIT FOR
			NEXT
			IF L=M THEN
				IF NOT EMPTY THEN READ PREV$, PR: APPEND A, PREV$:=PR
				PUSH PACK(LEFT$(LINE$(I), M-1)), MID$(LINE$(I), M)
			ELSE.IF L<M THEN
				LN++
				NORM[LN]=M
				F=QUEUE
				READ PREV$, PR
				PR.HEAD=F
				PUSH A
				APPEND A, PREV$:=PR
				A=F
				PUSH PACK(LEFT$(LINE$(I), M-1)), MID$(LINE$(I), M)
			ELSE
				LN--
				IF NOT NORM[LN]=M THEN ERROR "BAD INDENTATION"
				IF NOT EMPTY THEN READ PREV$, PR: APPEND A, PREV$:=PR
				READ A
				PUSH PACK(LEFT$(LINE$(I), M-1)), MID$(LINE$(I), M)	
			END IF
			L=M
		NEXT
		IF NOT EMPTY THEN READ PREV$, PR: APPEND A, PREV$:=PR
		READ A
		=A
	}
	A$={zeta
	    beta
	    gamma
	        lambda
	        kappa
	        mu
	    delta
	alpha
	    theta
	    iota
	    epsilon
	}
	DOIT()
	A$={zeta
		gamma
			mu
			lambda
			kappa
		delta
		beta
	alpha
		theta
		iota
		epsilon
	}
	DOIT()
	A$={alpha
	    epsilon
		iota
	    theta
	zeta
	    beta
	    delta
	    gamma
	    	kappa
	        lambda
	        mu
	}
	DOIT()
	A$={zeta
	    beta
	   gamma
	        lambda
	         kappa
	        mu
	    delta
	alpha
	    theta
	    iota
	    epsilon
	}
	DOIT()
	SUB DOIT()
		TRY OK {
			PUSH CREATETREE(A$)
			READ A
			TEST()
		}
		IF NOT OK OR ERROR THEN PRINT ERROR$	
	END SUB
	SUB TEST()
		PRINT "INPUT ORDER"
		JOB=LAMBDA ->{
		}
		TRAVERSAL(A)
		PRINT "ASCENDING ORDER"
		JOB=LAMBDA (Z)->{SORT ASCENDING Z}
		TRAVERSAL(A)
		PRINT "DESCENDING ORDER"
		JOB=LAMBDA (Z)->{SORT DESCENDING Z}
		TRAVERSAL(A)
		PRINT "PRESS ANY KEY"
		PUSH KEY$
		DROP
	END SUB
	SUB TRAVERSAL(A)
		CALL JOB(A)
		LOCAL W=EACH(A)
		LOCAL M=PACK()
		WHILE W
			M=EVAL(W)
			// USING -2 TO PROCESS TABS.
			PRINT #-2, M.PAD$+EVAL$(W!)
			TRAVERSAL(M.HEAD)
		END WHILE
	END SUB
}
Sort_an_outline_at_every_level
