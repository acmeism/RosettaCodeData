defmodule Sort_disjoint do
  def sublist(values, indices) when is_list(values) and is_list(indices) do
    indices2 = Enum.sort(indices)
    selected = select(Enum.with_index(values), indices2, [])
    replace(Enum.with_index(values), Enum.zip(indices2, selected), [])
  end

  defp select(_, [], selected), do: Enum.sort(selected)
  defp select([{val,i}|t], [idx|rest], selected) when i==idx, do: select(t, rest, [val|selected])
  defp select([_|t], indices, selected), do: select(t, indices, selected)

  defp replace([], [], list), do: Enum.reverse(list)
  defp replace([{val,_}|t], [], list), do: replace(t, [], [val|list])
  defp replace([{_,idx}|t], [{i,v}|rest], list) when idx==i, do: replace(t, rest, [v|list])
  defp replace([{val,_}|t], indices, list), do: replace(t, indices, [val|list])
end

values = [7, 6, 5, 4, 3, 2, 1, 0]
indices = [6, 1, 7]
IO.inspect Sort_disjoint.sublist(values, indices)
