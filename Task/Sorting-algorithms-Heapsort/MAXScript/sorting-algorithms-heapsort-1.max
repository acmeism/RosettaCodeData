fn heapify arr count =
(
	local s = count /2
	while s > 0 do
	(
		arr = siftDown arr s count
		s -= 1
	)
	return arr
)
fn siftDown arr s end =
(
	local root = s
	while root * 2 <= end do
	(
		local child = root * 2
		if child < end and arr[child] < arr[child+1] do
		(
			child += 1
		)
		if arr[root] < arr[child] then
		(
			swap arr[root] arr[child]
			root = child
		)
		else return arr
	)
	return arr
)
fn heapSort arr =
(
	local count = arr.count
	arr = heapify arr count
	local end = count
	while end >= 1 do
	(
		swap arr[1] arr[end]
		
		end -= 1
		arr = siftDown arr 1 end
	)
	
)
