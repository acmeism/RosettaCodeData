{def alt
 {lambda {:list}
  {if {A.empty? :list}
   then {A.new}
   else {A.addfirst! {A.first :list}
                     {alt {A.rest {A.rest :list}}}} }}}
-> alt

{def merge
 {lambda {:l1 :l2}
  {if {A.empty? :l2}
   then :l1
   else {if {< {A.first :l1} {A.first :l2}}
   then {A.addfirst! {A.first :l1} {merge :l2 {A.rest :l1}}}
   else {A.addfirst! {A.first :l2} {merge :l1 {A.rest :l2}}} }}}}
-> merge

{def mergesort
 {lambda {:list}
  {if {A.empty? {A.rest :list}}
   then :list
   else {merge {mergesort {alt :list}}
               {mergesort {alt {A.rest :list}}}} }}}
-> mergesort

{mergesort {A.new 8 1 5 3 9 0 2 7 6 4}}
-> [0,1,2,3,4,5,6,7,8,9]
