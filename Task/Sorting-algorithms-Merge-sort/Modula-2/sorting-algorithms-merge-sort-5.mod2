IMPLEMENTATION MODULE MergSort;

PROCEDURE DoMergeSort( VAR start : ADDRESS;
                       Compare : MSCompare;
                       GetNext : MSGetNext;
                       SetNext : MSSetNext);
VAR
  p1, p2, q : ADDRESS;
BEGIN
  (* If list has < 2 items, do nothing *)
  IF (start = NIL) THEN RETURN; END;
  p1 := GetNext( start); IF (p1 = NIL) THEN RETURN; END;

  (* If list has only 2 items, we'll not use recursion *)
  p2 := GetNext( p1);
  IF (p2 = NIL) THEN
    IF (Compare( start, p1) > 0) THEN
      q := start; SetNext( p1, q); SetNext( q, NIL);
      start := p1;
    END;
    RETURN;
  END;

  (* List has > 2 items: split list in half *)
  p1 := start;
  REPEAT
    p1 := GetNext( p1);
    p2 := GetNext( p2);
    IF (p2 <> NIL) THEN p2 := GetNext( p2); END;
  UNTIL (p2 = NIL);
  (* Now p1 points to last item in first half of list *)
  p2 := GetNext( p1); SetNext( p1, NIL);
  p1 := start;

  (* Recursive calls to sort each half; p1 and p2 will be updated *)
  DoMergeSort( p1, Compare, GetNext, SetNext);
  DoMergeSort( p2, Compare, GetNext, SetNext);

  (* Merge the sorted halves *)
  IF Compare( p1, p2) < 0 THEN
    start := p1; p1 := GetNext( p1);
  ELSE
    start := p2; p2 := GetNext( p2);
  END;
  q := start;
  WHILE (p1 <> NIL) AND (p2 <> NIL) DO
    IF Compare( p1, p2) < 0 THEN
      SetNext( q, p1); q := p1; p1 := GetNext( p1);
    ELSE
      SetNext( q, p2); q := p2; p2 := GetNext( p2);
    END;
  END;
  IF (p1 = NIL) THEN SetNext( q, p2) ELSE SetNext( q, p1) END;
END DoMergeSort;
END MergSort.
