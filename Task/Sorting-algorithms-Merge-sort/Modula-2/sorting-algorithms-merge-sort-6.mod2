MODULE MergDemo;

IMPORT IO, Lib, MergSort;

TYPE PTestRec = POINTER TO TestRec;
TYPE TestRec = RECORD
  Value : INTEGER;
  Next : PTestRec;
END;

PROCEDURE Compare( a1, a2 : ADDRESS) : INTEGER;
VAR
  p1, p2 : PTestRec;
BEGIN
  p1 := a1; p2 := a2;
  IF (p1^.Value < p2^.Value) THEN RETURN -1
  ELSIF (p1^.Value > p2^.Value) THEN RETURN 1
  ELSE RETURN 0; END;
END Compare;

PROCEDURE GetNext( a : ADDRESS) : ADDRESS;
VAR
  p : PTestRec;
BEGIN
  p := a; RETURN p^.Next;
END GetNext;

PROCEDURE SetNext( a, n : ADDRESS);
VAR
  p : PTestRec;
BEGIN
  p := a; p^.Next := n;
END SetNext;

(* Display the values in the linked list *)
PROCEDURE Display( p : PTestRec);
VAR
  nrInLine : CARDINAL;
BEGIN
  nrInLine := 0;
  WHILE (p <> NIL) DO
    IO.WrCard( p^.Value, 5);
    p := p^.Next;
    INC( nrInLine);
    IF (nrInLine = 10) THEN IO.WrLn; nrInLine := 0; END;
  END;
  IF (nrInLine > 0) THEN IO.WrLn; END;
END Display;

(* Main routine *)
CONST ArraySize = 50;
VAR
  arr : ARRAY [0..ArraySize - 1] OF TestRec;
  j : CARDINAL;
  start, p : PTestRec;
BEGIN
  (* Fill values with random integers *)
  FOR j := 0 TO ArraySize - 1 DO
    arr[j].Value := Lib.RANDOM( 1000);
  END;
  (* Set up the links *)
  IF (ArraySize > 1) THEN (* FOR loop 0 TO -1 crashes program *)
    FOR j := 0 TO ArraySize - 2 DO
      arr[j].Next := ADR( arr[j + 1]);
    END;
  END;
  arr[ArraySize - 1].Next := NIL;
  (* Demonstrate merge sort on the linked list *)
  start := ADR( arr[0]);
  IO.WrStr( 'Before:'); IO.WrLn;
  Display( start);
  MergSort.DoMergeSort( start, Compare, GetNext, SetNext);
  IO.WrStr( 'After:'); IO.WrLn;
  Display( start);
END MergDemo.
