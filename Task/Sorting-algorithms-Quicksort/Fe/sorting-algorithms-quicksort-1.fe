; utility for list joining
(= join (fn (a b)
  (if (is a nil) b (is b nil) a (do
    (let res a)
    (while (cdr a) (= a (cdr a)))
    (setcdr a b)
    res))))

(= quicksort (fn (lst)
  (if (not (cdr lst)) lst (do
    (let pivot (car lst))
    (let less nil)
    (let equal nil)
    (let greater nil)
    ; filter list for less than pivot, equal to pivot and greater than pivot
    (while lst
      (let x (car lst))
      (if (< x pivot) (= less (cons x less))
          (< pivot x) (= greater (cons x greater))
          (= equal (cons x equal)))
      (= lst (cdr lst)))
    ; sort 'less' and 'greater' partitions ('equal' partition is always sorted)
    (= less (quicksort less))
    (= greater (quicksort greater))
    ; join partitions to one
    (join less (join equal greater))))))

(print '(4 65 0 2 -31 99 2 0 83 782 1))
(print (quicksort '(4 65 0 2 -31 99 2 0 83 782 1)))
