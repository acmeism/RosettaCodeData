%%%-------------------------------------------------------------------

:- module quicksort_task_for_lists.

:- interface.
:- import_module io.
:- pred main(io, io).
:- mode main(di, uo) is det.

:- implementation.
:- import_module int.
:- import_module list.

%%%-------------------------------------------------------------------
%%%
%%% Partitioning a list into three:
%%%
%%%    Left         elements less than the pivot
%%%    Middle       elements equal to the pivot
%%%    Right        elements greater than the pivot
%%%
%%% The implementation is tail-recursive.
%%%

:- pred partition(comparison_func(T), T, list(T),
                  list(T), list(T), list(T)).
:- mode partition(in, in, in, out, out, out) is det.
partition(Compare, Pivot, Lst, Left, Middle, Right) :-
  partition(Compare, Pivot, Lst, [], Left, [], Middle, [], Right).

:- pred partition(comparison_func(T), T, list(T),
                  list(T), list(T),
                  list(T), list(T),
                  list(T), list(T)).
:- mode partition(in, in, in,
                  in, out,
                  in, out,
                  in, out) is det.
partition(_, _, [], Left0, Left, Middle0, Middle, Right0, Right) :-
  Left = Left0,
  Middle = Middle0,
  Right = Right0.
partition(Compare, Pivot, [Head | Tail], Left0, Left,
          Middle0, Middle, Right0, Right) :-
  Compare(Head, Pivot) = Cmp,
  (if (Cmp = (<))
   then partition(Compare, Pivot, Tail,
                  [Head | Left0], Left,
                  Middle0, Middle,
                  Right0, Right)
   else if (Cmp = (=))
   then partition(Compare, Pivot, Tail,
                  Left0, Left,
                  [Head | Middle0], Middle,
                  Right0, Right)
   else partition(Compare, Pivot, Tail,
                  Left0, Left,
                  Middle0, Middle,
                  [Head | Right0], Right)).

%%%-------------------------------------------------------------------
%%%
%%% Quicksort using the first element as pivot.
%%%
%%% This is not the world's best choice of pivot, but it is the
%%% easiest one to get from a linked list.
%%%
%%% This implementation is *not* tail-recursive--as most quicksort
%%% implementations also are not. (However, do an online search on
%%% "quicksort fortran 77" and you will find some "tail-recursive"
%%% implementations, with the tail recursions expressed as gotos.)
%%%

:- func quicksort(comparison_func(T), list(T)) = list(T).
quicksort(_, []) = [].
quicksort(Compare, [Pivot | Tail]) = Sorted_Lst :-
  partition(Compare, Pivot, Tail, Left, Middle, Right),
  quicksort(Compare, Left) = Sorted_Left,
  quicksort(Compare, Right) = Sorted_Right,
  Sorted_Left ++ [Pivot | Middle] ++ Sorted_Right = Sorted_Lst.

%%%-------------------------------------------------------------------

:- func example_numbers = list(int).
example_numbers = [1, 3, 9, 5, 8, 6, 5, 1, 7, 9, 8, 6, 4, 2].

:- func int_compare(int, int) = comparison_result.
int_compare(I, J) = Cmp :-
  if (I < J) then (Cmp = (<))
  else if (I = J) then (Cmp = (=))
  else (Cmp = (>)).

main(!IO) :-
  quicksort(int_compare, example_numbers) = Sorted_Numbers,
  print("unsorted: ", !IO),
  print_line(example_numbers, !IO),
  print("sorted:   ", !IO),
  print_line(Sorted_Numbers, !IO).

%%%-------------------------------------------------------------------
%%% local variables:
%%% mode: mercury
%%% prolog-indent-width: 2
%%% end:
