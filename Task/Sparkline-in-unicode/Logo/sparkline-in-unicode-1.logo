to create.list :string
  output parse map [ifelse equalp ? ", ["\ ] [?]] :string
end

to max :a :b
  output ifelse lessequalp :a :b [:b] [:a]
end

to min :a :b
  output ifelse greaterequalp :a :b [:b] [:a]
end

to sparklines :lists :bars :out
  openwrite :out
  setwrite :out
  foreach :lists [sparkline create.list ? :bars]
  close :out
  setwrite []
end

to sparkline :list :bars
  local [min max range nchar]
  make "max reduce "max :list
  make "min reduce "min :list
  make "range difference :max :min
  make "nchar count :bars
  (type :list "\ ->\ )
  make "list map [1 + ifelse lessequalp difference :nchar 1
    int (product (quotient difference ? :min :range) :nchar)
	[difference :nchar 1]
	[int (product (quotient difference ? :min :range) :nchar)]] :list
  foreach :list [type item ? :bars]
  print "
end

make  "str1 "1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 7\ 6\ 5\ 4\ 3\ 2\ 1
make "str2 "1.5,\ 0.5\ 3.5,\ 2.5\ 5.5,\ 4.5\ 7.5,\ 6.5
make "str3 "0,\ 1,\ 19,\ 20
make "str4 "0,\ 999,\ 4000,\ 4999,\ 7000,\ 7999
make "lists (list :str1 :str2 :str3 :str4)

make "bars [▁ ▂ ▃ ▄ ▅ ▆ ▇ █]
