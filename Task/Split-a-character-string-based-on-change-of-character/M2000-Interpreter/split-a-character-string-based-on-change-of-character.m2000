Module PrintParts(splitthis$) {
      Def string m$, p$
      Def long c
      Stack New {
            if len(splitthis$)=0 then exit
            For i=1 to len(splitthis$)
                  p$=mid$(splitthis$,i,1)
                  if m$<>p$ then {
                        if c>0 then data string$(m$, c)
                        m$=p$
                        c=1
                  } else c++
            Next i
            if c>0 then data string$(m$, c)
            While stack.size>1 {
                  Print letter$+", ";
            }
            If not empty then Print letter$
      }
}
PrintParts "gHHH5YY++///\"
' version 13 of M2000 Interpreter - old program run as is.
' [] get the current stack as object and leave an empty stack as current stack,
' array([]) empty the stack object (a linked linst) making a tuple (of variant type).
' #str$(", ") extract from array all items render as string and place between the ", " string - or a space by default, without argument.

MODULE PrintParts(splitthis AS STRING) {
	IF LEN(splitthis)=0 THEN PRINT : EXIT	
	STRING m, p
	LONG c, i
	STACK NEW {
		FOR i=1 TO LEN(splitthis)
			p=mid$(splitthis,i,1)
			IF m<>p THEN
				IF c>0 THEN DATA STRING$(m, c)
				m=p : c=1
			ELSE
				c++
			END IF
		NEXT
		IF c>0 THEN DATA STRING$(m, c)
		PRINT ARRAY([])#STR$(", ")
	}
}
PrintParts "gHHH5YY++///\"
