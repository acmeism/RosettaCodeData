func SqFree(N);                 \Return 'true' if N is square-free
real N, D2;
int  D;
[for D:= 2 to 1000 do           \sqrt one million
    [D2:= float(D*D);
    if fix(Mod(N, D2)) = 0 then return false;
    if D > 2 then D:= D+1;      \(doubles speed to 19.5 sec)
    ];
return true;
];

int  Num, Count, Limit;
real T;
[Format(3, 0);
Count:= 0;
for Num:= 1 to 145 do
    [if SqFree(float(Num)) then
        [Count:= Count+1;
        RlOut(0, float(Num));
        if rem(Count/20) then ChOut(0, ^ ) else CrLf(0);
        ];
    ];
CrLf(0);  CrLf(0);

Count:= 0;
for Num:= 0 to 145 do
    [T:= float(Num) + 1e12;
    if SqFree(T) then
        [RlOut(0, T);
        Count:= Count+1;
        if rem(Count/5) then ChOut(0, ^ ) else CrLf(0);
        ];
    ];
CrLf(0);  CrLf(0);

Limit:= 100;
loop    [Count:= 0;
        for Num:= 1 to Limit do
            [T:= float(Num);
            if SqFree(T) then Count:= Count+1;
            ];
        Text(0, "Square-free integers up to ");  IntOut(0, Limit);
        Text(0, ": ");  IntOut(0, Count);  CrLf(0);
        if Limit = 1_000_000 then quit;
        Limit:= Limit * 10;
        ];
]
