F primes_upto(limit)
   V is_prime = [0B] * 2 [+] [1B] * (limit - 1)
   L(n) 0 .< Int(limit ^ 0.5 + 1.5)
      I is_prime[n]
         L(i) (n * n .< limit + 1).step(n)
            is_prime[i] = 0B
   R enumerate(is_prime).filter((i, prime) -> prime).map((i, prime) -> i)

V p = primes_upto(10'000'000)
[Int] s, w, b
L(i) 1 .< p.len - 1
   I p[i] > (p[i - 1] + p[i + 1]) * 0.5
      s [+]= p[i]
   E I p[i] < (p[i - 1] + p[i + 1]) * 0.5
      w [+]= p[i]
   E
      b [+]= p[i]

print(‘The first   36   strong primes: ’s[0.<36])
print(‘The   count   of the strong primes below   1,000,000: ’sum(s.filter(p -> p < 1'000'000).map(p -> 1)))
print(‘The   count   of the strong primes below  10,000,000: ’s.len)
print("\nThe first   37   weak primes: "w[0.<37])
print(‘The   count   of the weak   primes below   1,000,000: ’sum(w.filter(p -> p < 1'000'000).map(p -> 1)))
print(‘The   count   of the weak   primes below  10,000,000: ’w.len)
print("\n\nThe first   10 balanced primes: "b[0.<10])
print(‘The   count   of balanced   primes below   1,000,000: ’sum(b.filter(p -> p < 1'000'000).map(p -> 1)))
print(‘The   count   of balanced   primes below  10,000,000: ’b.len)
print("\nTOTAL primes below   1,000,000: "sum(p.filter(pr -> pr < 1'000'000).map(pr -> 1)))
print(‘TOTAL primes below  10,000,000: ’p.len)
