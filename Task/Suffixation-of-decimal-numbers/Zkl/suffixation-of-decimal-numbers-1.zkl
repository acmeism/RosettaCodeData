var [const] BI=Import.lib("zklBigNum");  // GMP
var metric, binary, googol=BI("1e100");
metric,binary = metricBin();

   // suffix: "2" (binary), "10" (metric)
   // For this task, we'll assume BF numbers and treat everything as a big int
fcn sufficate(numStr, fracDigits=",", suffix="10"){
   var [const] numRE=RegExp(0'^\+*(([+-]*\.*\d+)[.]*(\d*)(e*[+-]*\d*))^);

   numRE.search((numStr - " ,").toLower());
   r:=numRE.matched[1];
   if(not r.find(".")) r=BI(r); // else ((((0,7),"1.2e101","1","2","e101")
   else  // convert float ("1.2" or "1.2e10") to big int
      r=BI(numRE.matched[2,*].concat())/(10).pow(numRE.matched[3].len());

   if(fracDigits==",") fracDigits=0; # "digits past decimal or none, if not specified"
   else                fracDigits=fracDigits.toInt();

   suffix=suffix.strip().toInt();
   if(suffix==2) nms,szs :=binary;
   else if(suffix==10)   nms,szs :=metric;
   else //throw(Exception.ValueError("Invalid suffix: %s".fmt(suffix)));
     return("Invalid suffix");

   ar:=r.abs();
   if(ar<szs[0]) return(r.toString());	// little bitty number
   i,sz,nm := szs.filter1n('>(ar)) - 1, szs[i], nms[i];  // False - 1 == True
   if(i==True)  // r > biggest unit
      if(r>=googol) sz,nm = googol, "googol";   // get out the big hammer
      else          sz,nm = szs[-1], nms[-1];   //    even if they want n^2
   fd,m := fracDigits + 4, BI(10).pow(fd);      // int --> float w/extra digits
   a,f,a := r*m/sz, (a%m).toFloat()/m, f + a/m; // to float for rounding
   fmt:="%%,.%df%%s".fmt(fracDigits).fmt;	// eg "%,.5f%s"
   return(fmt(a,nm));
}

   //-->Metric:(("K", "M",..), (1000,1000000,..))
   //   Bin:   (("Ki","Mi",..),(1024,1048576,..))
fcn metricBin{
   ss,m,b := "K M G T P E Z Y X W V U".split(), List(),List();
   ss.zipWith(m.append,[3..3*(ss.len()),3].apply(BI(10).pow)); // Metric
   ss.apply("append","i")
      .zipWith(b.append,[10..10*(ss.len()),10].apply(BI(2).pow)); // Binary
   return(m.filter22("".isType), b.filter22("".isType)); # split to ((strings),(nums))
}
