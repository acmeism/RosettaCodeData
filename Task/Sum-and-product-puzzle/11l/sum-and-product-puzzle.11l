F counter(arr)
   DefaultDict[Int, Int] d
   L(a) arr
      d[a]++
   R d

F decompose_sum(s)
   R (2 .< Int(s / 2 + 1)).map(a -> (a, @s - a))

Set[(Int, Int)] all_pairs_set
L(a) 2..99
   L(b) a + 1 .< 100
      I a + b < 100
         all_pairs_set.add((a, b))
V all_pairs = Array(all_pairs_set)

V product_counts = counter(all_pairs.map((c, d) -> c * d))
V unique_products = Set(all_pairs.filter((a, b) -> :product_counts[a * b] == 1))
V s_pairs = all_pairs.filter((a, b) -> all(decompose_sum(a + b).map((x, y) -> (x, y) !C :unique_products)))

product_counts = counter(s_pairs.map((c, d) -> c * d))
V p_pairs = s_pairs.filter((a, b) -> :product_counts[a * b] == 1)

V sum_counts = counter(p_pairs.map((c, d) -> c + d))
V final_pairs = p_pairs.filter((a, b) -> :sum_counts[a + b] == 1)

print(final_pairs)
