defmodule RC do
  def sumDigits(n), do: sumDigits(n, 10)

  def sumDigits(n, base) when is_integer(n) do
    sumDigits(Integer.to_string(n, base), base)
  end

  def sumDigits(n, base) when is_bitstring(n) do
    String.split(n, "", trim: true) |> Enum.map(&(String.to_integer(&1, base)))
                                    |> Enum.sum
  end
end

Enum.each([1, 1234], fn n -> IO.puts "#{n}: #{ RC.sumDigits(n) }" end)
base = 16
Enum.each(["fe", "f0e"], fn n -> IO.puts "#{n}(#{base}): #{ RC.sumDigits(n,base) }" end)
