class P{	// point
   fcn init(_x,_y){ var [const] x=_x.toFloat(), y=_y.toFloat() }
   fcn __opSub(p) { self(x - p.x, y - p.y) }
   fcn cross(p)   { x*p.y - y*p.x          }
   fcn toString   { "(%7.2f,%7.2f)".fmt(x,y) }
   var [const,proxy] ps=fcn{ T(x.toInt(),y.toInt()) };    // property
}
fcn shClipping(clip,polygon){
   inputList,outputList,clipEdge:=List(), polygon.copy(), List(Void,clip[-1]);
   foreach p in (clip){
      clipEdge.del(0).append(p);
      inputList.clear().extend(outputList);
      outputList.clear();
      S:=inputList[-1];
      foreach E in (inputList){
         if(leftOf(clipEdge,E)){
	    if(not leftOf(clipEdge,S))
	       outputList.append(intersection(S,E,clipEdge));
	    outputList.append(E);
	 }
	 else if(leftOf(clipEdge,S))
	         outputList.append(intersection(S,E,clipEdge));
	 S=E;
      }
   }
   outputList
}
fcn leftOf(line,p){ //-->True (p is left of line), direction of line matters
   p1,p2:=line;		// line is (p1,p2)
   (p2-p1).cross(p-p2)>0;
}
fcn intersection(p1,p2, line){	//-->Point of intersection or False
   p3,p4:=line;
   dx,dy,d:=p2-p1, p3-p4, p1-p3;
   // x0 + a dx = y0 + b dy ->
   // x0 X dx = y0 X dx + b dy X dx ->
   // b = (x0 - y0) X dx / (dy X dx)
   dyx:=dy.cross(dx);
   if(not dyx) return(False);  // parallel lines, could just throw on next line
   dyx=d.cross(dx)/dyx;
   P(p3.x + dyx*dy.x, p3.y + dyx*dy.y);
}
fcn drawPolygon(ppm,listOfPoints,rgb){
   foreach n in (listOfPoints.len()-1){
      ppm.line(listOfPoints[n].ps.xplode(),listOfPoints[n+1].ps.xplode(),rgb);
   }
   ppm.line(listOfPoints[0].ps.xplode(),listOfPoints[-1].ps.xplode(),rgb);
}
