class Heap{  // binary heap
   fcn init(lteqFcn='<=){
      var [const, private] heap=List().pad(64,Void); // a power of 2
      var cnt=0, cmp=lteqFcn;
   }
   fcn push(v){
	// Resize the heap if it is too small to hold another item
      if (cnt==heap.len()) heap.pad(cnt*2,Void);

      index:=cnt; cnt+=1; while(index){	 // Find out where to put the element
	 parent:=(index - 1)/2;
	 if(cmp(heap[parent],v)) break;
	 heap[index] = heap[parent];
	 index = parent;
      }
      heap[index] = v;
   }
   fcn pop{  // Remove the biggest element and return it
      if(not cnt) return(Void);
      v,temp:=heap[0], heap[cnt-=1];

      // Reorder the elements
      index:=0; while(1){   // Find the child to swap with
	 swap:=index*2 + 1;
	 if (swap>=cnt) break; // If there are no children, the heap is reordered
	 other:=swap + 1;
	 if(other<cnt and cmp(heap[other],heap[swap])) swap = other;
	 if(cmp(temp,heap[swap])) break; // If the bigger child is less than or equal to its parent, the heap is reordered

	 heap[index]=heap[swap];
	 index = swap;
      }
      heap[index] = temp;
      v
   }
   var [proxy] top=fcn  { if(cnt==0) Void else heap[0] };
   var [proxy] empty=fcn{ (not cnt) };
}
