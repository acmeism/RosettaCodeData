type Trit
enum
  int FALSE, MAYBE, TRUE
  fun tNot ← <|Trit.byValue(Trit.TRUE.value - me.value)
  fun tAnd ← <Trit you|when(me.value < you.value, me, you)
  fun tOr ← <Trit you|when(me.value > you.value, me, you)
  fun tImp ← <Trit you|me.tNot().tOr(you)
  fun tEquiv ← <Trit you|me.tImp(you).tAnd(you.tImp(me))
  fun tText ← <|me.name.padEnd(5).lower()
end
type Main
for each Trit a in Trit
  writeLine((" " * 5), " ¬ ", a.tText(), " = ", a.tNot().tText())
end
for each Trit a in Trit
  for each Trit b in Trit
    writeLine(a.tText(), " ∧ ", b.tText(), " = ", a.tAnd(b).tText())
  end
end
for each Trit a in Trit
  for each Trit b in Trit
    writeLine(a.tText(), " ∨ ", b.tText(), " = ", a.tOr(b).tText())
  end
end
for each Trit a in Trit
  for each Trit b in Trit
    writeLine(a.tText(), " ⊃ ", b.tText(), " = ", a.tImp(b).tText())
  end
end
for each Trit a in Trit
  for each Trit b in Trit
    writeLine(a.tText(), " ≡ ", b.tText(), " = ", a.tEquiv(b).tText())
  end
end
