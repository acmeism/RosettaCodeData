import extensions;
import system'routines;
import system'collections;

sealed class Trit
{
    bool _value;

    bool cast() = _value;

    constructor(v)
    {
        if (v != nil)
        {
            _value := cast bool(v);
        }
    }

    Trit equivalent(b)
        = _value.equal(cast bool(b)) \ back:nilValue;

    Trit Inverted
        = _value.Inverted \ back:nilValue;

    Trit and(b)
    {
        if (nil == _value)
        {
            ^ b.and:nil \ back:nilValue
        }
        else
        {
            ^ _value.and((lazy:cast bool(b))) \ back:nilValue
        }
    }

    Trit or(b)
    {
        if (nil == _value)
        {
            ^ b.or:nilValue \ back:nilValue
        }
        else
        {
            ^ _value.or((lazy:cast bool(b))) \ back:nilValue
        }
    }

    Trit implies(b)
        = self.Inverted.or(b);

    string toPrintable() = _value.toPrintable() \ back:"maybe";
}

public program()
{
    List<Trit> values := new Trit[]{true, nilValue, false};
    values.forEach:(left)
    {
        console.printLine("¬",left," = ", left.Inverted);
        values.forEach:(right)
        {
            console.printLine(left, " & ", right, " = ", left && right);
            console.printLine(left, " | ", right, " = ", left || right);
            console.printLine(left, " → ", right, " = ", left.implies:right);
            console.printLine(left, " ≡ ", right, " = ", left.equivalent:right)
        }
    }
}
