# borrowing null for "maybe"
val .trSet = [false, null, true]

val .and = f given .a, .b {
    case true, null:
    case null, true:
    case null: null
    default: .a and .b
}

val .or = f given .a, .b {
    case false, null:
    case null, false:
    case null: null
    default: .a or .b
}

val .imply = f if(.a nor .b: not? .a; .b)

# formatting function for the result values
# replacing null with "maybe"
# using left alignment of 5 code points
val .F = f $"\{nn [.r, "maybe"]:-5}"

writeln "a     not a"
for .a in .trSet {
    writeln $"\.a:.F; \(not? .a:.F)"
}

writeln "\na     b     a and b"
for .a in .trSet {
    for .b in .trSet {
        writeln $"\.a:.F; \.b:.F; \.and(.a, .b):.F;"
    }
}

writeln "\na     b     a or b"
for .a in .trSet {
    for .b in .trSet {
        writeln $"\.a:.F; \.b:.F; \.or(.a, .b):.F;"
    }
}

writeln "\na     b     a implies b"
for .a in .trSet {
    for .b in .trSet {
        writeln $"\.a:.F; \.b:.F; \.imply(.a, .b):.F;"
    }
}

writeln "\na     b     a eq b"
for .a in .trSet {
    for .b in .trSet {
        writeln $"\.a:.F; \.b:.F; \.a ==? .b:.F;"
    }
}
