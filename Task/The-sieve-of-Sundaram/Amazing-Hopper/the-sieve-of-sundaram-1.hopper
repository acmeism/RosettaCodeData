#include <jambo.h>

Main
   Set break
   tiempo inicio = 0, tiempo final = 0

   nprimes=1000000, nmax=0
   Let ( nmax :=  Ceil( Mul( nprimes, Sub( Add(Log(nprimes), Log(Log(nprimes))), 0.9385) ) ) )
   k=0, Let( k := Div( Minus two 'nmax', 2) )

   a=0
   Set decimal '0'
   Seqspaced(3, {k} Mul by '2' Plus '1', {k} Mul by '2' Plus '1' Div into '2', a)
   Unset decimal

   i=1
   pos inicial sumando=2, pos ini factor = 2, factor factor = 2, suma = 6
   sumando = 0, factor = 0
   end subloop=0

   Tic( tiempo inicio )
   Loop

     /* calculo las secuencias para las posiciones; ocupa la memoria creada para la primera secuencia,
        es mucho, pero si lo hago con ciclos, el loop termina dentro de 6 minutos :D */
      Let ( end subloop := {k} Minus 'i', {i} Mul by '2' Plus '1', Div it )
      Sequence( pos inicial sumando, 1, end subloop, sumando )
      Sequence( pos ini factor, factor factor, end subloop, factor )

      Let ( sumando := Add( sumando, factor) )
      Set range 'sumando', Set '0', Put 'a'  // pongo ceros en las posiciones calculadas
      Clr range

     /* recalculo índices para nuevas posiciones */
      pos inicial sumando += 2  // 2,4,6,8...
      pos ini factor += suma    // 2, 8, 18, 32
      suma += 4                 // 10, 14, 18
      factor factor += 2        // 2,4,6,8

      ++i
   While ( Less equal ( Mul( Mul( Plus one (i),i ),2), k ) )
   Toc( tiempo inicio, tiempo final )

  /* Visualización de los primeros 100 primos. Esto podría hacerlo con ciclos,
     como lo hace la versión de "C", pero me gusta disparar moscas con un rifle */
   Cls
   ta=0, Compact 'a', Move to 'a'       // elimino los ceros = compacto array
   [1:100] Get 'a', Move to 'ta', Redim (ta, 10, 10)
   Tok sep ("\t"), Print table 'ta'
   Clr interval, Clear 'ta'

  /* imprimo el primo número "nprimes" */
   Print( nprimes, " th Sundaram prime is ", [ nprimes ] Get 'a', "\n" )
   Printnl( "Time = ", tiempo final, " segs" )
End
