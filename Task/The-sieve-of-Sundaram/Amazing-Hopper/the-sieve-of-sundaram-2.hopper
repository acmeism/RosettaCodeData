#include <jambo.h>

Main
   tiempo inicio = 0, tiempo final = 0
   nprimes=1000000,

   nmax=0
   Let ( nmax :=  Ceil( Mul( nprimes, Sub( Add(Log(nprimes), Log(Log(nprimes))), 0.9385) ) ) )
   k=0
   Let( k := Div( Minus two 'nmax', 2) )

   a=0
   Set decimal '0'
   Seqspaced(3, {k} Mul by '2' Plus '1', {k} Mul by '2' Plus '1' Div into '2', a)
   Unset decimal

   pos inicial sumando=2
   pos ini factor = 2, suma = 6
   end subloop=0
   i=1

   Tic( tiempo inicio )
   Loop

      Let ( end subloop := 'k' Minus 'i'; 'i' Mul by '2' Plus '1', Div it )

      Get sequence( pos inicial sumando, 1, end subloop )
      Get sequence( pos ini factor, pos inicial sumando, end subloop )
      ---Add it---

      Get range  // usa el rango desde el stack. Se espera que el rango sea una variable,
                 // por lo que no se quitará desde la memoria hasta un kill (Forget en Jambo)
      Set '0', Put 'a'
      --- Forget ---     // para quitar el rango desde el stack.

      pos inicial sumando += 2  // 2,4,6,8...
      pos ini factor += suma    // 2, 8, 18, 32
      suma += 4                 // 10, 14, 18
      ++i
   While ( Less equal ( Mul( Mul( Plus one (i),i ),2), k ) )

   Toc( tiempo inicio, tiempo final )
   Clr range

  /* Visualización */
   Cls
   ta=0, [1:100] Move positives from 'a' Into 'ta'
         Redim (ta, 10, 10)
   Tok sep ("\t"), Print table 'ta'
   Clr interval, Clear 'ta'

  /* imprimo el primo número "nprimes" */
   Setdecimal(0)
   Print( nprimes, " th Sundaram prime is ", [ nprimes ] Get positives from 'a' , "\n" )
   Printnl( "Time = ", tiempo final, " segs" )
End
