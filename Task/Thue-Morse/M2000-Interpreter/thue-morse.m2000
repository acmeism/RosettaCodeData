thuemorse$=lambda$ (n as integer)->{
		def sb0$="0", sb1$="1"
		n=max.data(0, n)
		=lambda$
			sb0$, sb1$,
			n, park$
			(many)->{
			if n<0 and park$="" then exit
			while n>0
				tmp$=sb0$
				sb0$+=sb1$
				sb1$+=tmp$
				n--
			end while
			if n>=0 then n-- :park$+=sb0$
			if many<len(park$) then
				=left$(park$, many)
				park$=mid$(park$, many+1)
			else
				=park$:park$=""
			end if
			
		}
}
document log$
For i=0 to 7
	Print "T"+(i+1)+":";
	t$=thuemorse$(i)
	do
		batch$=t$(16)
		if batch$<>"" then
			Print batch$;   ' here we can do anything for each batch$
		else
			Print
			exit
		end if
	always
next i

MODULE FromZX81_BASIC {
// T$(J) -> mid$(T$, J, 1)
// THEN GOTO 90  (is ok but here we use THEN 90)
	 10 LET T$="0"
	 20 PRINT "T0=";T$
	 30 FOR I=1 TO 7
	 40 PRINT "T";I;"=";
	 50 FOR J=1 TO LEN(T$)
	 60 IF MID$(T$,J, 1)="0" THEN 90
	 70 LET T$=T$+"0"
	 80 GOTO 100
	 90 LET T$=T$+"1"
	100 NEXT J
	110 PRINT T$
	120 NEXT I
}
FromZX81_BASIC
Module Modern {
	NextMorse=lambda t="0", s="", i=1 -> {
			t+=replace$("b", "1", replace$("1", "0", replace$("0", "b", s)))
			="T"+i+"="+t
			i++ : s=t
	}
	for i=1 to 8
		? NextMorse()
	next
}
modern
