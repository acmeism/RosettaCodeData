type Node
model
  :T value
  Node left
  Node right
  new by generic T, :T ←value do end
  fun visit ← <|write(me.value + " ")
end
type Order
enum
  int PREORDER, INORDER, POSTORDER, LEVELORDER
end
type Main
fun traverse ← void by Node node, Order order
  if node æ null do return end
  if order æ Order.PREORDER
    node.visit()
    traverse(node.left, order)
    traverse(node.right, order)
  else if order æ Order.INORDER
    traverse(node.left, order)
    node.visit()
    traverse(node.right, order)
  else if order æ Order.POSTORDER
    traverse(node.left, order)
    traverse(node.right, order)
    node.visit()
  else if order æ Order.LEVELORDER
    List queue ← Node[]
    queue.insertStart(node)
    while not queue.isEmpty()
      Node next ← queue.deleteLast()
      next.visit()
      if next.left ≠ null do queue.insertStart(next.left) end
      if next.right ≠ null do queue.insertStart(next.right) end
    end
  end
end
Node one ← Node(int, 1)
Node two ← Node(int, 2)
Node three ← Node(int, 3)
Node four ← Node(int, 4)
Node five ← Node(int, 5)
Node six ← Node(int, 6)
Node seven ← Node(int, 7)
Node eight ← Node(int, 8)
Node nine ← Node(int, 9)
one.left ← two
one.right ← three
two.left ← four
two.right ← five
three.left ← six
four.left ← seven
six.left ← eight
six.right ← nine
traverse(one, Order.PREORDER)
writeLine()
traverse(one, Order.INORDER)
writeLine()
traverse(one, Order.POSTORDER)
writeLine()
traverse(one, Order.LEVELORDER)
writeLine()
