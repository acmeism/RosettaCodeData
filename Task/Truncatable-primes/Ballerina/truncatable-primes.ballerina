import ballerina/io;

function getPrimes(int n) returns int[] {
    if n < 2 { return []; }
    if n == 2 { return [2]; }
    int k = (n - 3) / 2 + 1;
    boolean[] marked = [];
    marked.setLength(k);
    foreach int i in 0..<k { marked[i] = true; }
    float f = (<float>n).sqrt().floor();
    int lim = (<int>f - 3) / 2 + 1;
    foreach int i in 0..<lim {
        if marked[i] {
            int p = 2 * i + 3;
            int s = (p * p - 3) / 2;
            int j = s;
            while j < k {
                marked[j] = false;
                j += p;
            }
        }
    }
    int[] primes = [2];
    foreach int i in 0..<k {
        if marked[i] { primes.push(2 * i + 3); }
    }
    return primes;
}

function areComposite(int n) returns boolean[] {
    int[] primes = getPrimes(n);
    boolean[] c = [];
    c.setLength(n + 1);
    foreach int i in 0...n { c[i] = true; }
    foreach int p in primes { c[p] = false; }
    return c;
}

function commatize(int n) returns string {
    string s = n.toString();
    if n < 0 { s = s.substring(1); }
    int le = s.length();
    foreach int i in int:range(le - 3, 0, -3) {
        s = s.substring(0, i) + "," + s.substring(i);
    }
    if n >= 0 { return s; }
    return "-" + s;
}

public function main() returns error? {
    final int lim = 999999;
    boolean[] c = areComposite(lim);
    boolean leftFound = false;
    boolean rightFound = false;
    io:println("Largest truncatable primes less than a million:");
    int i = lim;
    while i > 2 {
        if !c[i] {
            if !rightFound {
                int p = i / 10;
                while p > 0 {
                    if p % 2 == 0 || c[p] { break; }
                    p = p / 10;
                }
                if p == 0 {
                    io:println("  Right truncatable prime = ", commatize(i));
                    rightFound = true;
                    if leftFound { return; }
                }
            }
            if !leftFound {
                string q = i.toString().substring(1);
                if !q.includes("0") {
                    int p = check int:fromString(q);
                    while q.length() > 0 {
                        if p % 2 == 0 || c[p] { break; }
                        q = q.substring(1);
                        p = q.length() > 0 ? check int:fromString(q) : 0;
                    }
                    if q == "" {
                        io:println("  Left truncatable prime  = ", commatize(i));
                        leftFound = true;
                        if rightFound { return; }
                    }
                }
            }
        }
        i -= 2;
    }
}
