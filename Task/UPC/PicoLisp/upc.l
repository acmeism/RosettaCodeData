(de l2n (Lst)
   (case Lst
      ((0 0 0 1 1 0 1) 0)
      ((0 0 1 1 0 0 1) 1)
      ((0 0 1 0 0 1 1) 2)
      ((0 1 1 1 1 0 1) 3)
      ((0 1 0 0 0 1 1) 4)
      ((0 1 1 0 0 0 1) 5)
      ((0 1 0 1 1 1 1) 6)
      ((0 1 1 1 0 1 1) 7)
      ((0 1 1 0 1 1 1) 8)
      ((0 0 0 1 0 1 1) 9) ) )
(de convs (Lst Flg)
   (make
      (for L Lst
         (link
            (if2 (= "#" L) Flg 0 1 1 0) ) ) ) )
(de getL (Lst)
   (make
      (cut 3 'Lst)
      (do 6
         (link (convs (cut 7 'Lst))) )
      (cut 5 'Lst)
      (do 6
         (link (convs (cut 7 'Lst) T)) ) ) )
(de parse (Str)
   (let Lst
      (make
         (link (clip (chop Str)))
         (link (reverse (car (made)))) )
      (find
         '((N) (fully num? N))
         (mapcar '((L) (mapcar l2n (getL L))) Lst) ) ) )
(de upc (Str)
   (let Lst (parse Str)
      (cons
         Lst
         (%
            (apply + (mapcar * Lst (circ 3 1)))
            10 ) ) ) )
(setq *U
   (quote
      "         # #   # ##  #  ## #   ## ### ## ### ## #### # # # ## ##  #   #  ##  ## ###  # ##  ## ### #  # #       "
      "        # # #   ##   ## # #### #   # ## #   ## #   ## # # # ###  # ###  ##  ## ###  # #  ### ###  # # #         "
      "         # #    # # #  ###  #   #    # #  #   #    # # # # ## #   ## #   ## #   ##   # # #### ### ## # #         "
      "       # # ##  ## ##  ##   #  #   #  # ###  # ##  ## # # #   ## ##  #  ### ## ## #   # #### ## #   # #        "
      "         # # ### ## #   ## ## ###  ##  # ##   #   # ## # # ### #  ## ##  #    # ### #  ## ##  #      # #          "
      "          # #  #   # ##  ##  #   #   #  # ##  ##  #   # # # # #### #  ##  # #### #### # #  ##  # #### # #         "
      "         # #  #  ##  ##  # #   ## ##   # ### ## ##   # # # #  #   #   #  #  ### # #    ###  # #  #   # #        "
      "        # # #    # ##  ##   #  # ##  ##  ### #   #  # # # ### ## ## ### ## ### ### ## #  ##  ### ## # #         "
      "         # # ### ##   ## # # #### #   ## # #### # #### # # #   #  # ###  #    # ###  # #    # ###  # # #       "
      "        # # # #### ##   # #### # #   ## ## ### #### # # # #  ### # ###  ###  # # ###  #    # #  ### # #         " ) )
(for L (mapcar upc *U)
   (println (if (car L) @ 'invalid)) )
