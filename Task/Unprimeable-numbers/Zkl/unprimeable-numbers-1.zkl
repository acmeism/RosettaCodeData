var [const] BI=Import("zklBigNum");  // libGMP

fcn isUnprimeable(n){  //--> n (!0) or Void, a filter
   bn,t := BI(0),n/10*10;
   foreach k in ([t+1..t+9,2]){ if(bn.set(k).probablyPrime()) return(Void.Skip) }
   if(n==n/2*2 or n==n/5*5){
      if(not bn.set(n%10).probablyPrime())          return(n);
      if( (n % (10).pow(n.toFloat().log10()) ) > 9) return(n);
   }
   foreach k in ([1 .. n.toFloat().log10()]){
      u,v := (10).pow(k), (n - (u * ((n/u) % 10)));
      foreach d in (10){ if(bn.set(v + d*u).probablyPrime()) return(Void.Skip); }
   }
   n
}
fcn isUnprimeableW{ [100..].tweak(isUnprimeable) }	// --> iterator
