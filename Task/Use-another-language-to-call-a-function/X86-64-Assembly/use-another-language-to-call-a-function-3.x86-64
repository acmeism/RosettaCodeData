format ELF64
public Query
section ".text" executable
Query:
    push rdx                       ;preserve the registers
    push rcx                       ;we change. Just in case.
    xor rax, rax                   ;zero RAX. we use as an index
    mov rdx, end_message - message ;length of message
    cmp rdx, [rsi]                 ;is message bigger than buffer
    jg  .exit                      ;if yes goto .exit with zero in RAX
 .xstring:
    mov cl,  byte[message + rax]   ;move character to CL
    mov byte[rdi + rax], cl        ;move character in CL to buffer
    inc rax                        ;increment index
    cmp rax, rdx                   ;is index less than length of
    jl  .xstring                   ;message? if so loop again.
 .finish:
    mov qword[rsi], rax            ;mov number of bytes copied to Length
    mov rax, 1                     ;mov return value of 1 into RAX
 .exit:
    pop rcx                        ;restore the registers to calling function
    pop rdx                        ;Ben Eater says it's the polite thing to do.
    ret                            ;return to calling function.

section ".data" writable
message: db "Here am I"
end_message:
