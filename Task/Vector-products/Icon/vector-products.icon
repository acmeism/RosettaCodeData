# record type to store a 3D vector
record Vector3D(x, y, z)

# procedure to display vector as a string
procedure toString (vector)
  return "(" || vector.x || ", " || vector.y || ", " || vector.z || ")"
end

procedure dotProduct (a, b)
  return a.x * b.x + a.y * b.y + a.z * b.z
end

procedure crossProduct (a, b)
  x := a.y * b.z - a.z * b.y
  y := a.z * b.x - a.x * b.z
  z := a.x * b.y - a.y * b.x
  return Vector3D(x, y, z)
end

procedure scalarTriple (a, b, c)
  return dotProduct (a, crossProduct (b, c))
end

procedure vectorTriple (a, b, c)
  return crossProduct (a, crossProduct (b, c))
end

# main procedure, to run given test
procedure main ()
  a := Vector3D(3, 4, 5)
  b := Vector3D(4, 3, 5)
  c := Vector3D(-5, -12, -13)

  writes ("A.B : " || toString(a) || "." || toString(b) || " = ")
  write (dotProduct (a, b))
  writes ("AxB : " || toString(a) || "x" || toString(b) || " = ")
  write (toString(crossProduct (a, b)))
  writes ("A.(BxC) : " || toString(a) || ".(" || toString(b) || "x" || toString(c) || ") = ")
  write (scalarTriple (a, b, c))
  writes ("Ax(BxC) : " || toString(a) || "x(" || toString(b) || "x" || toString(c) || ") = ")
  write (toString(vectorTriple (a, b, c)))
end
