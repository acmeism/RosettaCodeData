include ..\Utilitys.pmt

( 3 4 5 ) var vectorA
( 4 3 5 ) var vectorB
( -5 -12 -13 ) var vectorC

def dotProduct  /# x y -- n #/
    0 >ps
    len for var i
        i get rot i get rot * ps> + >ps
    endfor
    drop drop
    ps>
enddef

def crossProduct    /# x y -- z #/
    1 get rot 2 get rot * >ps
    1 get rot 2 get rot * >ps
    3 get rot 1 get rot * >ps
    3 get rot 1 get rot * >ps
    2 get rot 3 get rot * >ps
    2 get rot 3 get rot * ps> - ps> ps> - ps> ps> - 3 tolist
    nip nip
enddef

"Dot Product = " print vectorA vectorB dotProduct ?
"Cross Product = " print vectorA vectorB crossProduct ?
"Scalar Triple Product = " print vectorB vectorC crossProduct vectorA swap dotProduct ?
"Vector Triple Product = " print vectorB vectorC crossProduct vectorA swap crossProduct ?
