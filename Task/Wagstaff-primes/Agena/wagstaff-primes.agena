scope # find some Wagstaff primes: primes of the form ( 2^p + 1 ) / 3
      #                            where p is an odd prime
    local constant maxWagstaff :=  10;      # number of Wagstaff primes to find
    local constant sieveSize   := 200;      # hopefully, enough primes...
    create register primes( sieveSize );    # "vector" to be sieved
    scope                                   # sieve the primes up to sieveMax
        primes[ 1 ] := false;
        for sPos from 2 to sieveSize do primes[ sPos ] := true od;
        for sPos from 2 to entier( sqrt( sieveSize ) ) do
            if primes[ sPos ] then
                for p from sPos * sPos to sieveSize by sPos do
                    primes[ p ] := false
                od
            fi
        od
    end;
    scope                        # attempt to find the Wagstaff primes
        local powerOf2 := 2;     # 2^1
        local wCount   := 0;     # number of Wagstaff primes found so far
        for p from 3 by 2 while wCount < maxWagstaff do
            powerOf2 *:= 4;
            if primes[ p ] then
                local w, isPrime := ( powerOf2 + 1 ) \ 3, true;
                # check w is prime - trial division
                for n from 3 by 2 while n * n <= w and isPrime do
                    isPrime := w mod n <> 0;
                od;
                if isPrime then # have another Wagstaff prime
                    wCount +:= 1;
                    # have to use %f to print w as it could be > 2^32
                    printf( "%2d: %4d: %16.0f\n", wCount, p, w )
                fi
            fi
        od
    end
end
