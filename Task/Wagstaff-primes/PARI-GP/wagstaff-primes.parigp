\\ compiler: gp2c option: gp2c-run -g wprp.gp


/* wprp(p): input odd prime p > 5 . */
/* returns 1 if (2^p+1)/3 is a Wagstaff probable prime. */
wprp(p) = {

    /* trial division up to a reasonable depth (time ratio tdiv/llr ≈ 0.2) */
    my(l=log(p), ld=log(l));
    forprimestep(q = 1, sqr(ld)^(l/log(2))\4, p+p,
           if(Mod(2,q)^p == -1, return)
    );

    /*            From  R. & H. LIFCHITZ July 2000           */
    /*   see: http://primenumbers.net/Documents/TestNP.pdf   */
    /* if (2^p+1)/3 is prime ==> 25^2^(p-1) ≡ 25 (mod 2^p+1) */
    /* Lucas-Lehmer-Riesel test with fast modular reduction. */
    my(s=25, m=2^p-1);
    for(i = 2, p,
        s = sqr(s);
        s = bitand(s,m) - s>>p
    );
    s==25
};      /* end wprp */


/* get exponents of Wagstaff prps in range [a,b] */
wprprun(a, b) = {
    my(t=0, c=0, thr=default(nbthreads));
    a = max(a,3);
    gettime();
    if(a <= 5,
        if(a == 3, c++; p = 3; printf("#%d\tW%d\t%2dmin, %2d,%03d ms\n", c, p, t\60000%60, t\1000%60, t%1000));
        c++; p = 5; printf("#%d\tW%d\t%2dmin, %2d,%03d ms\n", c, p, t\60000%60, t\1000%60, t%1000);
        a = 7
    );
    parforprime(p= a, b, wprp(p), d,       /* wprp(p) -> d  copy from parallel world into real world. */
        if(d,
            t += gettime()\thr;
            c++;
            printf("#%d\tW%d\t%2dmin, %2d,%03d ms\n", c, p, t\60000%60, t\1000%60, t%1000)
        )
    )
};   /* end wprprun */


/* if running wprp as script */
\\ export(wprp);


wprprun(2, 42737)
