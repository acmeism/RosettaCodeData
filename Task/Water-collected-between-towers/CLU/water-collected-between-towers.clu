max = proc [T: type] (a,b: T) returns (T)
      where T has lt: proctype (T,T) returns (bool)
    if a<b then return(b)
    else return(a)
    end
end max

% based on: https://stackoverflow.com/a/42821623
water = proc (towers: sequence[int]) returns (int)
    si = sequence[int]

    w: int := 0
    left: int := 1
    right: int := si$size(towers)
    max_left: int := si$bottom(towers)
    max_right: int := si$top(towers)

    while left <= right do
        if towers[left] <= towers[right] then
            max_left := max[int](towers[left], max_left)
            w := w + max[int](max_left - towers[left], 0)
            left := left + 1
        else
            max_right := max[int](towers[right], max_right)
            w := w + max[int](max_right - towers[right], 0)
            right := right - 1
        end
    end
    return(w)
end water

start_up = proc ()
    si = sequence[int]
    ssi = sequence[si]

    po: stream := stream$primary_output()

    tests: ssi := ssi$[
        si$[1, 5, 3, 7, 2],
        si$[5, 3, 7, 2, 6, 4, 5, 9, 1, 2],
        si$[2, 6, 3, 5, 2, 8, 1, 4, 2, 2, 5, 3, 5, 7, 4, 1],
        si$[5, 5, 5, 5],
        si$[5, 6, 7, 8],
        si$[8, 7, 7, 6],
        si$[6, 7, 10, 7, 6]
    ]

    for test: si in ssi$elements(tests) do
        stream$puts(po, int$unparse(water(test)) || " ")
    end
end start_up
