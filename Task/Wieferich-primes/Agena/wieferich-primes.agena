scope # find some Wierferich Primes: primes p where p^2 evenly divides 2^(p-1)-1

    import mapm; # explicit import needed for: Linux, Mac OS X, Windows and Solaris

    local constant maxNumber := 5000;             # maximum number we will consider
    mapm.xdigits( 1600 );                         # need 1600 digits for this task

    # sieve the primes up to maxNumber
    local primes; create register primes( maxNumber );
    primes[ 1 ] := false;
    for sPos from 2 to maxNumber do primes[ sPos ] := true od;
    for sPos from 2 to entier( sqrt( maxNumber ) ) do
        if primes[ sPos ] then
            for p from sPos * sPos to maxNumber by sPos do
                primes[ p ] := false
            od
        fi
    od;

    # find the first two Wierferich Primes - note 2 is not a Wierferich prime
    local constant b0, constant b1 := mapm.xnumber( 0 ), mapm.xnumber( 1 );
    local pPos, twoToPMinus1, power, wCount := 1, b1, 0, 0;
    for pPos from 3 to size primes by 2 while wCount < 2 do
        if primes[ pPos ] then
            local constant p := pPos;
            while power < ( p - 1 ) do
                twoToPMinus1 +:= twoToPMinus1;
                power        +:= 1
            od;
            local constant p2 := p * p;
            if ( twoToPMinus1 - b1 ) % p2 = b0 then
                printf( " %d", p )
                wCount +:= 1
            fi
        fi
    od
end
