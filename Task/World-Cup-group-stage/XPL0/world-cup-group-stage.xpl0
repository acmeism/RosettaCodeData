include xpllib;         \for StrCopy, StrCopy, Sort and Print
char Results(7);

func Next_Result;
char Ptr;
int  Num, I, D, Rem;
[Ptr:= Results + 5;
Num:= 0;

\Check if the space has been examined
if StrCmp(Results, "222222") = 0 then
    return false;

\Translate the base 3 string back to a base 10 integer
I:= 0;
while Results(I) # 0 do
    [D:= Results(I) - ^0;
    Num:= 3*Num + D;
    I:= I+1;
    ];

\To the next value to process
Num:= Num+1;

\Write the base 3 string (fixed width)
while Num > 0 do
    [Num:= Num/3;
    Rem:= rem(0);
    Ptr(0):= Rem + ^0;
    Ptr:= Ptr-1;
    ];

\Zero fill the remainder
while Ptr > Results do
    [Ptr(0):= ^0;
    Ptr:= Ptr-1;
    ];
return true;
];

\Main
char Games;
int  Places, Points(4, 10), I, J, Records(4), G0, G1;
[Games:= ["12", "13", "14", "23", "24", "34"];
Places:= ["1st", "2nd", "3rd", "4th"];

StrCopy(Results, "000000");
for I:= 0 to 4-1 do
    for J:= 0 to 10-1 do
        Points(I, J):= 0;

repeat  for I:= 0 to 4-1 do Records(I):= 0;
        for I:= 0 to 6-1 do
            [G0:= @Records(Games(I,0)-^1);
             G1:= @Records(Games(I,1)-^1);
             case Results(I) of
              ^2:  G0(0):= G0(0)+3;
              ^1: [G0(0):= G0(0)+1;  G1(0):= G1(0)+1];
              ^0:  G1(0):= G1(0)+3
            other [];
            ];

        Sort(Records, 4);
        for I:= 0 to 4-1 do
            Points(I, Records(I)):= Points(I, Records(I)) + 1;

until   not Next_Result;

Print("POINTS       0    1    2    3    4    5    6    7    8    9\n");
Print("-----------------------------------------------------------\n");
for I:= 0 to 4-1 do
    [Print("%s place", Places(I));
    for J:= 0 to 10-1 do
        Print("%5d", Points(3-I, J));
    Print("\n");
    ];
]
