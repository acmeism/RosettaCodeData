% Get list of distinct Fibonacci numbers up to N
fibonacci = proc (n: int) returns (array[int])
    list: array[int] := array[int]$[]
    a: int := 1
    b: int := 2
    while a <= n do
        array[int]$addh(list,a)
        a, b := b, a+b
    end
    return(list)
end fibonacci

% Find the Zeckendorf representation of N
zeckendorf = proc (n: int) returns (string) signals (negative)
    if n<0 then signal negative end
    if n=0 then return("0") end

    fibs: array[int] := fibonacci(n)
    result: array[char] := array[char]$[]

    while ~array[int]$empty(fibs) do
        fib: int := array[int]$remh(fibs)
        if fib <= n then
            n := n - fib
            array[char]$addh(result,'1')
        else
            array[char]$addh(result,'0')
        end
    end
    return(string$ac2s(result))
end zeckendorf

% Print the Zeckendorf representations of 0 to 20
start_up = proc ()
    po: stream := stream$primary_output()
    for i: int in int$from_to(0,20) do
        stream$putright(po, int$unparse(i), 2)
        stream$puts(po, ": ")
        stream$putl(po, zeckendorf(i))
    end
end start_up
