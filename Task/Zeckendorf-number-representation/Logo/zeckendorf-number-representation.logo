; return the (N+1)th Fibonacci number (1,2,3,5,8,13,...)
to fib m
  local "n
  make "n sum :m 1
  if [lessequal? :n 0] [output difference fib sum :n 2 fib sum :n 1]
  global "_fib
  if [not name? "_fib] [
    make "_fib [1 1]
  ]
  local "length
  make "length count :_fib
  while [greater? :n :length] [
    make "_fib (lput (sum (last :_fib) (last (butlast :_fib))) :_fib)
    make "length sum :length 1
  ]
  output item :n :_fib
end

; return the binary Zeckendorf representation of a nonnegative number
to zeckendorf n
  if [less? :n 0] [(throw "error [Number must be nonnegative.])]
  (local "i "f "result)
  make "i :n
  make "f fib :i
  while [less? :f :n] [make "i sum :i 1 make "f fib :i]

  make "result "||
  while [greater? :i 0] [
    ifelse [greaterequal? :n :f] [
      make "result lput 1 :result
      make "n difference :n :f
    ] [
      if [not empty? :result] [
        make "result lput 0 :result
      ]
    ]
    make "i difference :i 1
    make "f fib :i
  ]
  if [equal? :result "||] [
    make "result 0
  ]
  output :result
end

type zeckendorf 0
repeat 20 [
  type word "| | zeckendorf repcount
]
print []
bye
