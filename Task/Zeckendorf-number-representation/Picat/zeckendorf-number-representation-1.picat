go =>
  foreach(Num in 0..20)
    zeckendorf_cp(Num,X,F),
    Nums = [F[I] : I in 1..X.length, X[I] = 1],
    printf("%2d %6s %w\n",Num, rep(X),Nums),
  end,
  nl.

zeckendorf_cp(Num, X,F) =>
  F = get_fibs(Num).reverse(),
  N = F.length,
  X = new_list(N),
  X :: 0..1,

  % From the task description:
  % """
  % For a true Zeckendorf number there is the added restriction that
  % no two consecutive Fibonacci numbers can be used which leads to
  % the former unique solution.
  % """
  foreach(I in 2..N)
    X[I-1] #= 1 #=> X[I] #= 0
  end,

  scalar_product(F,X,Num),

  solve([ff,split],X).

%
% Fibonacci numbers
%
table
fib(0) = 0.
fib(1) = 1.
fib(N) = fib(N-1) + fib(N-2).

%
% Remove leading 0's and stringify it
%
rep(X) = Str =>
  First = 1,
  if X.length > 1, X[First] = 0 then
    while (X[First] == 0)
      First := First + 1
    end
  end,
  Str = [X[I].to_string() : I in First..X.length].join('').

%
% Return a list of fibs <= N
%
get_fibs(N) = Fibs =>
  I = 2,
  Fib = fib(I),
  Fibs1 = [Fib],
  while (Fib < N)
    I := I + 1,
    Fib := fib(I),
    Fibs1 := Fibs1 ++ [Fib]
  end,
  Fibs = Fibs1.
