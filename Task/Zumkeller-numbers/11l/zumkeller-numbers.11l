F getDivisors(n)
   V divs = [1, n]
   V i = 2
   L i * i <= n
      I n % i == 0
         divs [+]= i

         V j = n I/ i
         I i != j
            divs [+]= j
      i++
   R divs

F isPartSum(divs, sum)
   I sum == 0
      R 1B

   V le = divs.len
   I le == 0
      R 0B

   V last = divs.last
   [Int] newDivs
   L(i) 0 .< le - 1
      newDivs [+]= divs[i]

   I last > sum
      R isPartSum(newDivs, sum)
   E
      R isPartSum(newDivs, sum) | isPartSum(newDivs, sum - last)

F isZumkeller(n)
   V divs = getDivisors(n)
   V s = sum(divs)

   I s % 2 == 1
      R 0B

   I n % 2 == 1
      V abundance = s - 2 * n
      R abundance > 0 & abundance % 2 == 0

   R isPartSum(divs, s I/ 2)

print(‘The first 220 Zumkeller numbers are:’)
V i = 2
V count = 0
L count < 220
   I isZumkeller(i)
      print(‘#3 ’.format(i), end' ‘’)
      count++
      I count % 20 == 0
         print()
   i++

print("\nThe first 40 odd Zumkeller numbers are:")
i = 3
count = 0
L count < 40
   I isZumkeller(i)
      print(‘#5 ’.format(i), end' ‘’)
      count++
      I count % 10 == 0
         print()
   i += 2

print("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
i = 3
count = 0
L count < 40
   I i % 10 != 5 & isZumkeller(i)
      print(‘#7 ’.format(i), end' ‘’)
      count++
      I count % 8 == 0
         print()
   i += 2
