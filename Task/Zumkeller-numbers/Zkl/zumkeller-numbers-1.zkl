fcn properDivs(n){ // does not include n
//   if(n==1) return(T);	// we con't care about this case
   ( pd:=[1..(n).toFloat().sqrt()].filter('wrap(x){ n%x==0 }) )
   .pump(pd,'wrap(pd){ if(pd!=1 and (y:=n/pd)!=pd ) y else Void.Skip })
}
fcn canSum(goal,divs){
   if(goal==0 or divs[0]==goal) return(True);
   if(divs.len()>1){
      if(divs[0]>goal) return(canSum(goal,divs[1,*]));  // tail recursion
      else return(canSum(goal - divs[0], divs[1,*]) or canSum(goal, divs[1,*]));
   }
   False
}
fcn isZumkellerW(n){	// a filter for a iterator
   ds,sum := properDivs(n), ds.sum(0) + n;
   // if sum is odd, it can't be split into two partitions with equal sums
   if(sum.isOdd) return(Void.Skip);
   // if n is odd use 'abundant odd number' optimization
   if(n.isOdd){
      abundance:=sum - 2*n;
      return( if(abundance>0 and abundance.isEven) n else Void.Skip);
   }
   canSum(sum/2,ds) and n or Void.Skip	// sum is even
}
